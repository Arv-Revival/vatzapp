{"version":3,"sources":["views/fileupload/index.js"],"names":["FileUpload","useState","showLoader","setShowLoader","fileList","setfileList","showProgress","setshowProgress","uploadStarted","setuploadStarted","uploadCompleted","setuploadCompleted","progressWidth","setProgressWidth","checkerAssigned","setcheckerAssigned","successUploads","setSuccessUploads","failedUploads","setFailedUploads","rejectedUploads","setRejectedUploads","MAX_FILE_SIZE","CONFIG","MAX_UPLOAD_SIZE","SUPPORTED_FORMATS","React","useMemo","useEffect","userObj","JSON","parse","sessionStorage","getItem","is_checker_assigned","onUploadComplete","useCallback","length","params","file_id_list","map","i","fileId","callApi","ApiConstants","entry","create","then","response","status_code","showNotification","message","catch","error","pendingList","filter","status","setTimeout","checkFileType","file","ext","exec","name","console","log","includes","toLowerCase","onDrop","acceptedFiles","acceptedList","rejectedList","forEach","size","push","id","Date","valueOf","reason","fileData","oldList","useDropzone","getRootProps","getInputProps","isDragActive","formatBytes","bytes","decimals","k","dm","sizes","Math","floor","parseFloat","pow","toFixed","uploadFiles","data","a","Promise","resolve","reject","type","imageCompression","maxSizeMB","maxWidthOrHeight","useWebWorker","result","formData","FormData","append","callUploadApi","Fragment","xl","className","Header","Body","style","fontSize","role","width","some","onClick","progressDiv","oldWidth","payload","file_id","key","title","updatedList","removeFailedFile","removeFile"],"mappings":"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","file":"static/js/62.28b51289.chunk.js","sourcesContent":["import React, { useCallback, useState, useEffect } from \"react\";\nimport { Row, Col, Card } from \"react-bootstrap\";\nimport { useDropzone } from \"react-dropzone\";\n\nimport { callApi, callUploadApi } from \"../../services/apiService\";\nimport { showNotification } from \"../../services/toasterService\";\nimport { ApiConstants } from \"../../config/apiConstants\";\nimport { CONFIG } from \"../../config/constant\";\nimport Spinner from \"../../components/Spinner\";\nimport imageCompression from \"browser-image-compression\";\n\nconst FileUpload = () => {\n  const [showLoader, setShowLoader] = useState(false);\n  const [fileList, setfileList] = useState([]);\n  const [showProgress, setshowProgress] = useState(false);\n  const [uploadStarted, setuploadStarted] = useState(false);\n  const [uploadCompleted, setuploadCompleted] = useState(false);\n  const [progressWidth, setProgressWidth] = useState(0);\n  const [checkerAssigned, setcheckerAssigned] = useState(false);\n  const [successUploads, setSuccessUploads] = useState([]);\n  const [failedUploads, setFailedUploads] = useState([]);\n  const [rejectedUploads, setRejectedUploads] = useState([]);\n\n  const MAX_FILE_SIZE = CONFIG.MAX_UPLOAD_SIZE;\n  const SUPPORTED_FORMATS = React.useMemo(() => [\"pdf\", \"jpg\", \"jpeg\", \"png\", \"doc\", \"docx\", \"jfif\", \"gif\", \"bmp\"], []);\n\n  useEffect(() => {\n    let userObj = JSON.parse(sessionStorage.getItem(\"user\"));\n    setcheckerAssigned(userObj.is_checker_assigned);\n  }, []);\n\n  async function handleImageUpload(event) {\n    const imageFile = event.target.files[0];\n    console.log(\"originalFile instanceof Blob\", imageFile instanceof Blob); // true\n    console.log(`originalFile size ${imageFile.size / 1024 / 1024} MB`);\n\n    const options = {\n      maxSizeMB: 1,\n      maxWidthOrHeight: 1920,\n      useWebWorker: true,\n    };\n\n    try {\n      const compressedFile = await imageCompression(imageFile, options);\n      console.log(\"compressedFile instanceof Blob\", compressedFile instanceof Blob);\n      console.log(`compressedFile size ${compressedFile.size / 1024 / 1024} MB`);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  const onUploadComplete = React.useCallback(() => {\n    setuploadStarted(false);\n    setshowProgress(false);\n\n    if (!successUploads.length) return;\n\n    setShowLoader(true);\n    let params = {\n      file_id_list: successUploads.map((i) => {\n        return i.fileId;\n      }),\n    };\n    callApi(\"post\", ApiConstants.entry.create, params, true)\n      .then((response) => {\n        setShowLoader(false);\n        if (response && response.status_code === 201) {\n          setSuccessUploads([]);\n          showNotification(\"Success\", response.message, \"success\");\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        setShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  }, [successUploads]);\n\n  useEffect(() => {\n    let pendingList = fileList.filter((i) => i.status === 0);\n    if (!uploadCompleted && uploadStarted && !pendingList.length) {\n      setuploadCompleted(true);\n      setTimeout(() => {\n        onUploadComplete();\n      }, 1000);\n    }\n  }, [successUploads, failedUploads, fileList, uploadCompleted, uploadStarted, onUploadComplete]);\n\n  const checkFileType = useCallback(\n    (file) => {\n      let regex = /(?:\\.([^.]+))?$/;\n      let ext = regex.exec(file.name)[1];\n      console.log(ext);\n      if (ext === \"jpg\" || ext === \"jpeg\" || ext === \"png\") {\n      }\n      return SUPPORTED_FORMATS.includes(ext?.toLowerCase());\n    },\n    [SUPPORTED_FORMATS]\n  );\n\n  const removeFile = (file) => {\n    console.log(file);\n    let updatedList = rejectedUploads.filter((i) => {\n      console.log(i.id, file.id, i.fileData.size, file.fileData.size);\n      return i.id !== file.id || i.fileData.size !== file.fileData.size;\n    });\n    setRejectedUploads(updatedList);\n  };\n\n  const removeFailedFile = (file) => {\n    console.log(file);\n    let updatedList = fileList.filter((i) => {\n      console.log(i.id, file.id, i.fileData.size, file.fileData.size);\n      return i.id !== file.id || i.fileData.size !== file.fileData.size;\n    });\n    setfileList(updatedList);\n  };\n\n  const onDrop = useCallback(\n    (acceptedFiles) => {\n      let acceptedList = [],\n        rejectedList = [];\n      acceptedFiles.forEach((file) => {\n        if (!checkFileType(file)) {\n          rejectedList.push({ id: new Date().valueOf(), reason: \"Unsupported file format\", fileData: file });\n        } else if (file.size >= MAX_FILE_SIZE) {\n          rejectedList.push({ id: new Date().valueOf(), reason: \"Exceeds maximum file size\", fileData: file });\n        } else {\n          acceptedList.push({ id: new Date().valueOf(), status: 0, fileData: file });\n        }\n      });\n\n      setfileList((oldList) => [...oldList, ...acceptedList]);\n      setRejectedUploads((oldList) => [...oldList, ...rejectedList]);\n    },\n    [MAX_FILE_SIZE, checkFileType]\n  );\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n  const formatBytes = (bytes, decimals = 2) => {\n    if (bytes === 0) return \"0 Bytes\";\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + \" \" + sizes[i];\n  };\n\n  const uploadFiles = async (data) =>\n    new Promise((resolve, reject) => {\n      const options = { maxSizeMB: 1, maxWidthOrHeight: 1920, useWebWorker: true };\n      // console.log(\"File\", data.type.includes(\"image\"));\n      // console.log(\"File\", data.type.includes(\"image\"));\n      if (data.type.includes(\"image\")) {\n        imageCompression(data, options)\n          .then((result) => {\n            let formData = new FormData();\n            formData.append(\"file\", result);\n            return callUploadApi(formData);\n          })\n          .then((response) => {\n            if (response.status_code === 201) {\n              resolve(response);\n            } else {\n              reject(response);\n              showNotification(\"Error\", response.message, \"error\");\n            }\n          })\n          .catch((error) => {\n            console.log(\"File Upload Error!!!\\n\\n\", error);\n            reject(error);\n            showNotification(\"Error\", \"File upload failed\", \"error\");\n          });\n      } else {\n        let formData = new FormData();\n        formData.append(\"file\", data);\n        callUploadApi(formData)\n          .then((response) => {\n            if (response.status_code === 201) {\n              resolve(response);\n            } else {\n              reject(response);\n              showNotification(\"Error\", response.message, \"error\");\n            }\n          })\n          .catch((error) => {\n            console.log(\"File Upload Error!!!\\n\\n\", error);\n            reject(error);\n            showNotification(\"Error\", \"File upload failed\", \"error\");\n          });\n      }\n    });\n\n  const uploadAll = () => {\n    if (uploadStarted) return;\n\n    setProgressWidth(0);\n    setuploadCompleted(false);\n    setuploadStarted(true);\n    let pendingList = fileList.filter((i) => i.status === 0);\n    let progressDiv = pendingList.length ? 100 / pendingList.length : 0;\n    setshowProgress(true);\n\n    fileList.forEach((file) => {\n      if (file.status === 0) {\n        uploadFiles(file.fileData)\n          .then((response) => {\n            file.status = 1;\n            setProgressWidth((oldWidth) => oldWidth + progressDiv);\n            setSuccessUploads((oldList) => [...oldList, { ...file, fileId: response?.payload?.file_id }]);\n          })\n          .catch((error) => {\n            file.status = 2;\n            setProgressWidth((oldWidth) => oldWidth + progressDiv);\n            setFailedUploads((oldList) => [...oldList, file]);\n          });\n      }\n    });\n  };\n\n  return (\n    <React.Fragment>\n      {showLoader && <Spinner />}\n      <Row>\n        <Col xl={12}>\n          <Card className=\"rounded\">\n            <Card.Header>\n              <h5 className=\"text-primary\">Upload Files</h5>\n            </Card.Header>\n            <Card.Body className=\"p-4\">\n              {checkerAssigned ? (\n                <div>\n                  <div {...getRootProps()} className=\"drop-zone\">\n                    <input {...getInputProps()} />\n                    {isDragActive ? (\n                      <p>Drop the files here ...</p>\n                    ) : (\n                      <div className=\"text-center\">\n                        <i className=\"feather icon-upload-cloud upload-icon\"></i>\n                        <p className=\"font-weight-bold\" style={{ fontSize: 15 }}>\n                          Drag files here, or click to browse files\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"text-right\">\n                    <div style={{ fontSize: 11 }} className=\"my-2\">\n                      Supported file formats JPG, JPEG, PNG, JFIF, GIF, BMP, PDF, DOC, DOCX.\n                    </div>\n                    <div style={{ fontSize: 11 }} className=\"mb-2\">\n                      Max upload file size 50 MB\n                    </div>\n                  </div>\n\n                  <div className=\"upload-container pt-3\">\n                    {showProgress && (\n                      <div className=\"mb-4 progress\">\n                        <div role=\"progressbar\" className=\"progress-bar bg-success progress-bar-animated progress-bar-striped\" style={{ width: progressWidth + \"%\" }}></div>\n                      </div>\n                    )}\n                    {fileList.some((i) => i.status === 0) && (\n                      <div className=\"text-center mb-3\">\n                        <button className=\"btn btn-primary upload-btn\" onClick={uploadAll}>\n                          {uploadStarted && <span className=\"spinner-border spinner-border-sm mr-1\" role=\"status\"></span>}\n                          Upload Documents\n                        </button>\n                      </div>\n                    )}\n                  </div>\n                  {fileList.length > 0 && (\n                    <React.Fragment>\n                      <div className=\"files-list-container\">\n                        {fileList.map((file, key) => {\n                          return (\n                            <div key={key} className=\"file-item p-2\">\n                              <div className=\"d-flex\">\n                                <div className=\"file-icon\">\n                                  <i className=\"feather icon-file-text\" />\n                                </div>\n                                <div className=\"file-details\">\n                                  <div className=\"file-name\">{file.fileData.name}</div>\n                                  <div className=\"file-size\">{formatBytes(file.fileData.size)}</div>\n                                </div>\n                              </div>\n                              <div className={`upload-status ${file.status === 1 ? \"text-success\" : file.status === 2 ? \"text-danger\" : \"text-primary\"}`}>\n                                <i className={`feather ${file.status === 1 ? \"icon-check-circle\" : file.status === 2 ? \"icon-x-circle\" : \"icon-upload-cloud\"}`} role=\"button\" title=\"Remove\" onClick={() => removeFailedFile(file)} />\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </div>\n                    </React.Fragment>\n                  )}\n                  {rejectedUploads.length > 0 && (\n                    <React.Fragment>\n                      <label className=\"text-danger my-3\">Rejected Files</label>\n                      <div className=\"files-list-container\">\n                        {rejectedUploads.map((file, key) => {\n                          return (\n                            <div key={key} className=\"file-item p-2\">\n                              <div className=\"d-flex\">\n                                <div className=\"file-icon\">\n                                  <i className=\"feather icon-file-text\" />\n                                </div>\n                                <div className=\"file-details\">\n                                  <div className=\"file-name\">{file.fileData.name}</div>\n                                  <div className=\"file-size\">{formatBytes(file.fileData.size)}</div>\n                                </div>\n                              </div>\n                              <div className=\"d-flex align-items-center\">\n                                <div className=\"mr-4 text-danger\">{file.reason}</div>\n                                <div className=\"upload-status text-danger\" role=\"button\" title=\"Remove\" onClick={() => removeFile(file)}>\n                                  <i className=\"feather icon-x-circle\" />\n                                </div>\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </div>\n                    </React.Fragment>\n                  )}\n                </div>\n              ) : (\n                <div role=\"alert\" className=\"fade alert alert-danger show\">\n                  No Checker assigned yet. Please contact Administrator.\n                </div>\n              )}\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </React.Fragment>\n  );\n};\n\nexport default FileUpload;\n"],"sourceRoot":""}