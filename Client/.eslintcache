[{"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/index.js":"1","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/reportWebVitals.js":"2","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/App.js":"3","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/contexts/ConfigContext.js":"4","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/services/index.js":"5","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/store/index.js":"6","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/routes.js":"7","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/store/actions.js":"8","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/config/constant.js":"9","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/services/chat.js":"10","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/store/reducers.js":"11","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/enums/UserRoles.js":"12","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/components/Auth/GuestGuard.js":"13","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/components/Auth/AuthGuard.js":"14","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/vatreports/checker.js":"15","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/errors/under-construction/construction.js":"16","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/vatreports/client.js":"17","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/vatreports/admin.js":"18","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/errors/404/NotFound404.js":"19","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/vatreports/validator.js":"20","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/usermanagement/clients/Profile.js":"21","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/signin/employee/SignIn.js":"22","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/usermanagement/clients/index.js":"23","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/utils/services.js":"24","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/components/Spinner/index.js":"25","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/forgotpassword/index.js":"26","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/home/index.js":"27","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/profile/index.js":"28","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/usermanagement/checkers/index.js":"29","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/errors/access-denied/index.js":"30","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/fileupload/index.js":"31","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/changepassword/index.js":"32","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/usermanagement/admin/index.js":"33","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/usermanagement/validators/index.js":"34","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/usermanagement/suppliers/index.js":"35","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/layouts/AdminLayout/index.js":"36","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/dashboard/client/index.js":"37","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/layouts/BoxLayout/index.js":"38","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/dashboard/checker/index.js":"39","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/dashboard/validator/index.js":"40","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/client/rejected-entries/index.js":"41","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/client/recent-entries/index.js":"42","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/client/approved-entries/index.js":"43","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/client/pending-entries/index.js":"44","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/client/summary/index.js":"45","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/clientList/index.js":"46","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/dashboard/admin/index.js":"47","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/checked-entries/index.js":"48","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/rejected-entries/index.js":"49","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/clients-no-entry/index.js":"50","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/pending-entries/index.js":"51","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/checked-entries/index.js":"52","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/checkerList/index.js":"53","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/validator-pending-entries/index.js":"54","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/approved-entries/index.js":"55","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/checker-pending-entries/index.js":"56","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/rejected-entries/index.js":"57","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/approved-entries/index.js":"58","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/validator-checked-entries/index.js":"59","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/pending-entries/index.js":"60","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/reports/purchase/index.js":"61","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/message-list/index.js":"62","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/checker-rejected-entries/index.js":"63","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/reports/expenditure/index.js":"64","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/reports/sales/index.js":"65","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/services/apiService.js":"66","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/services/toasterService.js":"67","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/enums/vatOptions.js":"68","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/usermanagement/clients/PlanHistory.js":"69","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/config/apiConstants.js":"70","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/usermanagement/clients/AddPlan.js":"71","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/usermanagement/clients/form.js":"72","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/utils/axios.js":"73","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/usermanagement/suppliers/form.js":"74","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/clients-no-entry/widget.js":"75","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/components/CustomFilters/DropdownFilter.js":"76","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/enums/entryStatus.js":"77","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/enums/entryTypeList.js":"78","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/enums/entryTypes.js":"79","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/dashboard/checker/charts/BarChart.js":"80","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/dashboard/checker/charts/ClusteredChart.js":"81","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/hooks/useWindowSize.js":"82","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/checker-rejected-entries/forms/expenditureForm.js":"83","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/checker-rejected-entries/forms/salesForm.js":"84","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/checker-rejected-entries/forms/purchaseForm.js":"85","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/enums/paymentTypes.js":"86","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/components/Report/index.js":"87","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/pending-entries/forms/purchaseForm.js":"88","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/clients-no-entry/forms/expenditureForm.js":"89","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/clients-no-entry/forms/purchaseForm.js":"90","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/components/Invoice/index.js":"91","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/clients-no-entry/forms/salesForm.js":"92","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/components/Preview/index.js":"93","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/pending-entries/forms/form.js":"94","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/components/FileIcon/index.js":"95","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/pending-entries/forms/salesForm.js":"96","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/pending-entries/forms/expenditureForm.js":"97","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/validator-checked-entries/forms/purchaseForm.js":"98","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/validator-checked-entries/forms/expenditureForm.js":"99","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/validator-checked-entries/forms/salesForm.js":"100","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/checkerList/form.js":"101","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/enums/clientStatus.js":"102","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/approved-entries/forms/expenditureForm.js":"103","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/checker-pending-entries/forms/salesForm.js":"104","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/checker-pending-entries/forms/expenditureForm.js":"105","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/approved-entries/forms/salesForm.js":"106","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/checker-pending-entries/forms/purchaseForm.js":"107","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/approved-entries/forms/purchaseForm.js":"108","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/validator-pending-entries/forms/salesForm.js":"109","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/validator-pending-entries/forms/expenditureForm.js":"110","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/approved-entries/forms/purchaseForm.js":"111","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/approved-entries/forms/salesForm.js":"112","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/approved-entries/forms/expenditureForm.js":"113","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/validator-pending-entries/forms/purchaseForm.js":"114","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/checked-entries/forms/purchaseForm.js":"115","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/checked-entries/forms/salesForm.js":"116","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/checked-entries/forms/expenditureForm.js":"117","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/pending-entries/forms/expenditureForm.js":"118","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/pending-entries/forms/purchaseForm.js":"119","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/pending-entries/forms/salesForm.js":"120","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/rejected-entries/forms/purchaseForm.js":"121","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/rejected-entries/forms/expenditureForm.js":"122","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/rejected-entries/forms/salesForm.js":"123","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/checked-entries/forms/purchaseForm.js":"124","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/checked-entries/forms/expenditureForm.js":"125","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/checked-entries/forms/salesForm.js":"126","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/validator-checked-entries/widget.js":"127","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/validator-pending-entries/widget.js":"128","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/checker-pending-entries/widget.js":"129","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/clientList/form.js":"130","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/dashboard/admin/charts/ClusteredChart.js":"131","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/dashboard/admin/charts/BarChart.js":"132","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/dashboard/validator/charts/ClusteredChart.js":"133","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/other-widgets/portal-subscription/index.js":"134","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/other-widgets/trade-license/index.js":"135","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/other-widgets/vat-submission-due-date/index.js":"136","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/dashboard/validator/charts/BarChart.js":"137","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/approved-entries/widget.js":"138","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/rejected-entries/widget.js":"139","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/pending-entries/widget.js":"140","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/approved-entries/widget.js":"141","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/pending-entries/widget.js":"142","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/checked-entries/widget.js":"143","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/checked-entries/widget.js":"144","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/client/summary/widget.js":"145","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/client/recent-entries/widget.js":"146","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/client/pending-entries/widget.js":"147","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/hooks/useOutsideClick.js":"148","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/layouts/AdminLayout/BottomNav.js":"149","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/enums/employeeStatus.js":"150","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/usermanagement/validators/form.js":"151","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/dashboard/client/charts/BarChart.js":"152","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/usermanagement/admin/form.js":"153","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/usermanagement/checkers/form.js":"154","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/profile/PlanHistory.js":"155","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/profile/forms/checkerForm.js":"156","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/profile/forms/validatorForm.js":"157","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/profile/forms/clientForm.js":"158","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/profile/forms/adminForm.js":"159","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/signup/SignUp.js":"160","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/signin/client/SignIn.js":"161","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/rejected-entries/forms/salesForm.js":"162","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/rejected-entries/forms/expenditureForm.js":"163","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/rejected-entries/forms/purchaseForm.js":"164","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/layouts/AdminLayout/Breadcrumb/index.js":"165","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/layouts/AdminLayout/Navigation/index.js":"166","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/layouts/AdminLayout/NavBar/index.js":"167","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/menu-items.js":"168","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/layouts/AdminLayout/Navigation/NavLogo/index.js":"169","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/layouts/AdminLayout/Navigation/NavContent/index.js":"170","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/layouts/AdminLayout/NavBar/NavRight/index.js":"171","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/layouts/AdminLayout/Navigation/NavContent/NavGroup/index.js":"172","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/layouts/AdminLayout/NavBar/NavRight/ChatList/index.js":"173","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/layouts/AdminLayout/Navigation/NavContent/NavCollapse/index.js":"174","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/layouts/AdminLayout/Navigation/NavContent/NavItem/index.js":"175","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/layouts/AdminLayout/NavBar/NavRight/ChatList/Friends/index.js":"176","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/layouts/AdminLayout/NavBar/NavRight/ChatList/Friends/Friend/index.js":"177","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/layouts/AdminLayout/Navigation/NavContent/NavIcon/index.js":"178","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/layouts/AdminLayout/Navigation/NavContent/NavBadge/index.js":"179","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/layouts/AdminLayout/NavBar/NavRight/ChatList/Friends/Chat/index.js":"180","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/layouts/AdminLayout/NavBar/NavRight/ChatList/Friends/Chat/Messages/index.js":"181","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/client/top-suppliers/widget.js":"182","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/usermanagement/payments/index.js":"183"},{"size":555,"mtime":1645781094000,"results":"184","hashOfConfig":"185"},{"size":362,"mtime":1645781094000,"results":"186","hashOfConfig":"185"},{"size":353,"mtime":1645781094000,"results":"187","hashOfConfig":"185"},{"size":8582,"mtime":1645781094000,"results":"188","hashOfConfig":"185"},{"size":17,"mtime":1645781094000,"results":"189","hashOfConfig":"185"},{"size":392,"mtime":1645781094000,"results":"190","hashOfConfig":"185"},{"size":10790,"mtime":1656139607462,"results":"191","hashOfConfig":"185"},{"size":1378,"mtime":1645781094000,"results":"192","hashOfConfig":"185"},{"size":2061,"mtime":1659610020163,"results":"193","hashOfConfig":"185"},{"size":19752,"mtime":1645781094000,"results":"194","hashOfConfig":"185"},{"size":192,"mtime":1645781094000,"results":"195","hashOfConfig":"185"},{"size":366,"mtime":1645781094000,"results":"196","hashOfConfig":"185"},{"size":152,"mtime":1645781094000,"results":"197","hashOfConfig":"185"},{"size":712,"mtime":1659081561765,"results":"198","hashOfConfig":"185"},{"size":10510,"mtime":1654152318000,"results":"199","hashOfConfig":"185"},{"size":698,"mtime":1645781094000,"results":"200","hashOfConfig":"185"},{"size":5871,"mtime":1655950338165,"results":"201","hashOfConfig":"185"},{"size":9075,"mtime":1659521022270,"results":"202","hashOfConfig":"185"},{"size":845,"mtime":1645781094000,"results":"203","hashOfConfig":"185"},{"size":8963,"mtime":1659521022270,"results":"204","hashOfConfig":"185"},{"size":28553,"mtime":1659081561834,"results":"205","hashOfConfig":"185"},{"size":5644,"mtime":1659081526813,"results":"206","hashOfConfig":"185"},{"size":13890,"mtime":1656548737308,"results":"207","hashOfConfig":"185"},{"size":174,"mtime":1645781094000,"results":"208","hashOfConfig":"185"},{"size":665,"mtime":1645781094000,"results":"209","hashOfConfig":"185"},{"size":2654,"mtime":1650947008000,"results":"210","hashOfConfig":"185"},{"size":8170,"mtime":1659128548187,"results":"211","hashOfConfig":"185"},{"size":20656,"mtime":1659081561744,"results":"212","hashOfConfig":"185"},{"size":13454,"mtime":1646565634000,"results":"213","hashOfConfig":"185"},{"size":798,"mtime":1645781094000,"results":"214","hashOfConfig":"185"},{"size":13550,"mtime":1659081561765,"results":"215","hashOfConfig":"185"},{"size":5767,"mtime":1645781094000,"results":"216","hashOfConfig":"185"},{"size":8135,"mtime":1651108154000,"results":"217","hashOfConfig":"185"},{"size":12192,"mtime":1646567290000,"results":"218","hashOfConfig":"185"},{"size":7545,"mtime":1645781094000,"results":"219","hashOfConfig":"185"},{"size":3056,"mtime":1646575996000,"results":"220","hashOfConfig":"185"},{"size":9425,"mtime":1656741287842,"results":"221","hashOfConfig":"185"},{"size":490,"mtime":1645781094000,"results":"222","hashOfConfig":"185"},{"size":11330,"mtime":1656117668396,"results":"223","hashOfConfig":"185"},{"size":10527,"mtime":1656117682102,"results":"224","hashOfConfig":"185"},{"size":11389,"mtime":1659081561541,"results":"225","hashOfConfig":"185"},{"size":15498,"mtime":1659081561596,"results":"226","hashOfConfig":"185"},{"size":12488,"mtime":1659081561577,"results":"227","hashOfConfig":"185"},{"size":12324,"mtime":1659081561541,"results":"228","hashOfConfig":"185"},{"size":8444,"mtime":1659081561541,"results":"229","hashOfConfig":"185"},{"size":16286,"mtime":1651593458000,"results":"230","hashOfConfig":"185"},{"size":11044,"mtime":1652640928000,"results":"231","hashOfConfig":"185"},{"size":12856,"mtime":1659082494091,"results":"232","hashOfConfig":"185"},{"size":15826,"mtime":1651325424000,"results":"233","hashOfConfig":"185"},{"size":11752,"mtime":1650204574000,"results":"234","hashOfConfig":"185"},{"size":15001,"mtime":1651224848000,"results":"235","hashOfConfig":"185"},{"size":13919,"mtime":1650069650000,"results":"236","hashOfConfig":"185"},{"size":16040,"mtime":1651593448000,"results":"237","hashOfConfig":"185"},{"size":18025,"mtime":1651224764000,"results":"238","hashOfConfig":"185"},{"size":12243,"mtime":1652418748000,"results":"239","hashOfConfig":"185"},{"size":15503,"mtime":1652422314000,"results":"240","hashOfConfig":"185"},{"size":14044,"mtime":1654227944102,"results":"241","hashOfConfig":"185"},{"size":12988,"mtime":1652421414000,"results":"242","hashOfConfig":"185"},{"size":17083,"mtime":1646532238000,"results":"243","hashOfConfig":"185"},{"size":16570,"mtime":1653868352000,"results":"244","hashOfConfig":"185"},{"size":9566,"mtime":1659081561310,"results":"245","hashOfConfig":"185"},{"size":10558,"mtime":1652440708000,"results":"246","hashOfConfig":"185"},{"size":14031,"mtime":1652424738000,"results":"247","hashOfConfig":"185"},{"size":8047,"mtime":1659081561262,"results":"248","hashOfConfig":"185"},{"size":8462,"mtime":1659081561540,"results":"249","hashOfConfig":"185"},{"size":2586,"mtime":1659081561146,"results":"250","hashOfConfig":"185"},{"size":584,"mtime":1645781094000,"results":"251","hashOfConfig":"185"},{"size":1216,"mtime":1645781094000,"results":"252","hashOfConfig":"185"},{"size":6607,"mtime":1651220146000,"results":"253","hashOfConfig":"185"},{"size":6006,"mtime":1656149246736,"results":"254","hashOfConfig":"185"},{"size":13510,"mtime":1645781094000,"results":"255","hashOfConfig":"185"},{"size":22025,"mtime":1656548659630,"results":"256","hashOfConfig":"185"},{"size":256,"mtime":1645781094000,"results":"257","hashOfConfig":"185"},{"size":16462,"mtime":1645781094000,"results":"258","hashOfConfig":"185"},{"size":6193,"mtime":1650204630000,"results":"259","hashOfConfig":"185"},{"size":1121,"mtime":1645781094000,"results":"260","hashOfConfig":"185"},{"size":107,"mtime":1645781094000,"results":"261","hashOfConfig":"185"},{"size":172,"mtime":1645781094000,"results":"262","hashOfConfig":"185"},{"size":75,"mtime":1645781094000,"results":"263","hashOfConfig":"185"},{"size":2769,"mtime":1649939344000,"results":"264","hashOfConfig":"185"},{"size":2886,"mtime":1645781094000,"results":"265","hashOfConfig":"185"},{"size":609,"mtime":1645781094000,"results":"266","hashOfConfig":"185"},{"size":16605,"mtime":1645781094000,"results":"267","hashOfConfig":"185"},{"size":12132,"mtime":1645781094000,"results":"268","hashOfConfig":"185"},{"size":35620,"mtime":1645781094000,"results":"269","hashOfConfig":"185"},{"size":174,"mtime":1645781094000,"results":"270","hashOfConfig":"185"},{"size":10124,"mtime":1645781094000,"results":"271","hashOfConfig":"185"},{"size":31139,"mtime":1656736486000,"results":"272","hashOfConfig":"185"},{"size":16605,"mtime":1645781094000,"results":"273","hashOfConfig":"185"},{"size":35581,"mtime":1645781094000,"results":"274","hashOfConfig":"185"},{"size":5493,"mtime":1645781094000,"results":"275","hashOfConfig":"185"},{"size":12132,"mtime":1645781094000,"results":"276","hashOfConfig":"185"},{"size":1904,"mtime":1654233556402,"results":"277","hashOfConfig":"185"},{"size":12243,"mtime":1651590136000,"results":"278","hashOfConfig":"185"},{"size":996,"mtime":1645781094000,"results":"279","hashOfConfig":"185"},{"size":12466,"mtime":1656379081254,"results":"280","hashOfConfig":"185"},{"size":16591,"mtime":1654239935735,"results":"281","hashOfConfig":"185"},{"size":20762,"mtime":1645781094000,"results":"282","hashOfConfig":"185"},{"size":10282,"mtime":1645781094000,"results":"283","hashOfConfig":"185"},{"size":6781,"mtime":1645781094000,"results":"284","hashOfConfig":"185"},{"size":31498,"mtime":1648694496000,"results":"285","hashOfConfig":"185"},{"size":85,"mtime":1645781094000,"results":"286","hashOfConfig":"185"},{"size":7412,"mtime":1652421316000,"results":"287","hashOfConfig":"185"},{"size":12151,"mtime":1654240073408,"results":"288","hashOfConfig":"185"},{"size":16622,"mtime":1654240080866,"results":"289","hashOfConfig":"185"},{"size":4782,"mtime":1652419048000,"results":"290","hashOfConfig":"185"},{"size":23723,"mtime":1654328930121,"results":"291","hashOfConfig":"185"},{"size":14290,"mtime":1652418872000,"results":"292","hashOfConfig":"185"},{"size":11553,"mtime":1645781094000,"results":"293","hashOfConfig":"185"},{"size":15054,"mtime":1645781094000,"results":"294","hashOfConfig":"185"},{"size":14290,"mtime":1652421454000,"results":"295","hashOfConfig":"185"},{"size":4743,"mtime":1652421472000,"results":"296","hashOfConfig":"185"},{"size":7827,"mtime":1652419190000,"results":"297","hashOfConfig":"185"},{"size":25539,"mtime":1645781094000,"results":"298","hashOfConfig":"185"},{"size":20762,"mtime":1645781094000,"results":"299","hashOfConfig":"185"},{"size":6781,"mtime":1645781094000,"results":"300","hashOfConfig":"185"},{"size":10282,"mtime":1645781094000,"results":"301","hashOfConfig":"185"},{"size":15592,"mtime":1659082955547,"results":"302","hashOfConfig":"185"},{"size":25932,"mtime":1656736264162,"results":"303","hashOfConfig":"185"},{"size":8349,"mtime":1650540464000,"results":"304","hashOfConfig":"185"},{"size":35581,"mtime":1645781094000,"results":"305","hashOfConfig":"185"},{"size":16605,"mtime":1645781094000,"results":"306","hashOfConfig":"185"},{"size":12132,"mtime":1645781094000,"results":"307","hashOfConfig":"185"},{"size":20762,"mtime":1645781094000,"results":"308","hashOfConfig":"185"},{"size":11430,"mtime":1659082446993,"results":"309","hashOfConfig":"185"},{"size":6781,"mtime":1645781094000,"results":"310","hashOfConfig":"185"},{"size":9587,"mtime":1646532298000,"results":"311","hashOfConfig":"185"},{"size":10421,"mtime":1651224780000,"results":"312","hashOfConfig":"185"},{"size":9924,"mtime":1651067930000,"results":"313","hashOfConfig":"185"},{"size":31498,"mtime":1648956598000,"results":"314","hashOfConfig":"185"},{"size":2886,"mtime":1645781094000,"results":"315","hashOfConfig":"185"},{"size":2769,"mtime":1645781094000,"results":"316","hashOfConfig":"185"},{"size":2885,"mtime":1645781094000,"results":"317","hashOfConfig":"185"},{"size":4047,"mtime":1652932002000,"results":"318","hashOfConfig":"185"},{"size":3788,"mtime":1652664900000,"results":"319","hashOfConfig":"185"},{"size":4186,"mtime":1652932384000,"results":"320","hashOfConfig":"185"},{"size":2769,"mtime":1649939314000,"results":"321","hashOfConfig":"185"},{"size":7763,"mtime":1650069766000,"results":"322","hashOfConfig":"185"},{"size":7871,"mtime":1650070058000,"results":"323","hashOfConfig":"324"},{"size":10398,"mtime":1651224860000,"results":"325","hashOfConfig":"185"},{"size":8381,"mtime":1649937958000,"results":"326","hashOfConfig":"185"},{"size":11493,"mtime":1651325230000,"results":"327","hashOfConfig":"185"},{"size":7868,"mtime":1650069724000,"results":"328","hashOfConfig":"185"},{"size":8378,"mtime":1646568540000,"results":"329","hashOfConfig":"185"},{"size":4364,"mtime":1649646258000,"results":"330","hashOfConfig":"185"},{"size":13700,"mtime":1646654164000,"results":"331","hashOfConfig":"185"},{"size":6558,"mtime":1656036047492,"results":"332","hashOfConfig":"185"},{"size":399,"mtime":1645781094000,"results":"333","hashOfConfig":"185"},{"size":2037,"mtime":1646493676000,"results":"334","hashOfConfig":"185"},{"size":79,"mtime":1645781094000,"results":"335","hashOfConfig":"185"},{"size":17039,"mtime":1645781094000,"results":"336","hashOfConfig":"185"},{"size":2805,"mtime":1645781094000,"results":"337","hashOfConfig":"185"},{"size":16934,"mtime":1645781094000,"results":"338","hashOfConfig":"185"},{"size":19213,"mtime":1645781094000,"results":"339","hashOfConfig":"185"},{"size":6632,"mtime":1645781094000,"results":"340","hashOfConfig":"185"},{"size":16296,"mtime":1645781094000,"results":"341","hashOfConfig":"185"},{"size":16324,"mtime":1645781094000,"results":"342","hashOfConfig":"185"},{"size":32704,"mtime":1645949270000,"results":"343","hashOfConfig":"185"},{"size":16237,"mtime":1645781094000,"results":"344","hashOfConfig":"185"},{"size":39700,"mtime":1645781094000,"results":"345","hashOfConfig":"185"},{"size":6622,"mtime":1659081574430,"results":"346","hashOfConfig":"185"},{"size":11553,"mtime":1645781094000,"results":"347","hashOfConfig":"324"},{"size":15054,"mtime":1645781094000,"results":"348","hashOfConfig":"324"},{"size":25531,"mtime":1645781094000,"results":"349","hashOfConfig":"324"},{"size":3042,"mtime":1645781094000,"results":"350","hashOfConfig":"185"},{"size":3392,"mtime":1651057690000,"results":"351","hashOfConfig":"185"},{"size":1990,"mtime":1651064306000,"results":"352","hashOfConfig":"185"},{"size":9430,"mtime":1656139580175,"results":"353","hashOfConfig":"185"},{"size":2170,"mtime":1659081561765,"results":"354","hashOfConfig":"185"},{"size":3992,"mtime":1659081561765,"results":"355","hashOfConfig":"185"},{"size":5954,"mtime":1659081561850,"results":"356","hashOfConfig":"185"},{"size":995,"mtime":1645781094000,"results":"357","hashOfConfig":"185"},{"size":1908,"mtime":1645781094000,"results":"358","hashOfConfig":"185"},{"size":3798,"mtime":1645781094000,"results":"359","hashOfConfig":"185"},{"size":2096,"mtime":1645949270000,"results":"360","hashOfConfig":"185"},{"size":2663,"mtime":1645781094000,"results":"361","hashOfConfig":"185"},{"size":1470,"mtime":1645781094000,"results":"362","hashOfConfig":"185"},{"size":325,"mtime":1645781094000,"results":"363","hashOfConfig":"185"},{"size":457,"mtime":1645781094000,"results":"364","hashOfConfig":"185"},{"size":6253,"mtime":1645781094000,"results":"365","hashOfConfig":"185"},{"size":1079,"mtime":1645781094000,"results":"366","hashOfConfig":"185"},{"size":3257,"mtime":1656638531593,"results":"367","hashOfConfig":"368"},{"size":14943,"mtime":1659081561765,"results":"369","hashOfConfig":"185"},{"filePath":"370","messages":"371","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},"1djnaxu",{"filePath":"373","messages":"374","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"375","messages":"376","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"377","messages":"378","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"379","messages":"380","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"381","messages":"382","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"383","messages":"384","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"385","messages":"386","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"387","messages":"388","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"389","messages":"390","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"391","messages":"392","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"393","messages":"394","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"395","messages":"396","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"397","messages":"398","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"399","messages":"400","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"401","usedDeprecatedRules":"372"},{"filePath":"402","messages":"403","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"404","usedDeprecatedRules":"372"},{"filePath":"405","messages":"406","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"407","usedDeprecatedRules":"372"},{"filePath":"408","messages":"409","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"410","usedDeprecatedRules":"372"},{"filePath":"411","messages":"412","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"413","usedDeprecatedRules":"372"},{"filePath":"414","messages":"415","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"416","usedDeprecatedRules":"372"},{"filePath":"417","messages":"418","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"419","usedDeprecatedRules":"372"},{"filePath":"420","messages":"421","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"422","usedDeprecatedRules":"372"},{"filePath":"423","messages":"424","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"425","messages":"426","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"427","messages":"428","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"429","messages":"430","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"431","usedDeprecatedRules":"372"},{"filePath":"432","messages":"433","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"434","messages":"435","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"436","messages":"437","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"438","messages":"439","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"440","messages":"441","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"442","usedDeprecatedRules":"372"},{"filePath":"443","messages":"444","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"445","messages":"446","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"447","usedDeprecatedRules":"372"},{"filePath":"448","messages":"449","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"450","messages":"451","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"452","usedDeprecatedRules":"372"},{"filePath":"453","messages":"454","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"455","messages":"456","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"457","messages":"458","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"459","messages":"460","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"461","messages":"462","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"463","messages":"464","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"465","usedDeprecatedRules":"372"},{"filePath":"466","messages":"467","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"468","messages":"469","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"470","messages":"471","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"472","usedDeprecatedRules":"372"},{"filePath":"473","messages":"474","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"475","messages":"476","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"477","usedDeprecatedRules":"372"},{"filePath":"478","messages":"479","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"480","messages":"481","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"482","messages":"483","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"484","usedDeprecatedRules":"372"},{"filePath":"485","messages":"486","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"487","usedDeprecatedRules":"372"},{"filePath":"488","messages":"489","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"490","usedDeprecatedRules":"372"},{"filePath":"491","messages":"492","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"493","usedDeprecatedRules":"372"},{"filePath":"494","messages":"495","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"496","usedDeprecatedRules":"372"},{"filePath":"497","messages":"498","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"499","usedDeprecatedRules":"372"},{"filePath":"500","messages":"501","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"502","messages":"503","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"504","messages":"505","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"506","messages":"507","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"508","usedDeprecatedRules":"372"},{"filePath":"509","messages":"510","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"511","messages":"512","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"513","usedDeprecatedRules":"372"},{"filePath":"514","messages":"515","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"516","usedDeprecatedRules":"372"},{"filePath":"517","messages":"518","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"519","usedDeprecatedRules":"372"},{"filePath":"520","messages":"521","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"522","usedDeprecatedRules":"372"},{"filePath":"523","messages":"524","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"525","usedDeprecatedRules":"372"},{"filePath":"526","messages":"527","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"528","usedDeprecatedRules":"372"},{"filePath":"529","messages":"530","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"531","messages":"532","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"533","messages":"534","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"535","messages":"536","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"537","usedDeprecatedRules":"372"},{"filePath":"538","messages":"539","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"540","messages":"541","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"542","messages":"543","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"544","usedDeprecatedRules":"372"},{"filePath":"545","messages":"546","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"547","messages":"548","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"549","usedDeprecatedRules":"372"},{"filePath":"550","messages":"551","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"552","usedDeprecatedRules":"372"},{"filePath":"553","messages":"554","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"555","messages":"556","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"557","messages":"558","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"559","messages":"560","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"561","messages":"562","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"563","messages":"564","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"565","usedDeprecatedRules":"372"},{"filePath":"566","messages":"567","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"568","messages":"569","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"570","usedDeprecatedRules":"372"},{"filePath":"571","messages":"572","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"573","usedDeprecatedRules":"372"},{"filePath":"574","messages":"575","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"576","usedDeprecatedRules":"372"},{"filePath":"577","messages":"578","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"579","messages":"580","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"581","messages":"582","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"583","usedDeprecatedRules":"372"},{"filePath":"584","messages":"585","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"570","usedDeprecatedRules":"372"},{"filePath":"586","messages":"587","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"588","usedDeprecatedRules":"372"},{"filePath":"589","messages":"590","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"591","messages":"592","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"573","usedDeprecatedRules":"372"},{"filePath":"593","messages":"594","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"595","usedDeprecatedRules":"372"},{"filePath":"596","messages":"597","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"598","usedDeprecatedRules":"372"},{"filePath":"599","messages":"600","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"601","messages":"602","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"603","usedDeprecatedRules":"372"},{"filePath":"604","messages":"605","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"606","usedDeprecatedRules":"372"},{"filePath":"607","messages":"608","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"609","usedDeprecatedRules":"372"},{"filePath":"610","messages":"611","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"612","usedDeprecatedRules":"372"},{"filePath":"613","messages":"614","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"615","usedDeprecatedRules":"372"},{"filePath":"616","messages":"617","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"618","usedDeprecatedRules":"372"},{"filePath":"619","messages":"620","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"621","messages":"622","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"623","usedDeprecatedRules":"372"},{"filePath":"624","messages":"625","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"626","usedDeprecatedRules":"372"},{"filePath":"627","messages":"628","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"629","usedDeprecatedRules":"372"},{"filePath":"630","messages":"631","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"632","usedDeprecatedRules":"372"},{"filePath":"633","messages":"634","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"635","usedDeprecatedRules":"372"},{"filePath":"636","messages":"637","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"638","usedDeprecatedRules":"372"},{"filePath":"639","messages":"640","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"641","usedDeprecatedRules":"372"},{"filePath":"642","messages":"643","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"644","usedDeprecatedRules":"372"},{"filePath":"645","messages":"646","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"647","usedDeprecatedRules":"372"},{"filePath":"648","messages":"649","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"650","usedDeprecatedRules":"372"},{"filePath":"651","messages":"652","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"653","usedDeprecatedRules":"372"},{"filePath":"654","messages":"655","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"656","usedDeprecatedRules":"372"},{"filePath":"657","messages":"658","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"609","usedDeprecatedRules":"372"},{"filePath":"659","messages":"660","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"615","usedDeprecatedRules":"372"},{"filePath":"661","messages":"662","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"612","usedDeprecatedRules":"372"},{"filePath":"663","messages":"664","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"665","usedDeprecatedRules":"372"},{"filePath":"666","messages":"667","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"668","usedDeprecatedRules":"372"},{"filePath":"669","messages":"670","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"671","usedDeprecatedRules":"372"},{"filePath":"672","messages":"673","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"588","usedDeprecatedRules":"372"},{"filePath":"674","messages":"675","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"570","usedDeprecatedRules":"372"},{"filePath":"676","messages":"677","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"573","usedDeprecatedRules":"372"},{"filePath":"678","messages":"679","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"680","usedDeprecatedRules":"372"},{"filePath":"681","messages":"682","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"683","usedDeprecatedRules":"372"},{"filePath":"684","messages":"685","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"686","usedDeprecatedRules":"372"},{"filePath":"687","messages":"688","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"689","messages":"690","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"691","usedDeprecatedRules":"372"},{"filePath":"692","messages":"693","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"694","usedDeprecatedRules":"372"},{"filePath":"695","messages":"696","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"618","usedDeprecatedRules":"372"},{"filePath":"697","messages":"698","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"565","usedDeprecatedRules":"372"},{"filePath":"699","messages":"700","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"701","messages":"702","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"703","usedDeprecatedRules":"372"},{"filePath":"704","messages":"705","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"706","usedDeprecatedRules":"372"},{"filePath":"707","messages":"708","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"709","usedDeprecatedRules":"372"},{"filePath":"710","messages":"711","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"712","usedDeprecatedRules":"372"},{"filePath":"713","messages":"714","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"715","messages":"716","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"717","messages":"718","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"719"},"18l7v1b",{"filePath":"720","messages":"721","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"722","usedDeprecatedRules":"372"},{"filePath":"723","messages":"724","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"725","messages":"726","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"727","usedDeprecatedRules":"372"},{"filePath":"728","messages":"729","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"730","messages":"731","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"732","messages":"733","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"734","messages":"735","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"736","messages":"737","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"738","messages":"739","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"740","messages":"741","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"742","messages":"743","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"744","messages":"745","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"746","usedDeprecatedRules":"372"},{"filePath":"747","messages":"748","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"749","messages":"750","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"751","usedDeprecatedRules":"372"},{"filePath":"752","messages":"753","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"754","usedDeprecatedRules":"372"},{"filePath":"755","messages":"756","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"757","usedDeprecatedRules":"372"},{"filePath":"758","messages":"759","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"760","usedDeprecatedRules":"372"},{"filePath":"761","messages":"762","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"763","usedDeprecatedRules":"372"},{"filePath":"764","messages":"765","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"766","usedDeprecatedRules":"372"},{"filePath":"767","messages":"768","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"769","usedDeprecatedRules":"372"},{"filePath":"770","messages":"771","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"772","usedDeprecatedRules":"372"},{"filePath":"773","messages":"774","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"775","messages":"776","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"641","usedDeprecatedRules":"719"},{"filePath":"777","messages":"778","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"644","usedDeprecatedRules":"719"},{"filePath":"779","messages":"780","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"781","usedDeprecatedRules":"719"},{"filePath":"782","messages":"783","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"784","messages":"785","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"786","usedDeprecatedRules":"372"},{"filePath":"787","messages":"788","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"789","messages":"790","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"791","messages":"792","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"793","usedDeprecatedRules":"372"},{"filePath":"794","messages":"795","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"796","messages":"797","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"798","usedDeprecatedRules":"372"},{"filePath":"799","messages":"800","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"801","messages":"802","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"803","messages":"804","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"805","usedDeprecatedRules":"372"},{"filePath":"806","messages":"807","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"808","usedDeprecatedRules":"372"},{"filePath":"809","messages":"810","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"811","usedDeprecatedRules":"372"},{"filePath":"812","messages":"813","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"814","messages":"815","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"816","messages":"817","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},{"filePath":"818","messages":"819","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"820","usedDeprecatedRules":"372"},{"filePath":"821","messages":"822","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"823","usedDeprecatedRules":"372"},{"filePath":"824","messages":"825","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zq2gai",{"filePath":"826","messages":"827","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"372"},"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/index.js",[],["828","829"],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/reportWebVitals.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/App.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/contexts/ConfigContext.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/services/index.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/store/index.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/routes.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/store/actions.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/config/constant.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/services/chat.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/store/reducers.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/enums/UserRoles.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/components/Auth/GuestGuard.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/components/Auth/AuthGuard.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/vatreports/checker.js",["830"],"import React, { useState, useEffect } from \"react\";\nimport { Row, Col, Card, Button, Modal } from \"react-bootstrap\";\nimport moment from \"moment\";\nimport Select from \"react-select\";\nimport { PDFExport } from \"@progress/kendo-react-pdf\";\n\n\nimport { callApi } from \"../../services/apiService\";\nimport { showNotification } from \"../../services/toasterService\";\nimport { ApiConstants } from \"../../config/apiConstants\";\nimport Spinner from \"../../components/Spinner\";\nimport Report from \"../../components/Report\";\n\nimport pdfIcon from \"../../assets/images/icons/pdf.png\";\n// import Preview from \"../../components/Preview\";\n\nconst VatReport = (props) => {\n  const [showLoader, setShowLoader] = useState(false);\n  const [periodsList, setperiodsList] = useState([]);\n  const [filteredPeriodsList, setFilteredPeriodsList] = useState([]);\n  const [selectedPeriod, setselectedPeriod] = useState(null);\n  const [selectedReport, setselectedReport] = useState(null);\n  const [isSearchClicked, setisSearchClicked] = useState(false);\n  const [reportsData, setreportsData] = useState(null);\n  const [clientsList, setclientsList] = useState([]);\n  const [selectedClient, setselectedClient] = useState(null);\n  const [showPreview, setshowPreview] = useState(false);\n\n  const pdfExportComponent = React.useRef(null);\n\n  useEffect(() => {\n    getClients();\n  }, []);\n\n  useEffect(() => {\n    if (selectedPeriod) onSearchFilter();\n  }, [selectedPeriod]);\n\n  const onSearchFilter = () => {\n    if (selectedPeriod) {\n      setisSearchClicked(true);\n      let filteredList = periodsList.filter((i) => i.id === selectedPeriod.id);\n      setFilteredPeriodsList(filteredList);\n    }\n  };\n\n  const clearFilter = () => {\n    setFilteredPeriodsList(periodsList);\n    setselectedPeriod(null);\n    setisSearchClicked(false);\n  };\n\n  const getClients = () => {\n    setShowLoader(true);\n    callApi(\"get\", ApiConstants.checker.clientshortlistbychecker, {}, true)\n      .then((response) => {\n        setShowLoader(false);\n        if (response && response.status_code === 200) {\n          let clients = response.payload.map((i) => {\n            return {\n              ...i,\n              value: i.id,\n              label: i.name,\n            };\n          });\n          setclientsList(clients);\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        setShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const getPeriods = (userId) => {\n    setperiodsList([]);\n    setFilteredPeriodsList([]);\n    setShowLoader(true);\n    callApi(\n      \"get\",\n      ApiConstants.vatreports.vatreportperiodsforothers,\n      { user_id: userId },\n      true\n    )\n      .then((response) => {\n        setShowLoader(false);\n        if (response && response.status_code === 200) {\n          let periods = response.payload.map((i, index) => {\n            return {\n              ...i,\n              id: index,\n              value:\n                moment(i.start_date).format(\"DD MMM YYYY\") +\n                \" - \" +\n                moment(i.end_date).format(\"DD MMM YYYY\"),\n              label:\n                moment(i.start_date).format(\"DD MMM YYYY\") +\n                \" - \" +\n                moment(i.end_date).format(\"DD MMM YYYY\"),\n            };\n          });\n          setperiodsList(periods);\n          setFilteredPeriodsList(periods);\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        setShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const onSelectClient = (value) => {\n    setselectedClient(value);\n    getPeriods(value.id);\n  };\n\n  const getReportName = (item) => {\n    return (\n      \"VAT_\" +\n      item.company_name +\n      \"_\" +\n      moment(item.start_date).format(\"MMMYYYY\")\n    );\n  };\n\n  const downloadReport = (report) => {\n    setShowLoader(true);\n    setselectedReport(report);\n    let params = {\n      user_id: selectedClient.id,\n      start_date: report.start_date,\n      end_date: report.end_date,\n    };\n    callApi(\"post\", ApiConstants.vatreports.vatreportforothers, params, true)\n      .then((response) => {\n        if (response && response.status_code === 200) {\n          setreportsData(response.payload);\n          console.log(response.payload);\n          setTimeout(() => {\n            if (pdfExportComponent.current) {\n              pdfExportComponent.current.save();\n            }\n            setShowLoader(false);\n          }, 500);\n        } else {\n          setShowLoader(false);\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        setShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n  const closeEntryModal = () => {\n\t\tsetshowPreview(false);\n\t};\nconst viewEntry = (report) => {\n    setShowLoader(true);\n    setselectedReport(report);\n    let params = {\n      user_id: selectedClient.id,\n      start_date: report.start_date,\n      end_date: report.end_date,\n    };\n    callApi(\"post\", ApiConstants.vatreports.vatreportforothers, params, true)\n    .then((response) => {\n        console.log(response.payload)\n        if (response && response.status_code === 200) {\n          setreportsData(response.payload);\n          setshowPreview(true);\n          setShowLoader(false);\n        } else {\n          setShowLoader(false);\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        setShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n\t};\n\tconst onEntrySubmit = (status) => {\n    let params = {...reportsData,status,name:`VAT_${reportsData.name}_${moment(reportsData.start_date).format(\"MMMYYYY\")}`};\n    callApi(\"post\", ApiConstants.vatreports.createvatreport, params, true)\n    .then((response) => {\n        if (response && response.status_code === 201) {\n          setshowPreview(false);\n          setShowLoader(false);\n        } else {\n          setShowLoader(false);\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        setShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n\n\t\tcloseEntryModal();\n\t};\n  return (\n    <React.Fragment>\n      {showLoader && <Spinner />}\n      <Row className=\"vat-reports\">\n        <Col xl={12}>\n          <Card className=\"rounded\">\n            <Card.Body className=\"p-4\">\n              <Row className=\"mb-3\">\n                <Col xs={12} md={5} xl={3}>\n                  <div className=\"input-group mb-3\">\n                    <Select\n                      className=\"w-100 form-control-select\"\n                      classNamePrefix=\"select\"\n                      options={clientsList}\n                      value={selectedClient}\n                      placeholder=\"Clients\"\n                      onChange={(value) => {\n                        onSelectClient(value);\n                      }}\n                    />\n                  </div>\n                </Col>\n                <Col xs={12} md={5} xl={3}>\n                  <div className=\"input-group mb-3\">\n                    <Select\n                      className=\"w-100 form-control-select\"\n                      classNamePrefix=\"select\"\n                      options={periodsList}\n                      value={selectedPeriod}\n                      placeholder=\"VAT Periods\"\n                      isSearchable={false}\n                      onChange={(value) => {\n                        setselectedPeriod(value);\n                      }}\n                    />\n                  </div>\n                </Col>\n                <Col xs={1} md={1} xl={1} className=\"pl-0\">\n                  {isSearchClicked && (\n                    <span className=\"clear-search\" onClick={clearFilter}>\n                      <i className=\"feather icon-x\"></i>\n                    </span>\n                  )}\n                </Col>\n              </Row>\n              <Row className=\"mt-4\">\n                {filteredPeriodsList.map((item, key) => (\n                  <Col xs={12} lg={3} key={key}>\n                    <Card className=\"rounded\">\n                      <Card.Body className=\"px-4 pt-4 pb-0\">\n                        <div className=\"report-tile\">\n                          <img src={pdfIcon} alt=\"PDF\" width=\"50\" />\n                          <div className=\"report-name mt-3\">\n                            {getReportName(item)}\n                          </div>\n                        </div>\n                        <div\n                          className=\"report-download\"\n                          onClick={() => downloadReport(item)}>\n                          <i className=\"feather icon-download\" />\n                        </div>\n                      </Card.Body>\n                      <div className=\"report-tile mb-4\">\n                        <Button variant=\"primary\" className=\"m-0\" onClick={e=>viewEntry(item)}>Request for Approval</Button>\n                      </div>\n                    </Card>\n                  </Col>\n                ))}\n              </Row>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n      {reportsData && (\n        <div\n          style={{\n            position: \"absolute\",\n            left: \"-10000px\",\n            top: 0,\n          }}>\n          <PDFExport\n            ref={pdfExportComponent}\n            paperSize=\"A4\"\n            margin={30}\n            fileName={getReportName(selectedReport)}\n            author=\"VatzApp\">\n            <Report data={reportsData} />\n          </PDFExport>\n        </div>\n      )}\n      <Modal size=\"xl\" show={showPreview} backdrop=\"static\" keyboard={true}>\n\t\t\t\t<Modal.Body className=\"p-0\">\n\t\t\t\t\t<button\n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\tclassName=\"btn-icon btn close-btn\"\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tcloseEntryModal();\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\t<i className=\"feather icon-x-circle\"></i>\n\t\t\t\t\t</button>\n\t\t\t\t\t<div className=\"px-4 py-5\">\n\t\t\t\t\t\t<Row>\n               <Col className=\"col-12 my-2\">\n\t\t\t\t\t\t\t\t<Report data={reportsData} />\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t<Col className=\"col-12 my-2 d-flex justify-content-center\">\n                <Button variant=\"primary\" onClick={()=>onEntrySubmit(\"Pending\",reportsData)} >Request for Approval</Button>\n\t\t\t\t\t\t\t</Col> \n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</div>\n\t\t\t\t</Modal.Body>\n\t\t\t</Modal>\n    </React.Fragment>\n  );\n};\n\nexport default VatReport;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/errors/under-construction/construction.js",["831","832","833"],"import React from \"react\";\nimport { Button, Col, Container, Form, Row } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\nimport ConstructionImg from \"../../../assets/images/under-construction.png\";\n\nconst Construction = () => {\n  return (\n    <React.Fragment>\n      <div className=\" maintenance\">\n        <Container>\n          <Row className=\"justify-content-center\">\n            <Col md={8} className=\"text-center px-4\">\n              <div className=\"mt-5\">\n                <img src={ConstructionImg} alt=\"Under Construction\" />\n              </div>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default Construction;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/vatreports/client.js",["834"],"import React, {useState, useEffect} from \"react\";\nimport {Row, Col, Card} from \"react-bootstrap\";\nimport moment from \"moment\";\nimport Select from \"react-select\";\nimport {PDFExport} from \"@progress/kendo-react-pdf\";\n\nimport {callApi} from \"../../services/apiService\";\nimport {showNotification} from \"../../services/toasterService\";\nimport {ApiConstants} from \"../../config/apiConstants\";\nimport Spinner from \"../../components/Spinner\";\nimport Report from \"../../components/Report\";\n\nimport pdfIcon from \"../../assets/images/icons/pdf.png\";\n\nconst VatReport = (props) => {\n\tconst [showLoader, setShowLoader] = useState(false);\n\tconst [periodsList, setperiodsList] = useState([]);\n\tconst [filteredPeriodsList, setFilteredPeriodsList] = useState([]);\n\tconst [selectedPeriod, setselectedPeriod] = useState(null);\n\tconst [selectedReport, setselectedReport] = useState(null);\n\tconst [isSearchClicked, setisSearchClicked] = useState(false);\n\tconst [reportsData, setreportsData] = useState(null);\n\tconst [clientId,setClientId] = useState(\"\")\n\tconst pdfExportComponent = React.useRef(null);\n\n\tuseEffect(() => {\n\t\t// getPeriods();\n\t\tcallApi(\"get\", ApiConstants.client.getclient, {}, true)\n\t\t\t.then((response) => {\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tconsole.log(response.payload);\n\t\t\t\t\tresponse.payload.id && setClientId(response.payload.id);\n\t\t\t\t\tresponse.payload.id && getPeriods(response.payload.id);\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t}, []);\n\n\tconst onSearchFilter = () => {\n\t\tif (selectedPeriod) {\n\t\t\tsetisSearchClicked(true);\n\t\t\tlet filteredList = periodsList.filter((i) => i.id === selectedPeriod.id);\n\t\t\tsetFilteredPeriodsList(filteredList);\n\t\t}\n\t};\n\n\tconst clearFilter = () => {\n\t\tsetFilteredPeriodsList(periodsList);\n\t\tsetselectedPeriod(null);\n\t\tsetisSearchClicked(false);\n\t};\n\n\tconst getPeriods = (client_id) => {\n\t\tsetShowLoader(true);\n\t\tcallApi(\"post\", ApiConstants.vatreports.vatreportperiodsforclient, {client_id: client_id}, true)\n\t\t\t.then((response) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tlet periods = response.payload.map((i, index) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...i,\n\t\t\t\t\t\t\tid: index,\n\t\t\t\t\t\t\tvalue: moment(i.start_date).format(\"DD MMM YYYY\") + \" - \" + moment(i.end_date).format(\"DD MMM YYYY\"),\n\t\t\t\t\t\t\tlabel: moment(i.start_date).format(\"DD MMM YYYY\") + \" - \" + moment(i.end_date).format(\"DD MMM YYYY\"),\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\t\tsetperiodsList(periods);\n\t\t\t\t\tsetFilteredPeriodsList(periods);\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\t// const getReportName = (item) => {\n\t// \treturn \"VAT_\" + item.company_name + \"_\" + moment(item.start_date).format(\"MMMYYYY\");\n\t// };\n\n\tconst downloadReport = (report) => {\n\t\tsetShowLoader(true);\n\t\tsetselectedReport(report);\n\t\tlet params = {\n\t\t\tstart_date: report.start_date,\n\t\t\tend_date: report.end_date,\n\t\t};\n\t\tcallApi(\"post\", ApiConstants.vatreports.vatreportforclient, params, true)\n\t\t\t.then((response) => {\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tsetreportsData(response.payload);\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tif (pdfExportComponent.current) {\n\t\t\t\t\t\t\tpdfExportComponent.current.save();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsetShowLoader(false);\n\t\t\t\t\t}, 500);\n\t\t\t\t} else {\n\t\t\t\t\tsetShowLoader(false);\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t{showLoader && <Spinner />}\n\t\t\t<Row className=\"vat-reports\">\n\t\t\t\t<Col xl={12}>\n\t\t\t\t\t<Card className=\"rounded\">\n\t\t\t\t\t\t<Card.Body className=\"p-4\">\n\t\t\t\t\t\t\t<Row className=\"mb-3\">\n\t\t\t\t\t\t\t\t<Col xs={10} xl={3}>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"w-100 form-control-select\"\n\t\t\t\t\t\t\t\t\t\t\tclassNamePrefix=\"select\"\n\t\t\t\t\t\t\t\t\t\t\toptions={periodsList}\n\t\t\t\t\t\t\t\t\t\t\tvalue={selectedPeriod}\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"VAT Periods\"\n\t\t\t\t\t\t\t\t\t\t\tisSearchable={false}\n\t\t\t\t\t\t\t\t\t\t\tonChange={(value) => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetselectedPeriod(value);\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t\t\t\t<Col xs={1} xl={1}>\n\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn-icon btn btn-primary search-button\" onClick={onSearchFilter}>\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-search\"></i>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col xs={1} xl={1}>\n\t\t\t\t\t\t\t\t\t{isSearchClicked && (\n\t\t\t\t\t\t\t\t\t\t<span className=\"clear-search\" onClick={clearFilter}>\n\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-x\"></i>\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t<Row className=\"mt-4\">\n\t\t\t\t\t\t\t\t{filteredPeriodsList.map((item, key) => (\n\t\t\t\t\t\t\t\t\t<Col xs={12} lg={3} key={key}>\n\t\t\t\t\t\t\t\t\t\t<Card className=\"rounded\">\n\t\t\t\t\t\t\t\t\t\t\t<Card.Body className=\"p-4\">\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"report-tile\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<img src={pdfIcon} alt=\"PDF\" width=\"50\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"report-name mt-3\">{item.name}</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"report-download\" onClick={() => downloadReport(item)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-download\" />\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t</Card>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t{reportsData && (\n\t\t\t\t<div\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tposition: \"absolute\",\n\t\t\t\t\t\tleft: \"-10000px\",\n\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t}}>\n\t\t\t\t\t<PDFExport ref={pdfExportComponent} paperSize=\"A4\" margin={30} fileName={selectedReport.name} author=\"VatzApp\">\n\t\t\t\t\t\t<Report data={reportsData} />\n\t\t\t\t\t</PDFExport>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</React.Fragment>\n\t);\n};\n\nexport default VatReport;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/vatreports/admin.js",["835"],"import React, {useState, useEffect} from \"react\";\nimport {Row, Col, Card, Button, Modal} from \"react-bootstrap\";\nimport moment from \"moment\";\nimport Select from \"react-select\";\nimport {PDFExport} from \"@progress/kendo-react-pdf\";\n\nimport {callApi} from \"../../services/apiService\";\nimport {showNotification} from \"../../services/toasterService\";\nimport {ApiConstants} from \"../../config/apiConstants\";\nimport Spinner from \"../../components/Spinner\";\nimport Report from \"../../components/Report\";\n\nimport pdfIcon from \"../../assets/images/icons/pdf.png\";\n\nconst VatReport = (props) => {\n\tconst [showLoader, setShowLoader] = useState(false);\n\tconst [periodsList, setperiodsList] = useState([]);\n\tconst [filteredPeriodsList, setFilteredPeriodsList] = useState([]);\n\tconst [selectedPeriod, setselectedPeriod] = useState(null);\n\tconst [selectedReport, setselectedReport] = useState(null);\n\tconst [isSearchClicked, setisSearchClicked] = useState(false);\n\tconst [reportsData, setreportsData] = useState(null);\n\tconst [clientsList, setclientsList] = useState([]);\n\tconst [selectedClient, setselectedClient] = useState(null);\n\tconst [showPreview, setshowPreview] = useState(false);\n\n\tconst pdfExportComponent = React.useRef(null);\n\n\tuseEffect(() => {\n\t\tgetClients();\n\t}, []);\n\n\tuseEffect(() => {\n\t\tif (selectedPeriod) onSearchFilter();\n\t}, [selectedPeriod]);\n\n\tconst onSearchFilter = () => {\n\t\tif (selectedPeriod) {\n\t\t\tsetisSearchClicked(true);\n\t\t\tlet filteredList = periodsList.filter((i) => i.id === selectedPeriod.id);\n\t\t\tsetFilteredPeriodsList(filteredList);\n\t\t}\n\t};\n\tconst closeEntryModal = () => {\n\t\tsetshowPreview(false);\n\t};\n\tconst clearFilter = () => {\n\t\tsetFilteredPeriodsList(periodsList);\n\t\tsetselectedPeriod(null);\n\t\tsetisSearchClicked(false);\n\t};\n\n\tconst getClients = () => {\n\t\tsetShowLoader(true);\n\t\tcallApi(\"get\", ApiConstants.admin.clientshortlistbyadmin, {}, true)\n\t\t\t.then((response) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tconsole.log(response.payload);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tlet clients = response.payload.map((i) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...i,\n\t\t\t\t\t\t\tvalue: i.id,\n\t\t\t\t\t\t\tlabel: i.name,\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\t\tsetclientsList(clients);\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\tconst getPeriods = (userId) => {\n\t\tsetperiodsList([]);\n\t\tsetFilteredPeriodsList([]);\n\t\tsetShowLoader(true);\n\t\tconsole.log(userId);\n\t\tcallApi(\"post\", ApiConstants.vatreports.vatreportforvalidator, {user_id: userId}, true)\n\t\t\t.then((response) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tlet periods = response.payload.map((i, index) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...i,\n\t\t\t\t\t\t\tdoc_id: i.id,\n\t\t\t\t\t\t\tid: index,\n\t\t\t\t\t\t\tvalue: moment(i.start_date).format(\"DD MMM YYYY\") + \" - \" + moment(i.end_date).format(\"DD MMM YYYY\"),\n\t\t\t\t\t\t\tlabel: moment(i.start_date).format(\"DD MMM YYYY\") + \" - \" + moment(i.end_date).format(\"DD MMM YYYY\"),\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\t\tsetperiodsList(periods);\n\t\t\t\t\tsetFilteredPeriodsList(periods);\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\tconst onSelectClient = (value) => {\n\t\tif (value) {\n\t\t\tsetselectedClient(value);\n\t\t\tgetPeriods(value.client_id);\n\t\t}\n\t};\n\n\t// const getReportName = (item) => {\n\t// \treturn \"VAT_\" + item.company_name + \"_\" + moment(item.start_date).format(\"MMMYYYY\");\n\t// };\n\n\tconst downloadReport = (report) => {\n\t\tsetShowLoader(true);\n\t\tsetselectedReport(report);\n\t\tlet params = {\n\t\t\tuser_id: selectedClient.id,\n\t\t\tstart_date: report.start_date,\n\t\t\tend_date: report.end_date,\n\t\t};\n\t\tcallApi(\"post\", ApiConstants.vatreports.vatreportforothers, params, true)\n\t\t\t.then((response) => {\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tsetreportsData(response.payload);\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tif (pdfExportComponent.current) {\n\t\t\t\t\t\t\tpdfExportComponent.current.save();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsetShowLoader(false);\n\t\t\t\t\t}, 500);\n\t\t\t\t} else {\n\t\t\t\t\tsetShowLoader(false);\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\tconst viewEntry = (report) => {\n\t\tsetShowLoader(true);\n\t\tsetselectedReport(report);\n\t\tlet params = {\n\t\t\tid: report.doc_id,\n\t\t};\n\t\tconsole.log(report);\n\t\tcallApi(\"post\", ApiConstants.vatreports.vatreportforvalidatorbyid, params, true)\n\t\t\t.then((response) => {\n\t\t\t\tconsole.log(response.payload);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tsetreportsData(response.payload);\n\t\t\t\t\tsetshowPreview(true);\n\t\t\t\t\tsetShowLoader(false);\n\t\t\t\t} else {\n\t\t\t\t\tsetShowLoader(false);\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\tconst onEntrySubmit = (status) => {\n\t\tlet params = {id: reportsData.id, status};\n\t\tcallApi(\"post\", ApiConstants.vatreports.updatevatreport, params, true)\n\t\t\t.then((response) => {\n\t\t\t\tconsole.log(response);\n\t\t\t\tif (response && response.status_code === 201) {\n\t\t\t\t\tsetshowPreview(true);\n\t\t\t\t\tsetShowLoader(false);\n\t\t\t\t\tcloseEntryModal();\n\t\t\t\t\tonSelectClient(selectedClient);\n\t\t\t\t} else {\n\t\t\t\t\tsetShowLoader(false);\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\n\t\tcloseEntryModal();\n\t};\n\treturn (\n\t\t<React.Fragment>\n\t\t\t{showLoader && <Spinner />}\n\t\t\t<Row className=\"vat-reports\">\n\t\t\t\t<Col xl={12}>\n\t\t\t\t\t<Card className=\"rounded\">\n\t\t\t\t\t\t<Card.Body className=\"p-4\">\n\t\t\t\t\t\t\t<Row className=\"mb-3\">\n\t\t\t\t\t\t\t\t<Col xs={12} xl={3}>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"w-100 form-control-select\"\n\t\t\t\t\t\t\t\t\t\t\tclassNamePrefix=\"select\"\n\t\t\t\t\t\t\t\t\t\t\toptions={clientsList}\n\t\t\t\t\t\t\t\t\t\t\tvalue={selectedClient}\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Clients\"\n\t\t\t\t\t\t\t\t\t\t\tonChange={(value) => {\n\t\t\t\t\t\t\t\t\t\t\t\tonSelectClient(value);\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col xs={12} xl={3}>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"w-100 form-control-select\"\n\t\t\t\t\t\t\t\t\t\t\tclassNamePrefix=\"select\"\n\t\t\t\t\t\t\t\t\t\t\toptions={periodsList}\n\t\t\t\t\t\t\t\t\t\t\tvalue={selectedPeriod}\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"VAT Periods\"\n\t\t\t\t\t\t\t\t\t\t\tisSearchable={false}\n\t\t\t\t\t\t\t\t\t\t\tonChange={(value) => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetselectedPeriod(value);\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t\t\t\t<Col xs={1} xl={1} className=\"pl-0\">\n\t\t\t\t\t\t\t\t\t{isSearchClicked && (\n\t\t\t\t\t\t\t\t\t\t<span className=\"clear-search\" onClick={clearFilter}>\n\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-x\"></i>\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t<Row className=\"mt-4\">\n\t\t\t\t\t\t\t\t{filteredPeriodsList.map((item, key) => (\n\t\t\t\t\t\t\t\t\t<Col xs={12} lg={3} key={key}>\n\t\t\t\t\t\t\t\t\t\t<Card className=\"rounded\">\n\t\t\t\t\t\t\t\t\t\t\t<Card.Body className=\"px-4 pt-4 pb-0\">\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"report-tile\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<img src={pdfIcon} alt=\"PDF\" width=\"50\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"report-name mt-3\">{item.company_name}</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"report-download\" onClick={() => downloadReport(item)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-download\" />\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"report-tile mb-4\">\n\t\t\t\t\t\t\t\t\t\t\t\t<Button variant=\"primary\" className=\"m-0\" onClick={(e) => viewEntry(item)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\tApprove\n\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t</Card>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t<Modal size=\"xl\" show={showPreview} backdrop=\"static\" keyboard={true}>\n\t\t\t\t<Modal.Body className=\"p-0\">\n\t\t\t\t\t<button\n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\tclassName=\"btn-icon btn close-btn\"\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tcloseEntryModal();\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\t<i className=\"feather icon-x-circle\"></i>\n\t\t\t\t\t</button>\n\t\t\t\t\t<div className=\"px-4 py-5\">\n\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t<Col className=\"col-12 my-2\">\n\t\t\t\t\t\t\t\t<Report data={reportsData} />\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t<Col className=\"col-12 my-2 d-flex justify-content-center\">\n\t\t\t\t\t\t\t\t<Button variant=\"primary\" onClick={() => onEntrySubmit(\"Approved\", reportsData)}>\n\t\t\t\t\t\t\t\t\tApprove\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t<Button variant=\"danger\" onClick={() => onEntrySubmit(\"Rejected\", reportsData)}>\n\t\t\t\t\t\t\t\t\tReject\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</div>\n\t\t\t\t</Modal.Body>\n\t\t\t</Modal>\n\t\t\t{reportsData && (\n\t\t\t\t<div\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tposition: \"absolute\",\n\t\t\t\t\t\tleft: \"-10000px\",\n\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t}}>\n\t\t\t\t\t<PDFExport ref={pdfExportComponent} paperSize=\"A4\" margin={30} fileName={selectedReport.company_name} author=\"VatzApp\">\n\t\t\t\t\t\t<Report data={reportsData} />\n\t\t\t\t\t</PDFExport>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</React.Fragment>\n\t);\n};\n\nexport default VatReport;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/errors/404/NotFound404.js",["836","837","838"],"import React from \"react\";\nimport { Button, Col, Container, Form, Row } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\nimport Background404 from \"../../../assets/images/404.png\";\n\nconst NotFound404 = () => {\n  return (\n    <React.Fragment>\n      <div className=\"auth-wrapper maintenance\">\n        <Container>\n          <Row className=\"justify-content-center\">\n            <Col md={8} className=\"text-center px-4\">\n              <div>\n                <img\n                  src={Background404}\n                  alt=\"404 - Page Not Found\"\n                  style={{ maxWidth: 350 }}\n                />\n              </div>\n              <h3 className=\"text-primary mt-4\">Oops! Page not found!</h3>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default NotFound404;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/vatreports/validator.js",["839"],"import React, {useState, useEffect} from \"react\";\nimport {Row, Col, Card, Button, Modal} from \"react-bootstrap\";\nimport moment from \"moment\";\nimport Select from \"react-select\";\nimport {PDFExport} from \"@progress/kendo-react-pdf\";\n\nimport {callApi} from \"../../services/apiService\";\nimport {showNotification} from \"../../services/toasterService\";\nimport {ApiConstants} from \"../../config/apiConstants\";\nimport Spinner from \"../../components/Spinner\";\nimport Report from \"../../components/Report\";\n\nimport pdfIcon from \"../../assets/images/icons/pdf.png\";\n\nconst VatReport = (props) => {\n\tconst [showLoader, setShowLoader] = useState(false);\n\tconst [periodsList, setperiodsList] = useState([]);\n\tconst [filteredPeriodsList, setFilteredPeriodsList] = useState([]);\n\tconst [selectedPeriod, setselectedPeriod] = useState(null);\n\tconst [selectedReport, setselectedReport] = useState(null);\n\tconst [isSearchClicked, setisSearchClicked] = useState(false);\n\tconst [reportsData, setreportsData] = useState(null);\n\tconst [clientsList, setclientsList] = useState([]);\n\tconst [selectedClient, setselectedClient] = useState(null);\n\tconst [showPreview, setshowPreview] = useState(false);\n\n\tconst pdfExportComponent = React.useRef(null);\n\n\tuseEffect(() => {\n\t\tgetClients();\n\t}, []);\n\n\tuseEffect(() => {\n\t\tif (selectedPeriod) onSearchFilter();\n\t}, [selectedPeriod]);\n\n\tconst onSearchFilter = () => {\n\t\tif (selectedPeriod) {\n\t\t\tsetisSearchClicked(true);\n\t\t\tlet filteredList = periodsList.filter((i) => i.id === selectedPeriod.id);\n\t\t\tsetFilteredPeriodsList(filteredList);\n\t\t}\n\t};\n\n\tconst clearFilter = () => {\n\t\tsetFilteredPeriodsList(periodsList);\n\t\tsetselectedPeriod(null);\n\t\tsetisSearchClicked(false);\n\t};\n\n\tconst getClients = () => {\n\t\tsetShowLoader(true);\n\t\tcallApi(\"get\", ApiConstants.validator.clientshortlistbyvalidator, {}, true)\n\t\t\t.then((response) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tlet clients = response.payload.map((i) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...i,\n\t\t\t\t\t\t\tvalue: i.id,\n\t\t\t\t\t\t\tlabel: i.name,\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\t\tsetclientsList(clients);\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\tconst getPeriods = (userId) => {\n\t\tsetperiodsList([]);\n\t\tsetFilteredPeriodsList([]);\n\t\tsetShowLoader(true);\n\t\tcallApi(\"post\", ApiConstants.vatreports.vatreportforvalidator, {user_id: userId}, true)\n\t\t\t.then((response) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tlet periods = response.payload.map((i, index) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...i,\n\t\t\t\t\t\t\tdoc_id: i.id,\n\t\t\t\t\t\t\tid: index,\n\t\t\t\t\t\t\tvalue: moment(i.start_date).format(\"DD MMM YYYY\") + \" - \" + moment(i.end_date).format(\"DD MMM YYYY\"),\n\t\t\t\t\t\t\tlabel: moment(i.start_date).format(\"DD MMM YYYY\") + \" - \" + moment(i.end_date).format(\"DD MMM YYYY\"),\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\t\tsetperiodsList(periods);\n\t\t\t\t\tsetFilteredPeriodsList(periods);\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\tconst onSelectClient = (value) => {\n\t\tif (value) {\n\t\t\tsetselectedClient(value);\n\t\t\tclearFilter();\n\t\t\tgetPeriods(value.client_id);\n\t\t}\n\t};\n\n\t// const getReportName = (item) => {\n\t// \treturn \"VAT_\" + item.company_name + \"_\" + moment(item.start_date).format(\"MMMYYYY\");\n\t// };\n\n\tconst downloadReport = (report) => {\n\t\tsetShowLoader(true);\n\t\tsetselectedReport(report);\n\t\tlet params = {\n\t\t\tuser_id: selectedClient.id,\n\t\t\tstart_date: report.start_date,\n\t\t\tend_date: report.end_date,\n\t\t};\n\t\tcallApi(\"post\", ApiConstants.vatreports.vatreportforvalidator, params, true)\n\t\t\t.then((response) => {\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tsetreportsData(response.payload);\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tif (pdfExportComponent.current) {\n\t\t\t\t\t\t\tpdfExportComponent.current.save();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsetShowLoader(false);\n\t\t\t\t\t}, 500);\n\t\t\t\t} else {\n\t\t\t\t\tsetShowLoader(false);\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\tconst closeEntryModal = () => {\n\t\tsetshowPreview(false);\n\t};\n\tconst onEntrySubmit = (status) => {\n\t\tlet params = {id: reportsData.id, status};\n\t\tcallApi(\"post\", ApiConstants.vatreports.updatevatreport, params, true)\n\t\t\t.then((response) => {\n\t\t\t\tif (response && response.status_code === 201) {\n\t\t\t\t\tsetshowPreview(true);\n\t\t\t\t\tsetShowLoader(false);\n\t\t\t\t\tcloseEntryModal();\n\t\t\t\t\tonSelectClient(selectedClient);\n\t\t\t\t} else {\n\t\t\t\t\tsetShowLoader(false);\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\n\t\tcloseEntryModal();\n\t};\n\tconst viewEntry = (report) => {\n\t\tsetShowLoader(true);\n\t\tsetselectedReport(report);\n\t\tlet params = {\n\t\t\tid: report.doc_id,\n\t\t};\n\t\tcallApi(\"post\", ApiConstants.vatreports.vatreportforvalidatorbyid, params, true)\n\t\t\t.then((response) => {\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tsetreportsData(response.payload);\n\t\t\t\t\tsetshowPreview(true);\n\t\t\t\t\tsetShowLoader(false);\n\t\t\t\t} else {\n\t\t\t\t\tsetShowLoader(false);\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t{showLoader && <Spinner />}\n\t\t\t<Row className=\"vat-reports\">\n\t\t\t\t<Col xl={12}>\n\t\t\t\t\t<Card className=\"rounded\">\n\t\t\t\t\t\t<Card.Body className=\"p-4\">\n\t\t\t\t\t\t\t<Row className=\"mb-3\">\n\t\t\t\t\t\t\t\t<Col xs={12} xl={3}>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"w-100 form-control-select\"\n\t\t\t\t\t\t\t\t\t\t\tclassNamePrefix=\"select\"\n\t\t\t\t\t\t\t\t\t\t\toptions={clientsList}\n\t\t\t\t\t\t\t\t\t\t\tvalue={selectedClient}\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Clients\"\n\t\t\t\t\t\t\t\t\t\t\tonChange={(value) => {\n\t\t\t\t\t\t\t\t\t\t\t\tonSelectClient(value);\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col xs={12} xl={3}>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"w-100 form-control-select\"\n\t\t\t\t\t\t\t\t\t\t\tclassNamePrefix=\"select\"\n\t\t\t\t\t\t\t\t\t\t\toptions={periodsList}\n\t\t\t\t\t\t\t\t\t\t\tvalue={selectedPeriod}\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"VAT Periods\"\n\t\t\t\t\t\t\t\t\t\t\tisSearchable={false}\n\t\t\t\t\t\t\t\t\t\t\tonChange={(value) => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetselectedPeriod(value);\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col xs={2} xl={1} className=\"pl-0\">\n\t\t\t\t\t\t\t\t\t{isSearchClicked && (\n\t\t\t\t\t\t\t\t\t\t<span className=\"clear-search\" onClick={clearFilter}>\n\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-x\"></i>\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t<Row className=\"mt-4\">\n\t\t\t\t\t\t\t\t{filteredPeriodsList.map((item, key) => (\n\t\t\t\t\t\t\t\t\t<Col xs={12} lg={3} key={key}>\n\t\t\t\t\t\t\t\t\t\t<Card className=\"rounded\">\n\t\t\t\t\t\t\t\t\t\t\t<Card.Body className=\"px-4 pt-4 pb-0\">\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"report-tile\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<img src={pdfIcon} alt=\"PDF\" width=\"50\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"report-name mt-3\">{item.company_name}</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"report-download\" onClick={() => downloadReport(item)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-download\" />\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"report-tile mb-4\">\n\t\t\t\t\t\t\t\t\t\t\t\t<Button variant=\"primary\" className=\"m-0\" onClick={(e) => viewEntry(item)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\tApprove\n\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t</Card>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t{reportsData && (\n\t\t\t\t<div\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tposition: \"absolute\",\n\t\t\t\t\t\tleft: \"-10000px\",\n\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t}}>\n\t\t\t\t\t<PDFExport ref={pdfExportComponent} paperSize=\"A4\" margin={30} fileName={selectedReport.company_name} author=\"VatzApp\">\n\t\t\t\t\t\t<Report data={reportsData} />\n\t\t\t\t\t</PDFExport>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t<Modal size=\"xl\" show={showPreview} backdrop=\"static\" keyboard={true}>\n\t\t\t\t<Modal.Body className=\"p-0\">\n\t\t\t\t\t<button\n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\tclassName=\"btn-icon btn close-btn\"\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tcloseEntryModal();\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\t<i className=\"feather icon-x-circle\"></i>\n\t\t\t\t\t</button>\n\t\t\t\t\t<div className=\"px-4 py-5\">\n\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t<Col className=\"col-12 my-2\">\n\t\t\t\t\t\t\t\t<Report data={reportsData} />\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t<Col className=\"col-12 my-2 d-flex justify-content-center\">\n\t\t\t\t\t\t\t\t<Button variant=\"primary\" onClick={() => onEntrySubmit(\"Approved\", reportsData)}>\n\t\t\t\t\t\t\t\t\tApprove\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t<Button variant=\"danger\" onClick={() => onEntrySubmit(\"Rejected\", reportsData)}>\n\t\t\t\t\t\t\t\t\tReject\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</div>\n\t\t\t\t</Modal.Body>\n\t\t\t</Modal>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default VatReport;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/usermanagement/clients/Profile.js",["840","841","842","843","844"],"import React, { useState, useEffect } from \"react\";\nimport { Row, Col, Card, Dropdown, Modal } from \"react-bootstrap\";\nimport { useParams, Link } from \"react-router-dom\";\nimport { Formik, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport Select from \"react-select\";\nimport moment from \"moment\";\nimport { Switch } from \"@progress/kendo-react-inputs\";\nimport DatePicker from \"react-datepicker\";\nimport { callApi } from \"../../../services/apiService\";\nimport { showNotification } from \"../../../services/toasterService\";\nimport { CONFIG } from \"../../../config/constant\";\nimport { ApiConstants } from \"../../../config/apiConstants\";\nimport Spinner from \"../../../components/Spinner\";\nimport AddNewPlan from \"./AddPlan\";\nimport PlanHistory from \"./PlanHistory\";\nimport { vatPeriods, vatPercentages, vatMonths } from \"../../../enums/vatOptions\";\n\nimport avatar1 from \"../../../assets/images/icons/company.png\";\nimport axios from \"axios\";\n\nconst UserProfile = () => {\n\tconst [showLoader, setShowLoader] = useState(false);\n\tconst [isSubmitted, setIsSubmitted] = useState(false);\n\tconst [clientInfo, setclientInfo] = useState(null);\n\tconst [showNewPlanModal, setNewPlanModal] = useState(false);\n\tconst [showPlanHistoryModal, setPlanHistoryModal] = useState(false);\n\tconst [isApproved, setIsApproved] = useState(true);\n\tconst [checkersList, setCheckersList] = useState([]);\n\tconst [isActive, setisActive] = React.useState(false);\n\tconst [showStatusConfirm, setStatusConfirm] = React.useState(false);\n\tconst [showPreview, setshowPreview] = useState(false);\n\tconst [selectedPreview, setselectedPreview] = useState(null);\n\tconst userObj = React.useRef(JSON.parse(localStorage.getItem(\"user\")));\n\tconst [tradeLicenseExpiry, setTradeLicenseExpiry] = useState(null);\n\tconst { id } = useParams();\n\n\tconst UserFormSchema = Yup.object().shape({\n\t\tchecker_user_id: Yup.string().required(\"Please select Checker\"),\n\t\tvat_period: Yup.string().required(\"Please select VAT Period\"),\n\t\tvat_percentage: Yup.string().required(\"Please select VAT Percentage\"),\n\t\tstart_month: Yup.string().required(\"Please select Start Month\"),\n\t\tstart_year: Yup.string().required(\"Please select Start Year\"),\n\t});\n\n\tconst vatYears = [\n\t\t{\n\t\t\tvalue: new Date().getFullYear() - 2,\n\t\t\tlabel: new Date().getFullYear() - 2,\n\t\t},\n\t\t{\n\t\t\tvalue: new Date().getFullYear() - 1,\n\t\t\tlabel: new Date().getFullYear() - 1,\n\t\t},\n\t\t{\n\t\t\tvalue: new Date().getFullYear(),\n\t\t\tlabel: new Date().getFullYear(),\n\t\t},\n\t\t{\n\t\t\tvalue: new Date().getFullYear() + 1,\n\t\t\tlabel: new Date().getFullYear() + 1,\n\t\t},\n\t\t{\n\t\t\tvalue: new Date().getFullYear() + 2,\n\t\t\tlabel: new Date().getFullYear() + 2,\n\t\t},\n\t];\n\n\tuseEffect(() => {\n\t\tgetClientData();\n\t\tgetCheckers();\n\t}, []);\n\n\tconst getCheckers = () => {\n\t\tsetShowLoader(true);\n\t\tcallApi(\"get\", ApiConstants.lookups.getCheckers, {})\n\t\t\t.then((response) => {\n\t\t\t\tsetShowLoader(false);\n\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tsetCheckersList(\n\t\t\t\t\t\tresponse.payload?.map((i) => {\n\t\t\t\t\t\t\treturn { ...i, value: i.id, label: i.name };\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\tconst getClientData = () => {\n\t\tsetShowLoader(true);\n\t\tlet params = { user_id: parseInt(id) };\n\t\tcallApi(\"get\", ApiConstants.user.getuser, params, true)\n\t\t\t.then((response) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tlet data = response.payload;\n\t\t\t\t\tconsole.log(`${new Date(data?.client_user?.to).getUTCDate()}-${new Date(data?.client_user?.to).getUTCMonth()}-${new Date(data?.client_user?.to).getUTCFullYear()}`);\n\t\t\t\t\t// console.log(new Date(data?.client_user?.to).toUTCString());\n\t\t\t\t\tsetclientInfo({ ...data, client_user_expiry: moment(`${new Date(data?.client_user?.to).getUTCDate()}-${new Date(data?.client_user?.to).getUTCMonth() + 1}-${new Date(data?.client_user?.to).getUTCFullYear()}`).format(\"DD-MM-YYYY\") });\n\t\t\t\t\tsetIsApproved(data?.client_user?.verified_on);\n\t\t\t\t\tlet isSwitchActive = data?.is_active ? true : false;\n\t\t\t\t\tsetisActive(isSwitchActive);\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\tconst [addTradeLicenseExpiry, setAddTradeLicenseExpiry] = useState(false);\n\tconst [updateTradeLicenseExpiry, setUpdateTradeLicenseExpiry] = useState(false);\n\n\tconst approveUser = (e) => {\n\t\te.preventDefault();\n\t\tlet params = { user_id: parseInt(id), trade_license_expiry: moment(tradeLicenseExpiry).format(\"YYYY-MM-DD\") };\n\t\tif (userObj?.current?.token) {\n\t\t\taxios({ method: \"POST\", url: `${CONFIG.API_BASE_URL}${ApiConstants.admin.approveuser}`, data: params, headers: { Authorization: `Bearer ${userObj?.current?.token}` } })\n\t\t\t\t.then((response) => {\n\t\t\t\t\tconsole.trace(response);\n\t\t\t\t\tif (response && response.status === 200) {\n\t\t\t\t\t\tsetIsApproved(true);\n\t\t\t\t\t\tsetAddTradeLicenseExpiry(false);\n\t\t\t\t\t\tgetClientData();\n\t\t\t\t\t\tshowNotification(\"Success\", response?.data?.message, \"success\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tshowNotification(\"Error\", response?.data?.message, \"error\");\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t\t});\n\t\t\t// .catch((error) => {\n\t\t\t// \t// console.log(error);\n\t\t\t// \tshowNotification(error);\n\t\t\t// });\n\t\t}\n\t};\n\tconst updateTradeLicenseExpiryUser = (e) => {\n\t\te.preventDefault();\n\t\tlet params = { user_id: parseInt(id), trade_license_expiry: moment(tradeLicenseExpiry).format(\"YYYY-MM-DD\") };\n\t\tif (userObj?.current?.token) {\n\t\t\taxios({ method: \"PUT\", url: `${CONFIG.API_BASE_URL}${ApiConstants.admin.updatetradelicenseexpiry}`, data: params, headers: { Authorization: `Bearer ${userObj?.current?.token}` } })\n\t\t\t\t.then((response) => {\n\t\t\t\t\tconsole.trace(response);\n\t\t\t\t\tif (response && response.status === 200) {\n\t\t\t\t\t\tsetIsApproved(true);\n\t\t\t\t\t\tsetAddTradeLicenseExpiry(false);\n\t\t\t\t\t\tgetClientData();\n\t\t\t\t\t\tshowNotification(\"Success\", response?.data?.message, \"success\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tshowNotification(\"Error\", response?.data?.message, \"error\");\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t\t});\n\t\t\t// .catch((error) => {\n\t\t\t// \t// console.log(error);\n\t\t\t// \tshowNotification(error);\n\t\t\t// });\n\t\t}\n\t};\n\n\tconst onActiveChange = (status) => {\n\t\tsetShowLoader(true);\n\t\tlet apiUrl = status ? ApiConstants.user.activateuser : ApiConstants.user.deactivateuser;\n\t\tcallApi(\"post\", apiUrl, { user_id: parseInt(id) }, true)\n\t\t\t.then((response) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tsetisActive(status);\n\t\t\t\t\tshowNotification(\"Success\", response.message, \"success\");\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\tconst onSubmit = (values) => {\n\t\tsetShowLoader(true);\n\t\tlet params = {\n\t\t\tuser_id: parseInt(id),\n\t\t\tchecker_user_id: values.checker_user_id,\n\t\t\tvat_period: values.vat_period,\n\t\t\tvat_percentage: parseInt(values.vat_percentage),\n\t\t\tstart_month: values.start_month,\n\t\t\tstart_year: values.start_year,\n\t\t};\n\t\tcallApi(\"post\", ApiConstants.admin.updateclient, params, true)\n\t\t\t.then((response) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tif (response && response.status_code === 201) {\n\t\t\t\t\tgetClientData();\n\t\t\t\t\tshowNotification(\"Success\", response.message, \"success\");\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\tconst viewEntry = (entry) => {\n\t\tsetselectedPreview(entry);\n\t\tsetshowPreview(true);\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t{showLoader && <Spinner />}\n\n\t\t\t<Row>\n\t\t\t\t<Col md={4} className=\"order-md-1\">\n\t\t\t\t\t<Card>\n\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t<div className=\"d-flex align-middle\">\n\t\t\t\t\t\t\t\t<div className=\"profile-avatr mr-4\">{clientInfo?.profile_image ? <img src={CONFIG.API_BASE_URL + ApiConstants.file.view + \"?file_name=\" + clientInfo?.profile_image.file_path} alt=\"user\" className=\"display_pic\" /> : <img src={avatar1} alt=\"user\" />}</div>\n\n\t\t\t\t\t\t\t\t<div className=\"d-inline-block\">\n\t\t\t\t\t\t\t\t\t<h6>{clientInfo?.name}</h6>\n\t\t\t\t\t\t\t\t\t{clientInfo?.id && <p className=\"m-b-0\">ID: VATZ{(\"000000\" + clientInfo?.id).slice(-6)}</p>}\n\t\t\t\t\t\t\t\t\t{clientInfo?.client_user?.city && (\n\t\t\t\t\t\t\t\t\t\t<p className=\"m-b-0\">\n\t\t\t\t\t\t\t\t\t\t\t{clientInfo?.client_user?.city}, {clientInfo?.client_user?.region?.name}\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t<span className=\"status active\" />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<Row className=\"profile-personal-info\">\n\t\t\t\t\t\t\t\t<Col lg={12} className=\"mt-4 pl-4\">\n\t\t\t\t\t\t\t\t\t<div className=\"text-primary\">Email</div>\n\t\t\t\t\t\t\t\t\t<div>{clientInfo?.email}</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col lg={12} className=\"mt-4 pl-4\">\n\t\t\t\t\t\t\t\t\t<div className=\"text-primary\">Whatsapp</div>\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t{clientInfo?.w_country_code} {clientInfo?.whatsapp_no}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col lg={12} className=\"mt-4 pl-4\">\n\t\t\t\t\t\t\t\t\t<div className=\"text-primary\">Registered Date</div>\n\t\t\t\t\t\t\t\t\t<div>{moment(clientInfo?.created_at).format(\"DD-MM-YYYY\")}</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col lg={12} className=\"mt-4 pl-4\">\n\t\t\t\t\t\t\t\t\t<div className=\"text-primary\">Landline Number</div>\n\t\t\t\t\t\t\t\t\t{clientInfo?.client_user?.landline ? (\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t{clientInfo?.client_user?.l_country_code} {clientInfo?.client_user?.landline}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\"-\"\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col lg={12} className=\"mt-4 pl-4\">\n\t\t\t\t\t\t\t\t\t<div className=\"text-primary\">Mobile Number</div>\n\t\t\t\t\t\t\t\t\t{clientInfo?.client_user?.mobile ? (\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t{clientInfo?.w_country_code} {clientInfo?.client_user?.mobile}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\"-\"\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t</Card>\n\t\t\t\t\t<Card className=\"new-cust-card\">\n\t\t\t\t\t\t<Card.Header>\n\t\t\t\t\t\t\t<div className=\"d-flex justify-content-between\">\n\t\t\t\t\t\t\t\t<h5 className=\"card-title\">Payment Details</h5>\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<Dropdown>\n\t\t\t\t\t\t\t\t\t\t<Dropdown.Toggle as={optionToggle}>\n\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-more-vertical\"></i>\n\t\t\t\t\t\t\t\t\t\t</Dropdown.Toggle>\n\t\t\t\t\t\t\t\t\t\t<Dropdown.Menu className=\"py-2 payment-plan\">\n\t\t\t\t\t\t\t\t\t\t\t<Dropdown.Item className=\"p-0\">\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"option-item\" onClick={() => setNewPlanModal(true)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\tNew Payment\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</Dropdown.Item>\n\t\t\t\t\t\t\t\t\t\t\t<Dropdown.Item className=\"p-0\">\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"option-item\" onClick={() => setPlanHistoryModal(true)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\tPayment History\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</Dropdown.Item>\n\t\t\t\t\t\t\t\t\t\t\t{/* <Dropdown.Item className=\"p-0\">\n                        <div className=\"option-item\">Download Invoice</div>\n                      </Dropdown.Item> */}\n\t\t\t\t\t\t\t\t\t\t</Dropdown.Menu>\n\t\t\t\t\t\t\t\t\t</Dropdown>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Card.Header>\n\t\t\t\t\t\t<Card.Body className=\"p-b-0\">\n\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t<Col sm={6}>\n\t\t\t\t\t\t\t\t\t<div className=\"font-weight-bold mb-2\">Plan</div>\n\t\t\t\t\t\t\t\t\t{clientInfo?.client_user?.plan_name ? <div>VATZ - {clientInfo?.client_user?.plan_name}</div> : \"-\"}\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col sm={6}>\n\t\t\t\t\t\t\t\t\t<div className=\"font-weight-bold mb-2\">Amount</div>\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t{clientInfo?.client_user?.payment_currency} {clientInfo?.client_user?.payment_amount !== null ? clientInfo?.client_user?.payment_amount : \"-\"}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col sm={6} className=\"mt-4\">\n\t\t\t\t\t\t\t\t\t<div className=\"font-weight-bold mb-2\">Expiry Date</div>\n\t\t\t\t\t\t\t\t\t<div>{clientInfo?.client_user?.to ? moment(clientInfo.client_user_expiry).format(\"DD-MM-YYYY\") : \"-\"}</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col sm={6} className=\"mt-4\">\n\t\t\t\t\t\t\t\t\t<div className=\"font-weight-bold mb-2\">Subscription Status</div>\n\t\t\t\t\t\t\t\t\t<div className={clientInfo?.client_user?.to && moment(clientInfo?.client_user?.to).isAfter(moment.now()) ? \"text-success\" : \"text-danger\"}>{clientInfo?.client_user?.to && moment(clientInfo?.client_user?.to).isAfter(moment.now()) ? \"Active\" : \"Inactive\"}</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col sm={6} className=\"mt-4\">\n\t\t\t\t\t\t\t\t\t<div className=\"font-weight-bold mb-2\">Last Payment Date</div>\n\t\t\t\t\t\t\t\t\t<div>{clientInfo?.client_user?.payment_date ? moment(clientInfo?.client_user?.payment_date).format(\"DD-MM-YYYY\") : \"-\"}</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t</Card>\n\t\t\t\t</Col>\n\t\t\t\t<Col md={8} className=\"order-md-2\">\n\t\t\t\t\t<Card>\n\t\t\t\t\t\t<Card.Header>\n\t\t\t\t\t\t\t<h5 className=\"card-title\">VAT Details</h5>\n\t\t\t\t\t\t</Card.Header>\n\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t<Col sm={12}>\n\t\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t\t<Col sm={5}>\n\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"text-primary mb-2\">VAT Period</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"mb-1\">{clientInfo?.client_user?.vat_period}</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{clientInfo?.client_user?.from ? moment(clientInfo?.client_user?.from).format(\"DD-MMM\") : \"\"}\n\t\t\t\t\t\t\t\t\t\t\t\t\t{clientInfo?.client_user?.from && <span> to </span>}\n\t\t\t\t\t\t\t\t\t\t\t\t\t{clientInfo?.client_user?.to ? moment(clientInfo?.client_user?.to).format(\"DD-MMM\") : \"\"}\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t<Col sm={4}>\n\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"text-primary mb-2\">VAT Percentage </div>\n\t\t\t\t\t\t\t\t\t\t\t\t<p>{clientInfo?.client_user?.vat_percentage !== null ? clientInfo?.client_user?.vat_percentage + \"%\" : \"-\"}</p>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t\t<Col sm={5}>\n\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"text-primary font-weight-bold mb-3\">Address</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"mb-1\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{clientInfo?.client_user?.building_name && <span>{clientInfo?.client_user?.building_name}, </span>}\n\t\t\t\t\t\t\t\t\t\t\t\t\t{clientInfo?.client_user?.palce && <span>{clientInfo?.client_user?.palce}, </span>}\n\t\t\t\t\t\t\t\t\t\t\t\t\t{clientInfo?.client_user?.city && <span>{clientInfo?.client_user?.city}, </span>}\n\t\t\t\t\t\t\t\t\t\t\t\t\t{clientInfo?.client_user?.p_o_box && <span>{clientInfo?.client_user?.p_o_box}</span>}\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t{clientInfo?.client_user?.country && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{clientInfo?.client_user?.region?.name}, {clientInfo?.client_user?.country?.name}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t<Col sm={4}>\n\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"text-primary font-weight-bold mb-3\">Contact Details</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"text-primary mb-2\">Contact Person Name</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div>{clientInfo?.client_user?.contact_person} </div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t<Col sm={3}>\n\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"text-primary mb-2\" style={{ marginTop: 37 }}>\n\t\t\t\t\t\t\t\t\t\t\t\t\tContact Number\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{clientInfo?.client_user?.cp_country_code} {clientInfo?.client_user?.cp_mobile}{\" \"}\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t\t<Col sm={4} className=\"mb-3\">\n\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"text-primary font-weight-bold mb-2\">Trade License Copy</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div>{clientInfo?.client_user?.trade_license_number}</div>\n\t\t\t\t\t\t\t\t\t\t\t\t{clientInfo && clientInfo?.client_user?.trade_license_image && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"mt-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<a target=\"_blank\" rel=\"noreferrer\" href={CONFIG.API_BASE_URL + ApiConstants.file.download + \"?file_name=\" + clientInfo?.client_user?.trade_license_image.file_path}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tDownload\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<a target=\"_blank\" rel=\"noreferrer\" className=\"ml-4\" role=\"button\" onClick={() => viewEntry(CONFIG.API_BASE_URL + ApiConstants.file.download + \"?file_name=\" + clientInfo?.client_user?.trade_license_image.file_path)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tView\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t<Col sm={4} className=\"mb-3\">\n\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"text-primary font-weight-bold mb-2\">TRN</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div>{clientInfo?.client_user?.trn_number}</div>\n\t\t\t\t\t\t\t\t\t\t\t\t{clientInfo && clientInfo?.client_user?.tran_certificate_image && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"mt-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<a target=\"_blank\" rel=\"noreferrer\" href={CONFIG.API_BASE_URL + ApiConstants.file.download + \"?file_name=\" + clientInfo?.client_user?.tran_certificate_image.file_path}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tDownload\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<a target=\"_blank\" rel=\"noreferrer\" className=\"ml-4\" role=\"button\" onClick={() => viewEntry(CONFIG.API_BASE_URL + ApiConstants.file.download + \"?file_name=\" + clientInfo?.client_user?.tran_certificate_image.file_path)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tView\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t<Col sm={4} className=\"mb-3\">\n\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"text-primary font-weight-bold mb-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span>Expiry Date </span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button className=\"btn btn-primary py-0 pl-3 pr-0\" size=\"sm\" onClick={(e) => setUpdateTradeLicenseExpiry(true)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-edit\"></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div>{clientInfo?.client_user?.trade_license_expiry}</div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t{clientInfo && (\n\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t{isApproved && (\n\t\t\t\t\t\t\t\t\t\t<Col sm={12}>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"my-3 d-flex\">\n\t\t\t\t\t\t\t\t\t\t\t\t<label className={`m-0 font-weight-bold  ${isActive ? \"text-primary\" : \"\"}`} style={{ width: 60 }}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{isActive ? \"Active\" : \"Inactive\"}\n\t\t\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t\t\t<Switch onChange={() => setStatusConfirm(true)} checked={isActive} onLabel={\"\"} offLabel={\"\"} />\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t<Col sm={12}>\n\t\t\t\t\t\t\t\t\t\t<Formik\n\t\t\t\t\t\t\t\t\t\t\tenableReinitialize={true}\n\t\t\t\t\t\t\t\t\t\t\tinitialValues={{\n\t\t\t\t\t\t\t\t\t\t\t\tchecker_user_id: clientInfo?.client_user?.checker_user_id ? clientInfo?.client_user?.checker_user_id : \"\",\n\t\t\t\t\t\t\t\t\t\t\t\tvat_period: clientInfo?.client_user?.vat_period ? clientInfo?.client_user?.vat_period : \"\",\n\t\t\t\t\t\t\t\t\t\t\t\tvat_percentage: clientInfo?.client_user?.vat_percentage ? clientInfo?.client_user?.vat_percentage?.toString() : \"\",\n\t\t\t\t\t\t\t\t\t\t\t\tstart_month: clientInfo?.client_user?.start_month ? clientInfo?.client_user?.start_month : \"\",\n\t\t\t\t\t\t\t\t\t\t\t\tstart_year: clientInfo?.client_user?.start_year ? clientInfo?.client_user?.start_year : \"\",\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\tvalidationSchema={UserFormSchema}\n\t\t\t\t\t\t\t\t\t\t\tonSubmit={(values) => onSubmit(values)}>\n\t\t\t\t\t\t\t\t\t\t\t{({ errors, handleChange, values }) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<Form>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{isApproved && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Row className=\"mt-3\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Col sm={6} className=\"mb-3\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={`w-100 form-control-select ${errors.checker_user_id && isSubmitted ? \"is-invalid\" : \"\"}`}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassNamePrefix=\"select\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toptions={checkersList}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={checkersList.find((i) => i.id === values.checker_user_id)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Assign Checker\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tisSearchable={false}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(value) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet event = {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttarget: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: \"checker_user_id\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue: value.id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleChange(event);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"checker_user_id\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Col sm={6} className=\"mb-3\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={`w-100 form-control-select ${errors.vat_period && isSubmitted ? \"is-invalid\" : \"\"}`}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassNamePrefix=\"select\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toptions={vatPeriods}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={vatPeriods.find((i) => i.value === values.vat_period)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"VAT Period\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tisSearchable={false}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(value) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet event = {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttarget: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: \"vat_period\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue: value.value,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleChange(event);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"vat_period\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Col sm={6} className=\"mb-3\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={`w-100 form-control-select ${errors.vat_percentage && isSubmitted ? \"is-invalid\" : \"\"}`}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassNamePrefix=\"select\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toptions={vatPercentages}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"VAT Percentage\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tisSearchable={false}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={vatPercentages.find((i) => i.value === values.vat_percentage)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(value) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet event = {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttarget: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: \"vat_percentage\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue: value.value,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleChange(event);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"vat_percentage\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Col sm={3} className=\"mb-3\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={`w-100 form-control-select ${errors.start_month && isSubmitted ? \"is-invalid\" : \"\"}`}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassNamePrefix=\"select\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toptions={vatMonths}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={vatMonths.find((i) => i.value === values.start_month)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Start Month\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tisSearchable={false}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(value) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet event = {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttarget: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: \"start_month\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue: value.value,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleChange(event);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"start_month\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Col sm={3} className=\"mb-3\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={`w-100 form-control-select ${errors.start_year && isSubmitted ? \"is-invalid\" : \"\"}`}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassNamePrefix=\"select\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toptions={vatYears}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={vatYears.find((i) => i.value === values.start_year)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Start Year\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tisSearchable={false}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(value) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet event = {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttarget: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: \"start_year\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue: value.value,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleChange(event);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"start_year\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Col sm={12} className=\"text-center mt-3\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Link to=\"../\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn btn-outline-primary\" style={{ width: 150 }}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{isApproved && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"submit\" className=\"btn btn-primary\" style={{ width: 150 }} onClick={() => setIsSubmitted(true)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSave\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{!isApproved && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn btn-primary\" style={{ width: 150 }} onClick={(e) => setAddTradeLicenseExpiry(true)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tApprove\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t\t\t\t\t</Form>\n\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t</Formik>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t</Card>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t<Modal size=\"lg\" show={showNewPlanModal} backdrop=\"static\" keyboard={true}>\n\t\t\t\t<Modal.Body className=\"p-0\">\n\t\t\t\t\t<button type=\"button\" className=\"btn-icon btn close-btn\" onClick={() => setNewPlanModal(false)}>\n\t\t\t\t\t\t<i className=\"feather icon-x-circle\"></i>\n\t\t\t\t\t</button>\n\t\t\t\t\t<AddNewPlan onShowLoader={setShowLoader} onSuccess={getClientData} selectedCountry={clientInfo?.client_user?.country} userId={id} toggleModal={setNewPlanModal} />\n\t\t\t\t</Modal.Body>\n\t\t\t</Modal>\n\n\t\t\t<Modal size=\"xl\" show={showPlanHistoryModal} backdrop=\"static\" keyboard={true}>\n\t\t\t\t<Modal.Body className=\"p-0\">\n\t\t\t\t\t<button type=\"button\" className=\"btn-icon btn close-btn\" onClick={() => setPlanHistoryModal(false)}>\n\t\t\t\t\t\t<i className=\"feather icon-x-circle\"></i>\n\t\t\t\t\t</button>\n\t\t\t\t\t<PlanHistory onShowLoader={setShowLoader} userId={id} userData={clientInfo} toggleModal={setPlanHistoryModal} />\n\t\t\t\t</Modal.Body>\n\t\t\t</Modal>\n\n\t\t\t<Modal size=\"md\" show={showStatusConfirm} backdrop=\"static\" keyboard={true}>\n\t\t\t\t<Modal.Header>\n\t\t\t\t\t<h5 className=\"card-title\">Confirm Action</h5>\n\t\t\t\t</Modal.Header>\n\t\t\t\t<Modal.Body>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{isActive && <span>Only active users can login to application. </span>}\n\t\t\t\t\t\t<span>Are you sure that to {isActive ? \"deactivate\" : \"activate\"} this user?</span>\n\t\t\t\t\t</div>\n\t\t\t\t</Modal.Body>\n\t\t\t\t<Modal.Footer>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<button className=\"btn btn-outline-primary\" onClick={() => setStatusConfirm(false)}>\n\t\t\t\t\t\t\tNo\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn btn-primary\"\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tsetStatusConfirm(false);\n\t\t\t\t\t\t\t\tonActiveChange(!isActive);\n\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\tYes\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</Modal.Footer>\n\t\t\t</Modal>\n\t\t\t<Modal size=\"lg\" show={addTradeLicenseExpiry} backdrop=\"static\" keyboard={true}>\n\t\t\t\t<Modal.Body className=\"p-0\">\n\t\t\t\t\t<button type=\"button\" className=\"btn-icon btn close-btn\" onClick={() => setAddTradeLicenseExpiry(false)}>\n\t\t\t\t\t\t<i className=\"feather icon-x-circle\"></i>\n\t\t\t\t\t</button>\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Col sm={12}>\n\t\t\t\t\t\t\t<form action=\"\" onSubmit={approveUser}>\n\t\t\t\t\t\t\t\t<div className=\"text-center px-4 py-5\">\n\t\t\t\t\t\t\t\t\t<div className=\"date-picker-container\">\n\t\t\t\t\t\t\t\t\t\t<DatePicker className=\"form-control mb-2\" required placeholderText=\"Trade License Expiry Date\" dateFormat=\"dd/MM/yyyy\" selected={tradeLicenseExpiry} onChange={setTradeLicenseExpiry} />\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-calendar\"></i>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<button className=\"btn btn-primary\" style={{ width: 150 }} type=\"submit\">\n\t\t\t\t\t\t\t\t\t\tApprove\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Row>\n\t\t\t\t</Modal.Body>\n\t\t\t</Modal>\n\t\t\t<Modal size=\"lg\" show={updateTradeLicenseExpiry} backdrop=\"static\" keyboard={true}>\n\t\t\t\t<Modal.Body className=\"p-0\">\n\t\t\t\t\t<button type=\"button\" className=\"btn-icon btn close-btn\" onClick={() => setUpdateTradeLicenseExpiry(false)}>\n\t\t\t\t\t\t<i className=\"feather icon-x-circle\"></i>\n\t\t\t\t\t</button>\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Col sm={12}>\n\t\t\t\t\t\t\t<form action=\"\" onSubmit={approveUser}>\n\t\t\t\t\t\t\t\t<div className=\"text-center px-4 py-5\">\n\t\t\t\t\t\t\t\t\t<div className=\"date-picker-container\">\n\t\t\t\t\t\t\t\t\t\t<DatePicker className=\"form-control mb-2\" required placeholderText=\"Update Trade License Expiry Date\" dateFormat=\"dd/MM/yyyy\" selected={tradeLicenseExpiry} onChange={setTradeLicenseExpiry} />\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-calendar\"></i>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<button className=\"btn btn-primary\" style={{ width: 150 }} type=\"submit\">\n\t\t\t\t\t\t\t\t\t\tUpdate\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Row>\n\t\t\t\t</Modal.Body>\n\t\t\t</Modal>\n\t\t\t<Modal size=\"lg\" show={showPreview} backdrop=\"static\" keyboard={true}>\n\t\t\t\t<Modal.Body className=\"p-0\">\n\t\t\t\t\t<button type=\"button\" className=\"btn-icon btn close-btn\" onClick={() => setshowPreview(false)}>\n\t\t\t\t\t\t<i className=\"feather icon-x-circle\"></i>\n\t\t\t\t\t</button>\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Col sm={12}>\n\t\t\t\t\t\t\t<div className=\"text-center px-4 py-5\">\n\t\t\t\t\t\t\t\t<img src={selectedPreview} alt=\"Preview\" style={{ maxWidth: \"100%\" }} />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Row>\n\t\t\t\t</Modal.Body>\n\t\t\t</Modal>\n\t\t</React.Fragment>\n\t);\n};\n\nconst optionToggle = React.forwardRef(({ children, onClick }, ref) => (\n\t<a\n\t\thref=\"\"\n\t\tref={ref}\n\t\tonClick={(e) => {\n\t\t\te.preventDefault();\n\t\t\tonClick(e);\n\t\t}}>\n\t\t{children}\n\t</a>\n));\n\nexport default UserProfile;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/signin/employee/SignIn.js",["845"],"import React, { useState } from \"react\";\nimport { NavLink, Link } from \"react-router-dom\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\n\nimport { showNotification } from \"../../../services/toasterService\";\nimport { callApi } from \"../../../services/apiService\";\nimport { ApiConstants } from \"../../../config/apiConstants\";\nimport Spinner from \"../../../components/Spinner\";\n\nimport logo from \"../../../assets/svgs/logo.svg\";\n\nconst SignIn = ({ history }) => {\n  const [showLoader, setShowLoader] = useState(false);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n\n  const onSubmit = (values) => {\n    setShowLoader(true);\n    let params = {\n      email: values.email,\n      password: values.password,\n    };\n    callApi(\"post\", ApiConstants.auth.employeelogin, params)\n      .then((response) => {\n        let redirectRoute = \"\";\n        if (response && response.status_code === 200) {\n          setShowLoader(false);\n          let userObj = response.payload;\n          sessionStorage.setItem(\"auth\", true);\n          sessionStorage.setItem(\"user\", JSON.stringify(response.payload));\n          localStorage.setItem(\"auth\", true);\n          localStorage.setItem(\"user\", JSON.stringify(response.payload));\n          switch (userObj.user_role_id) {\n            case 1:\n              redirectRoute = \"/admin/dashboard\";\n              break;\n            case 2:\n              redirectRoute = \"/admin/dashboard\";\n              break;\n            case 3:\n              redirectRoute = \"/checker/dashboard\";\n              break;\n            case 4:\n              redirectRoute = \"/validator/dashboard\";\n              break;\n          }\n          history.push(redirectRoute);\n        } else {\n          setShowLoader(false);\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        setShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  let SignInSchema = Yup.object().shape({\n    email: Yup.string()\n      .required(\"Please enter Email \")\n      .email(\"Please enter a valid Email\"),\n    password: Yup.string().required(\"Please enter Password\"),\n  });\n\n  return (\n    <React.Fragment>\n      {showLoader && <Spinner />}\n      <div className=\"auth-content\">\n        <div className=\"text-center mb-4 text-white\">\n          <h4 className=\"text-white\">Employee Login</h4>\n          <div className=\"mt-3\">Sign in to your account to continue</div>\n        </div>\n        <div className=\"card rounded\">\n          <div className=\"card-body\">\n            <div className=\"mb-3 text-center\">\n              <Link to=\"/home\">\n                <img src={logo} alt=\"Logo\" style={{ height: 70 }} />\n              </Link>\n            </div>\n\n            <Formik\n              initialValues={{\n                email: \"\",\n                password: \"\",\n              }}\n              validationSchema={SignInSchema}\n              onSubmit={(values) => onSubmit(values)}>\n              {({ errors }) => (\n                <Form>\n                  <h5 className=\"mb-3\" style={{ color: \"#096DA9\" }}>\n                    Sign in\n                  </h5>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      className={`form-control ${errors.email && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                      placeholder=\"Email\"\n                      name=\"email\"\n                      tabIndex={1}\n                    />\n                    <ErrorMessage name=\"email\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"password\"\n                      className={`form-control ${errors.password && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                      placeholder=\"Password\"\n                      name=\"password\"\n                      tabIndex={1}\n                    />\n                    <ErrorMessage name=\"password\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                  <p className=\"mb-4\">\n                    <NavLink\n                      style={{ color: \"#096DA9\", fontSize: 13 }}\n                      to=\"/forgot-password\">\n                      Forgot password?\n                    </NavLink>\n                  </p>\n                  <div className=\"form-group\">\n                    <div className=\"checkbox d-flex p-0\">\n                      <input\n                        type=\"checkbox\"\n                        name=\"checkbox-fill-1\"\n                        id=\"checkbox-fill-a1\"\n                      />\n                      <label htmlFor=\"checkbox-fill-a1\" className=\"cr\">\n                        Remember me next time\n                      </label>\n                    </div>\n                  </div>\n                  <div className=\"form-group text-center\">\n                    <button\n                      type=\"submit\"\n                      style={{ width: 180, fontWeight: \"bold\" }}\n                      className=\"btn btn-primary shadow-2 my-3\"\n                      onClick={() => setIsSubmitted(true)}>\n                      Sign In\n                    </button>\n                  </div>\n                </Form>\n              )}\n            </Formik>\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default SignIn;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/usermanagement/clients/index.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/utils/services.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/components/Spinner/index.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/forgotpassword/index.js",["846"],"import React, {useState} from \"react\";\nimport {NavLink, Link} from \"react-router-dom\";\nimport {Formik, Field, Form, ErrorMessage} from \"formik\";\nimport * as Yup from \"yup\";\n\nimport {showNotification} from \"../../services/toasterService\";\nimport {callApi} from \"../../services/apiService\";\nimport {ApiConstants} from \"../../config/apiConstants\";\nimport Spinner from \"../../components/Spinner\";\n\nimport logo from \"../../assets/svgs/logo.svg\";\n\nconst SignIn = ({history}) => {\n\tconst [showLoader, setShowLoader] = useState(false);\n\tconst [isSubmitted, setIsSubmitted] = useState(false);\n\n\tconst onSubmit = (values) => {\n\t\tsetShowLoader(true);\n\t\tcallApi(\"get\", ApiConstants.auth.forgotpassword, {email: values.email})\n\t\t\t.then((response) => {\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tsetShowLoader(false);\n\t\t\t\t\tshowNotification(\"Success\", response.message, \"success\");\n\t\t\t\t\thistory.goBack();\n\t\t\t\t} else {\n\t\t\t\t\tsetShowLoader(false);\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\thistory.goBack();\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tconsole.log(error.response);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\tlet ForgotSchema = Yup.object().shape({\n\t\temail: Yup.string().required(\"Please enter Email \").email(\"Please enter a valid Email\"),\n\t});\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t{showLoader && <Spinner />}\n\t\t\t<div className=\"auth-content\">\n\t\t\t\t<div className=\"text-center mb-4 text-white\">\n\t\t\t\t\t<h4 className=\"text-white\">Forgot Password?</h4>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"card rounded\">\n\t\t\t\t\t<div className=\"card-body\">\n\t\t\t\t\t\t<div className=\"mb-3 text-center\">\n\t\t\t\t\t\t\t<Link to=\"/home\">\n\t\t\t\t\t\t\t\t<img src={logo} alt=\"Logo\" style={{height: 70}} />\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<Formik initialValues={{email: \"\"}} validationSchema={ForgotSchema} onSubmit={(values) => onSubmit(values)}>\n\t\t\t\t\t\t\t{({errors}) => (\n\t\t\t\t\t\t\t\t<Form>\n\t\t\t\t\t\t\t\t\t<label>Email</label>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className={`form-control ${errors.email && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"Email\" name=\"email\" tabIndex={1} />\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"email\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"form-group text-center\">\n\t\t\t\t\t\t\t\t\t\t<button type=\"submit\" style={{width: 180, fontWeight: \"bold\"}} className=\"btn btn-primary shadow-2 my-3\" onClick={() => setIsSubmitted(true)}>\n\t\t\t\t\t\t\t\t\t\t\tSubmit\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Form>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</Formik>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default SignIn;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/home/index.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/profile/index.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/usermanagement/checkers/index.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/errors/access-denied/index.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/fileupload/index.js",["847"],"import React, { useCallback, useState, useEffect } from \"react\";\nimport { Row, Col, Card } from \"react-bootstrap\";\nimport { useDropzone } from \"react-dropzone\";\n\nimport { callApi, callUploadApi } from \"../../services/apiService\";\nimport { showNotification } from \"../../services/toasterService\";\nimport { ApiConstants } from \"../../config/apiConstants\";\nimport { CONFIG } from \"../../config/constant\";\nimport Spinner from \"../../components/Spinner\";\nimport imageCompression from \"browser-image-compression\";\n\nconst FileUpload = () => {\n  const [showLoader, setShowLoader] = useState(false);\n  const [fileList, setfileList] = useState([]);\n  const [showProgress, setshowProgress] = useState(false);\n  const [uploadStarted, setuploadStarted] = useState(false);\n  const [uploadCompleted, setuploadCompleted] = useState(false);\n  const [progressWidth, setProgressWidth] = useState(0);\n  const [checkerAssigned, setcheckerAssigned] = useState(false);\n  const [successUploads, setSuccessUploads] = useState([]);\n  const [failedUploads, setFailedUploads] = useState([]);\n  const [rejectedUploads, setRejectedUploads] = useState([]);\n\n  const MAX_FILE_SIZE = CONFIG.MAX_UPLOAD_SIZE;\n  const SUPPORTED_FORMATS = React.useMemo(() => [\"pdf\", \"jpg\", \"jpeg\", \"png\", \"doc\", \"docx\", \"jfif\", \"gif\", \"bmp\"], []);\n\n  useEffect(() => {\n    let userObj = JSON.parse(localStorage.getItem(\"user\"));\n    setcheckerAssigned(userObj.is_checker_assigned);\n  }, []);\n\n  async function handleImageUpload(event) {\n    const imageFile = event.target.files[0];\n    console.log(\"originalFile instanceof Blob\", imageFile instanceof Blob); // true\n    console.log(`originalFile size ${imageFile.size / 1024 / 1024} MB`);\n\n    const options = {\n      maxSizeMB: 1,\n      maxWidthOrHeight: 1920,\n      useWebWorker: true,\n    };\n\n    try {\n      const compressedFile = await imageCompression(imageFile, options);\n      console.log(\"compressedFile instanceof Blob\", compressedFile instanceof Blob);\n      console.log(`compressedFile size ${compressedFile.size / 1024 / 1024} MB`);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  const onUploadComplete = React.useCallback(() => {\n    setuploadStarted(false);\n    setshowProgress(false);\n\n    if (!successUploads.length) return;\n\n    setShowLoader(true);\n    let params = {\n      file_id_list: successUploads.map((i) => {\n        return i.fileId;\n      }),\n    };\n    callApi(\"post\", ApiConstants.entry.create, params, true)\n      .then((response) => {\n        setShowLoader(false);\n        if (response && response.status_code === 201) {\n          setSuccessUploads([]);\n          showNotification(\"Success\", response.message, \"success\");\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        setShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  }, [successUploads]);\n\n  useEffect(() => {\n    let pendingList = fileList.filter((i) => i.status === 0);\n    if (!uploadCompleted && uploadStarted && !pendingList.length) {\n      setuploadCompleted(true);\n      setTimeout(() => {\n        onUploadComplete();\n      }, 1000);\n    }\n  }, [successUploads, failedUploads, fileList, uploadCompleted, uploadStarted, onUploadComplete]);\n\n  const checkFileType = useCallback(\n    (file) => {\n      let regex = /(?:\\.([^.]+))?$/;\n      let ext = regex.exec(file.name)[1];\n      console.log(ext);\n      if (ext === \"jpg\" || ext === \"jpeg\" || ext === \"png\") {\n      }\n      return SUPPORTED_FORMATS.includes(ext?.toLowerCase());\n    },\n    [SUPPORTED_FORMATS]\n  );\n\n  const removeFile = (file) => {\n    console.log(file);\n    let updatedList = rejectedUploads.filter((i) => {\n      console.log(i.id, file.id, i.fileData.size, file.fileData.size);\n      return i.id !== file.id || i.fileData.size !== file.fileData.size;\n    });\n    setRejectedUploads(updatedList);\n  };\n\n  const removeFailedFile = (file) => {\n    console.log(file);\n    let updatedList = fileList.filter((i) => {\n      console.log(i.id, file.id, i.fileData.size, file.fileData.size);\n      return i.id !== file.id || i.fileData.size !== file.fileData.size;\n    });\n    setfileList(updatedList);\n  };\n\n  const onDrop = useCallback(\n    (acceptedFiles) => {\n      let acceptedList = [],\n        rejectedList = [];\n      acceptedFiles.forEach((file) => {\n        if (!checkFileType(file)) {\n          rejectedList.push({ id: new Date().valueOf(), reason: \"Unsupported file format\", fileData: file });\n        } else if (file.size >= MAX_FILE_SIZE) {\n          rejectedList.push({ id: new Date().valueOf(), reason: \"Exceeds maximum file size\", fileData: file });\n        } else {\n          acceptedList.push({ id: new Date().valueOf(), status: 0, fileData: file });\n        }\n      });\n\n      setfileList((oldList) => [...oldList, ...acceptedList]);\n      setRejectedUploads((oldList) => [...oldList, ...rejectedList]);\n    },\n    [MAX_FILE_SIZE, checkFileType]\n  );\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n  const formatBytes = (bytes, decimals = 2) => {\n    if (bytes === 0) return \"0 Bytes\";\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + \" \" + sizes[i];\n  };\n\n  const uploadFiles = async (data) =>\n    new Promise((resolve, reject) => {\n      const options = { maxSizeMB: 1, maxWidthOrHeight: 1920, useWebWorker: true };\n      // console.log(\"File\", data.type.includes(\"image\"));\n      // console.log(\"File\", data.type.includes(\"image\"));\n      if (data.type.includes(\"image\")) {\n        imageCompression(data, options)\n          .then((result) => {\n            let formData = new FormData();\n            formData.append(\"file\", result);\n            return callUploadApi(formData);\n          })\n          .then((response) => {\n            if (response.status_code === 201) {\n              resolve(response);\n            } else {\n              reject(response);\n              showNotification(\"Error\", response.message, \"error\");\n            }\n          })\n          .catch((error) => {\n            console.log(\"File Upload Error!!!\\n\\n\", error);\n            reject(error);\n            showNotification(\"Error\", \"File upload failed\", \"error\");\n          });\n      } else {\n        let formData = new FormData();\n        formData.append(\"file\", data);\n        callUploadApi(formData)\n          .then((response) => {\n            if (response.status_code === 201) {\n              resolve(response);\n            } else {\n              reject(response);\n              showNotification(\"Error\", response.message, \"error\");\n            }\n          })\n          .catch((error) => {\n            console.log(\"File Upload Error!!!\\n\\n\", error);\n            reject(error);\n            showNotification(\"Error\", \"File upload failed\", \"error\");\n          });\n      }\n    });\n\n  const uploadAll = () => {\n    if (uploadStarted) return;\n\n    setProgressWidth(0);\n    setuploadCompleted(false);\n    setuploadStarted(true);\n    let pendingList = fileList.filter((i) => i.status === 0);\n    let progressDiv = pendingList.length ? 100 / pendingList.length : 0;\n    setshowProgress(true);\n\n    fileList.forEach((file) => {\n      if (file.status === 0) {\n        uploadFiles(file.fileData)\n          .then((response) => {\n            file.status = 1;\n            setProgressWidth((oldWidth) => oldWidth + progressDiv);\n            setSuccessUploads((oldList) => [...oldList, { ...file, fileId: response?.payload?.file_id }]);\n          })\n          .catch((error) => {\n            file.status = 2;\n            setProgressWidth((oldWidth) => oldWidth + progressDiv);\n            setFailedUploads((oldList) => [...oldList, file]);\n          });\n      }\n    });\n  };\n\n  return (\n    <React.Fragment>\n      {showLoader && <Spinner />}\n      <Row>\n        <Col xl={12}>\n          <Card className=\"rounded\">\n            <Card.Header>\n              <h5 className=\"text-primary\">Upload Files</h5>\n            </Card.Header>\n            <Card.Body className=\"p-4\">\n              {checkerAssigned ? (\n                <div>\n                  <div {...getRootProps()} className=\"drop-zone\">\n                    <input {...getInputProps()} />\n                    {isDragActive ? (\n                      <p>Drop the files here ...</p>\n                    ) : (\n                      <div className=\"text-center\">\n                        <i className=\"feather icon-upload-cloud upload-icon\"></i>\n                        <p className=\"font-weight-bold\" style={{ fontSize: 15 }}>\n                          Drag files here, or click to browse files\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"text-right\">\n                    <div style={{ fontSize: 11 }} className=\"my-2\">\n                      Supported file formats JPG, JPEG, PNG, JFIF, GIF, BMP, PDF, DOC, DOCX.\n                    </div>\n                    <div style={{ fontSize: 11 }} className=\"mb-2\">\n                      Max upload file size 50 MB\n                    </div>\n                  </div>\n\n                  <div className=\"upload-container pt-3\">\n                    {showProgress && (\n                      <div className=\"mb-4 progress\">\n                        <div role=\"progressbar\" className=\"progress-bar bg-success progress-bar-animated progress-bar-striped\" style={{ width: progressWidth + \"%\" }}></div>\n                      </div>\n                    )}\n                    {fileList.some((i) => i.status === 0) && (\n                      <div className=\"text-center mb-3\">\n                        <button className=\"btn btn-primary upload-btn\" onClick={uploadAll}>\n                          {uploadStarted && <span className=\"spinner-border spinner-border-sm mr-1\" role=\"status\"></span>}\n                          Upload Documents\n                        </button>\n                      </div>\n                    )}\n                  </div>\n                  {fileList.length > 0 && (\n                    <React.Fragment>\n                      <div className=\"files-list-container\">\n                        {fileList.map((file, key) => {\n                          return (\n                            <div key={key} className=\"file-item p-2\">\n                              <div className=\"d-flex\">\n                                <div className=\"file-icon\">\n                                  <i className=\"feather icon-file-text\" />\n                                </div>\n                                <div className=\"file-details\">\n                                  <div className=\"file-name\">{file.fileData.name}</div>\n                                  <div className=\"file-size\">{formatBytes(file.fileData.size)}</div>\n                                </div>\n                              </div>\n                              <div className={`upload-status ${file.status === 1 ? \"text-success\" : file.status === 2 ? \"text-danger\" : \"text-primary\"}`}>\n                                <i className={`feather ${file.status === 1 ? \"icon-check-circle\" : file.status === 2 ? \"icon-x-circle\" : \"icon-upload-cloud\"}`} role=\"button\" title=\"Remove\" onClick={() => removeFailedFile(file)} />\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </div>\n                    </React.Fragment>\n                  )}\n                  {rejectedUploads.length > 0 && (\n                    <React.Fragment>\n                      <label className=\"text-danger my-3\">Rejected Files</label>\n                      <div className=\"files-list-container\">\n                        {rejectedUploads.map((file, key) => {\n                          return (\n                            <div key={key} className=\"file-item p-2\">\n                              <div className=\"d-flex\">\n                                <div className=\"file-icon\">\n                                  <i className=\"feather icon-file-text\" />\n                                </div>\n                                <div className=\"file-details\">\n                                  <div className=\"file-name\">{file.fileData.name}</div>\n                                  <div className=\"file-size\">{formatBytes(file.fileData.size)}</div>\n                                </div>\n                              </div>\n                              <div className=\"d-flex align-items-center\">\n                                <div className=\"mr-4 text-danger\">{file.reason}</div>\n                                <div className=\"upload-status text-danger\" role=\"button\" title=\"Remove\" onClick={() => removeFile(file)}>\n                                  <i className=\"feather icon-x-circle\" />\n                                </div>\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </div>\n                    </React.Fragment>\n                  )}\n                </div>\n              ) : (\n                <div role=\"alert\" className=\"fade alert alert-danger show\">\n                  No Checker assigned yet. Please contact Administrator.\n                </div>\n              )}\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </React.Fragment>\n  );\n};\n\nexport default FileUpload;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/changepassword/index.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/usermanagement/admin/index.js",["848","849"],"import React, { useState, useEffect } from \"react\";\r\nimport { Row, Col, Card, Modal } from \"react-bootstrap\";\r\nimport { Grid, GridColumn as Column } from \"@progress/kendo-react-grid\";\r\nimport { process } from \"@progress/kendo-data-query\";\r\nimport moment from \"moment\";\r\n\r\nimport { callApi } from \"../../../services/apiService\";\r\nimport { ApiConstants } from \"../../../config/apiConstants\";\r\nimport { showNotification } from \"../../../services/toasterService\";\r\nimport { employeeStatus } from \"../../../enums/employeeStatus\";\r\nimport Spinner from \"../../../components/Spinner\";\r\nimport { DropdownFilterCell } from \"../../../components/CustomFilters/DropdownFilter\";\r\nimport UserForm from \"./form\";\r\nimport useWindowSize from \"../../../hooks/useWindowSize\";\r\n\r\nconst options = [\"Active\", \"Inactive\"];\r\nconst StatusFilterCell = (props) => (\r\n  <DropdownFilterCell {...props} data={options} defaultItem={\"All\"} />\r\n);\r\n\r\nconst AdminUsers = (props) => {\r\n  const [showLoader, setShowLoader] = useState(false);\r\n  const [usersList, setusersList] = useState([]);\r\n  const [usersState, setusersState] = useState({\r\n    skip: 0,\r\n    take: 10,\r\n  });\r\n  const [userGridData, setuserGridData] = useState(null);\r\n  const [showAddModal, setshowAddModal] = useState(false);\r\n  const [isEdit, setIsEdit] = useState(false);\r\n  const [selectedItem, setSelectedItem] = useState(null);\r\n\r\n  const [gridWidth, setgridWidth] = useState(1024);\r\n  const windowSize = useWindowSize();\r\n\r\n  const pagerSettings = {\r\n    buttonCount: 5,\r\n    info: true,\r\n    type: \"numeric\",\r\n    pageSizes: true,\r\n    previousNext: true,\r\n  };\r\n\r\n  useEffect(() => {\r\n    let resizeObserver = new ResizeObserver(() => {\r\n      handleResize();\r\n    });\r\n    resizeObserver.observe(document.querySelector(\".k-grid\"));\r\n    getUsers();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    loadGridData();\r\n  }, [usersList, usersState]);\r\n\r\n  const handleResize = () => {\r\n    let gridContext = document.querySelector(\".k-grid\");\r\n    if (gridContext?.offsetWidth > gridWidth) {\r\n      setgridWidth(gridContext.offsetWidth);\r\n    }\r\n  };\r\n\r\n  const setWidth = (minWidth) => {\r\n    if (windowSize.width < 992) return minWidth;\r\n    let dynamicWidth = gridWidth - 620;\r\n    let width = dynamicWidth > minWidth ? dynamicWidth : minWidth;\r\n    return width;\r\n  };\r\n\r\n  const onAddUser = () => {\r\n    closeModal();\r\n    getUsers();\r\n  };\r\n\r\n  const loadGridData = () => {\r\n    let updatedData = process(usersList, usersState);\r\n    setuserGridData(updatedData);\r\n  };\r\n\r\n  const pageChange = (event) => {\r\n    let updatedState = {\r\n      ...usersState,\r\n      skip: event.page.skip,\r\n      take: event.page.take,\r\n    };\r\n    setusersState(updatedState);\r\n  };\r\n\r\n  const filterChange = (event) => {\r\n    let updatedState = {\r\n      ...usersState,\r\n      filter: event.filter,\r\n    };\r\n    setusersState(updatedState);\r\n  };\r\n\r\n  const getUsers = () => {\r\n    setShowLoader(true);\r\n    callApi(\"get\", ApiConstants.admin.list, {})\r\n      .then((response) => {\r\n        setShowLoader(false);\r\n        if (response && response.status_code === 200) {\r\n          let data = response.payload.map((item) => ({\r\n            ...item,\r\n            status: item.is_active\r\n              ? employeeStatus.ACTIVE\r\n              : employeeStatus.INACTIVE,\r\n          }));\r\n          setusersList(data);\r\n        } else {\r\n          showNotification(\"Error\", response.message, \"error\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setShowLoader(false);\r\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\r\n      });\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setshowAddModal(false);\r\n    setIsEdit(false);\r\n    setSelectedItem(null);\r\n  };\r\n\r\n  const onEdit = (data) => {\r\n    setSelectedItem(data);\r\n    setIsEdit(true);\r\n    setshowAddModal(true);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {showLoader && <Spinner />}\r\n      <Row>\r\n        <Col xl={12}>\r\n          <Card className=\"rounded\">\r\n            <Card.Body className=\"p-4\">\r\n              <Row className=\"mb-3\">\r\n                <Col xl={12} className=\"text-right\">\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary mr-0\"\r\n                    style={{ height: 35, padding: \"5px 12px\" }}\r\n                    onClick={() => setshowAddModal(true)}>\r\n                    <i className=\"feather icon-plus\"></i>\r\n                    Add New User\r\n                  </button>\r\n                </Col>\r\n              </Row>\r\n              <Grid\r\n                data={userGridData}\r\n                skip={usersState.skip}\r\n                pageSize={usersState.take}\r\n                pageable={pagerSettings}\r\n                onPageChange={pageChange}\r\n                filterable={true}\r\n                filter={usersState.filter}\r\n                onFilterChange={filterChange}>\r\n                <Column\r\n                  field=\"id\"\r\n                  title=\"#\"\r\n                  width=\"60px\"\r\n                  filterable={false}\r\n                  cell={(props) => <td>{props.dataIndex + 1}</td>}\r\n                />\r\n                <Column field=\"name\" title=\"Name\" width=\"250\" />\r\n                <Column field=\"email\" title=\"Email\" width={setWidth(250)} />\r\n                <Column\r\n                  field=\"whatsapp_no\"\r\n                  title=\"Whatsapp No\"\r\n                  width=\"150\"\r\n                  cell={(props) => (\r\n                    <td>\r\n                      {props.dataItem.w_country_code +\r\n                        \" \" +\r\n                        props.dataItem.whatsapp_no}\r\n                    </td>\r\n                  )}\r\n                />\r\n                <Column\r\n                  field=\"join_date\"\r\n                  width=\"150\"\r\n                  filterable={false}\r\n                  title=\"Joining Date\"\r\n                  cell={(props) => (\r\n                    <td>\r\n                      <div>\r\n                        {moment(props.dataItem.join_date).format(\"DD-MMM-YYYY\")}\r\n                      </div>\r\n                    </td>\r\n                  )}\r\n                />\r\n                <Column\r\n                  field=\"status\"\r\n                  title=\"Status\"\r\n                  width=\"150\"\r\n                  filterCell={StatusFilterCell}\r\n                  cell={(props) => (\r\n                    <td>\r\n                      <div\r\n                        className={\r\n                          props.dataItem.is_active\r\n                            ? \"text-success\"\r\n                            : \"text-warning\"\r\n                        }>\r\n                        {props.dataItem.status}\r\n                      </div>\r\n                    </td>\r\n                  )}\r\n                />\r\n                <Column\r\n                  field=\"Actions\"\r\n                  filterable={false}\r\n                  width=\"120\"\r\n                  cell={(props) => (\r\n                    <td>\r\n                      <div className=\"action-panel\">\r\n                        <button\r\n                          type=\"button\"\r\n                          className=\"btn-icon btn btn-outline-primary\"\r\n                          title=\"Edit\"\r\n                          onClick={() => onEdit(props.dataItem)}>\r\n                          <i className=\"feather icon-edit-2\"></i>\r\n                        </button>\r\n                      </div>\r\n                    </td>\r\n                  )}\r\n                />\r\n              </Grid>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n      <Modal size=\"lg\" show={showAddModal} backdrop=\"static\" keyboard={true}>\r\n        <Modal.Body className=\"p-0\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn-icon btn close-btn\"\r\n            onClick={closeModal}>\r\n            <i className=\"feather icon-x-circle\"></i>\r\n          </button>\r\n          <UserForm\r\n            onSuccess={onAddUser}\r\n            onShowLoader={setShowLoader}\r\n            isEdit={isEdit}\r\n            dataItem={selectedItem}\r\n            {...props}\r\n          />\r\n        </Modal.Body>\r\n      </Modal>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AdminUsers;\r\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/usermanagement/validators/index.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/usermanagement/suppliers/index.js",["850","851"],"import React, { useState, useEffect } from \"react\";\nimport { Row, Col, Card, Modal } from \"react-bootstrap\";\nimport { Grid, GridColumn as Column } from \"@progress/kendo-react-grid\";\nimport { process } from \"@progress/kendo-data-query\";\n\nimport { callApi } from \"../../../services/apiService\";\nimport { ApiConstants } from \"../../../config/apiConstants\";\nimport { showNotification } from \"../../../services/toasterService\";\nimport { employeeStatus } from \"../../../enums/employeeStatus\";\nimport Spinner from \"../../../components/Spinner\";\nimport { DropdownFilterCell } from \"../../../components/CustomFilters/DropdownFilter\";\nimport UserForm from \"./form\";\n\nconst options = [\"Active\", \"Inactive\"];\nconst StatusFilterCell = (props) => (\n  <DropdownFilterCell {...props} data={options} defaultItem={\"All\"} />\n);\n\nconst Clients = (props) => {\n  const [showLoader, setShowLoader] = useState(false);\n  const [usersList, setusersList] = useState([]);\n  const [usersState, setusersState] = useState({\n    skip: 0,\n    take: 10,\n  });\n  const [userGridData, setuserGridData] = useState(null);\n  const [showAddModal, setshowAddModal] = useState(false);\n  const [isEdit, setIsEdit] = useState(false);\n  const [selectedItem, setSelectedItem] = useState(null);\n\n  const pagerSettings = {\n    buttonCount: 5,\n    info: true,\n    type: \"numeric\",\n    pageSizes: true,\n    previousNext: true,\n  };\n\n  useEffect(() => {\n    getUsers();\n  }, []);\n\n  useEffect(() => {\n    loadGridData();\n  }, [usersList, usersState]);\n\n  const onAddUser = () => {\n    closeModal();\n    getUsers();\n  };\n\n  const loadGridData = () => {\n    let updatedData = process(usersList, usersState);\n    setuserGridData(updatedData);\n  };\n\n  const pageChange = (event) => {\n    let updatedState = {\n      ...usersState,\n      skip: event.page.skip,\n      take: event.page.take,\n    };\n    setusersState(updatedState);\n  };\n\n  const filterChange = (event) => {\n    let updatedState = {\n      ...usersState,\n      filter: event.filter,\n    };\n    setusersState(updatedState);\n  };\n\n  const getUsers = () => {\n    setShowLoader(true);\n    callApi(\"get\", ApiConstants.supplier.list, {})\n      .then((response) => {\n        setShowLoader(false);\n        if (response && response.status_code === 200) {\n          let data = response.payload.map((item) => ({\n            ...item,\n            status: item.is_active\n              ? employeeStatus.ACTIVE\n              : employeeStatus.INACTIVE,\n          }));\n          setusersList(data);\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        setShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const closeModal = () => {\n    setshowAddModal(false);\n    setIsEdit(false);\n    setSelectedItem(null);\n  };\n\n  const onEdit = (data) => {\n    setSelectedItem(data);\n    setIsEdit(true);\n    setshowAddModal(true);\n  };\n\n  return (\n    <React.Fragment>\n      {showLoader && <Spinner />}\n      <Row>\n        <Col xl={12}>\n          <Card className=\"rounded\">\n            <Card.Body className=\"p-4\">\n              <Row className=\"mb-3\">\n                <Col xl={12} className=\"text-right\">\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-primary mr-0\"\n                    style={{ height: 35, padding: \"5px 12px\" }}\n                    onClick={() => setshowAddModal(true)}>\n                    <i className=\"feather icon-plus\"></i>\n                    Add Supplier\n                  </button>\n                </Col>\n              </Row>\n              <Grid\n                data={userGridData}\n                skip={usersState.skip}\n                pageable={true}\n                pageSize={usersState.take}\n                pageable={pagerSettings}\n                onPageChange={pageChange}\n                filterable={true}\n                filter={usersState.filter}\n                onFilterChange={filterChange}>\n                <Column\n                  field=\"id\"\n                  title=\"#\"\n                  width=\"60px\"\n                  filterable={false}\n                  cell={(props) => <td>{props.dataIndex + 1}</td>}\n                />\n                <Column field=\"name\" width=\"250\" title=\"Supplier Name\" />\n                <Column\n                  field=\"building_name\"\n                  width=\"200\"\n                  title=\"Building Name\"\n                />\n                <Column field=\"palce\" width=\"200\" title=\"Place / Street Name\" />\n                <Column field=\"p_o_box\" width=\"150\" title=\"PO Box\" />\n                <Column field=\"city\" width=\"200\" title=\"City\" />\n                <Column field=\"emirate\" width=\"200\" title=\"Emirate\" />\n                <Column\n                  field=\"whatsapp_no\"\n                  title=\"Whatsapp No\"\n                  width=\"200\"\n                  cell={(props) => (\n                    <td>\n                      {props.dataItem.w_country_code +\n                        \" \" +\n                        props.dataItem.whatsapp_no}\n                    </td>\n                  )}\n                />\n                <Column field=\"email\" width=\"250\" title=\"Email\" />\n                <Column field=\"trn\" width=\"180\" title=\"TRN Number\" />\n                <Column\n                  field=\"status\"\n                  title=\"Status\"\n                  filterCell={StatusFilterCell}\n                  width=\"150\"\n                  cell={(props) => (\n                    <td>\n                      <div\n                        className={\n                          props.dataItem.is_active\n                            ? \"text-success\"\n                            : \"text-warning\"\n                        }>\n                        {props.dataItem.status}\n                      </div>\n                    </td>\n                  )}\n                />\n                <Column\n                  field=\"Actions\"\n                  filterable={false}\n                  width=\"120\"\n                  cell={(props) => (\n                    <td>\n                      <div className=\"action-panel\">\n                        <button\n                          type=\"button\"\n                          className=\"btn-icon btn btn-outline-primary\"\n                          title=\"Edit\"\n                          onClick={() => onEdit(props.dataItem)}>\n                          <i className=\"feather icon-edit-2\"></i>\n                        </button>\n                        {/* <button\n                          type=\"button\"\n                          className=\"btn-icon btn btn-outline-danger\"\n                          title=\"Delete\">\n                          <i className=\"feather icon-trash\"></i>\n                        </button> */}\n                      </div>\n                    </td>\n                  )}\n                />\n              </Grid>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n      <Modal size=\"lg\" show={showAddModal} backdrop=\"static\" keyboard={true}>\n        <Modal.Body className=\"p-0\">\n          <button\n            type=\"button\"\n            className=\"btn-icon btn close-btn\"\n            onClick={closeModal}>\n            <i className=\"feather icon-x-circle\"></i>\n          </button>\n          <UserForm\n            onSuccess={onAddUser}\n            onShowLoader={setShowLoader}\n            isEdit={isEdit}\n            dataItem={selectedItem}\n            {...props}\n          />\n        </Modal.Body>\n      </Modal>\n    </React.Fragment>\n  );\n};\n\nexport default Clients;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/layouts/AdminLayout/index.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/dashboard/client/index.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/layouts/BoxLayout/index.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/dashboard/checker/index.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/dashboard/validator/index.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/client/rejected-entries/index.js",["852","853","854","855","856"],"import React, { useState, useEffect, useRef } from \"react\";\nimport { Row, Col, Card, Modal, OverlayTrigger, Popover, Accordion, Button, ListGroup, InputGroup, FormControl } from \"react-bootstrap\";\nimport { Grid, GridColumn as Column } from \"@progress/kendo-react-grid\";\nimport { process } from \"@progress/kendo-data-query\";\nimport moment from \"moment\";\nimport DatePicker from \"react-datepicker\";\nimport { FaAngleDown } from \"react-icons/fa\";\nimport { AiOutlineReload } from \"react-icons/ai\";\n\nimport { callApi } from \"../../../services/apiService\";\nimport { ApiConstants } from \"../../../config/apiConstants\";\nimport Spinner from \"../../../components/Spinner\";\nimport Preview from \"../../../components/Preview\";\nimport { showNotification } from \"../../../services/toasterService\";\nimport { entryStatus } from \"../../../enums/entryStatus\";\nimport useWindowSize from \"../../../hooks/useWindowSize\";\n\nconst ApprovedEntries = (props) => {\n\tconst [showLoader, setShowLoader] = useState(false);\n\tconst [entriesList, setEntriesList] = useState([]);\n\tconst [startDate, setStartDate] = useState(null);\n\tconst [endDate, setEndDate] = useState(null);\n\tconst [showPreview, setshowPreview] = useState(false);\n\tconst [selectedEntry, setselectedEntry] = useState(null);\n\tconst userObj = JSON.parse(localStorage.getItem(\"user\"));\n\tconst [gridState, setgridState] = useState({\n\t\tskip: 0,\n\t\ttake: 10,\n\t});\n\tconst [gridData, setgridData] = useState(null);\n\n\tconst [gridWidth, setgridWidth] = useState(1024);\n\tconst windowSize = useWindowSize();\n\tconst [accordionList, setAccordionList] = useState([]);\n\tconst [windowWidth, setWindowWidth] = useState(window.innerWidth);\n\n\tconst pagerSettings = {\n\t\tbuttonCount: 5,\n\t\tinfo: true,\n\t\ttype: \"numeric\",\n\t\tpageSizes: true,\n\t\tpreviousNext: true,\n\t};\n\n\tuseEffect(() => {\n\t\tsetWindowWidth(window.innerWidth > 992);\n\t\tlet resizeObserver = new ResizeObserver(() => {\n\t\t\thandleResize();\n\t\t});\n\t\tresizeObserver.observe(document.querySelector(\".k-grid\"));\n\t\tgetData();\n\t}, []);\n\n\tuseEffect(() => {\n\t\tloadGridData();\n\t}, [entriesList, gridState]);\n\n\tconst handleResize = () => {\n\t\tlet gridContext = document.querySelector(\".k-grid\");\n\t\tif (gridContext?.offsetWidth > gridWidth) {\n\t\t\tsetgridWidth(gridContext.offsetWidth);\n\t\t}\n\t};\n\n\tconst setWidth = (minWidth) => {\n\t\tif (windowSize.width < 992) return minWidth;\n\t\tlet dynamicWidth = gridWidth - 380;\n\t\tlet width = dynamicWidth > minWidth ? dynamicWidth : minWidth;\n\t\treturn width;\n\t};\n\n\tconst loadGridData = () => {\n\t\tlet updatedData = process(entriesList, gridState);\n\t\tsetgridData(updatedData);\n\t};\n\n\tconst pageChange = (event) => {\n\t\tlet updatedState = {\n\t\t\t...gridState,\n\t\t\tskip: event.page.skip,\n\t\t\ttake: event.page.take,\n\t\t};\n\t\tsetgridState({ ...updatedState });\n\t};\n\n\tconst filterChange = (event) => {\n\t\tlet updatedState = {\n\t\t\t...gridState,\n\t\t\tfilter: event.filter,\n\t\t};\n\t\tsetgridState(updatedState);\n\t};\n\n\tconst onSearchFilter = () => {\n\t\tlet dateFilters = [];\n\t\tif (startDate) {\n\t\t\tdateFilters.push({\n\t\t\t\tfield: \"created_at\",\n\t\t\t\toperator: \"gte\",\n\t\t\t\tvalue: moment(startDate).format(\"YYYY-MM-DD\"),\n\t\t\t});\n\t\t}\n\n\t\tif (endDate) {\n\t\t\tdateFilters.push({\n\t\t\t\tfield: \"created_at\",\n\t\t\t\toperator: \"lte\",\n\t\t\t\tvalue: moment(endDate).format(\"YYYY-MM-DD\"),\n\t\t\t});\n\t\t}\n\n\t\tlet updatedState = {\n\t\t\t...gridState,\n\t\t\tfilter: {\n\t\t\t\tlogic: \"and\",\n\t\t\t\tfilters: dateFilters,\n\t\t\t},\n\t\t};\n\t\tsetgridState(updatedState);\n\t};\n\n\tconst resetFilters = () => {\n\t\tlet updatedState = {\n\t\t\t...gridState,\n\t\t\tfilter: null,\n\t\t};\n\t\tsetgridState(updatedState);\n\t\tsetStartDate(null);\n\t\tsetEndDate(null);\n\t};\n\n\tconst getData = () => {\n\t\tsetShowLoader(true);\n\t\tcallApi(\"get\", ApiConstants.entry.clientrejectedlist, {}, true)\n\t\t\t.then((response) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tsetAccordionList(response.payload);\n\t\t\t\t\tsetEntriesList(response.payload);\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\tconst viewEntry = (entry) => {\n\t\tsetselectedEntry(entry);\n\t\tsetshowPreview(true);\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t{showLoader && <Spinner />}\n\t\t\t<Row>\n\t\t\t\t<Col xl={12}>\n\t\t\t\t\t<Card className=\"rounded\">\n\t\t\t\t\t\t<Card.Body className=\"p-4\">\n\t\t\t\t\t\t\t<Row className=\"mb-3\">\n\t\t\t\t\t\t\t\t<Col xs={12} md={4} xl={3}>\n\t\t\t\t\t\t\t\t\t<div className=\"date-picker-container\">\n\t\t\t\t\t\t\t\t\t\t<DatePicker\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"form-control mb-2\"\n\t\t\t\t\t\t\t\t\t\t\tminDate={new Date(userObj?.period?.start_period_date?.date)}\n\t\t\t\t\t\t\t\t\t\t\tmaxDate={new Date(userObj?.period?.end_period_date?.date)}\n\t\t\t\t\t\t\t\t\t\t\tplaceholderText=\"Start Date\"\n\t\t\t\t\t\t\t\t\t\t\tdateFormat=\"dd/MM/yyyy\"\n\t\t\t\t\t\t\t\t\t\t\tselected={startDate}\n\t\t\t\t\t\t\t\t\t\t\tonSelect={() => setEndDate(null)}\n\t\t\t\t\t\t\t\t\t\t\tonChange={setStartDate}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-calendar\"></i>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col xs={12} md={4} xl={3}>\n\t\t\t\t\t\t\t\t\t<div className=\"date-picker-container\">\n\t\t\t\t\t\t\t\t\t\t<DatePicker className=\"form-control mb-2\" minDate={startDate ? startDate : new Date(userObj?.period?.start_period_date?.date)} maxDate={new Date(userObj?.period?.end_period_date?.date)} placeholderText=\"End Date\" dateFormat=\"dd/MM/yyyy\" selected={endDate} onChange={setEndDate} />\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-calendar\"></i>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col xs={10} md={1} xl={1}>\n\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn-icon btn btn-primary search-button\" onClick={onSearchFilter}>\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-search\"></i>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col xs={2} md={1} xl={1}>\n\t\t\t\t\t\t\t\t\t{(startDate || endDate) && (\n\t\t\t\t\t\t\t\t\t\t<div className=\"text-muted filter-close-btn\" role=\"button\" onClick={resetFilters}>\n\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-x\"></i>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col md={1} xl={4} style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n\t\t\t\t\t\t\t\t\t<Button size=\"sm\" onClick={getData}>\n\t\t\t\t\t\t\t\t\t\t<AiOutlineReload size={`1.8em`} />\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t{windowWidth && (\n\t\t\t\t\t\t\t\t<Grid data={gridData} skip={gridState.skip} pageSize={gridState.take} pageable={pagerSettings} onPageChange={pageChange} filterable={false} filter={gridState.filter} onFilterChange={filterChange}>\n\t\t\t\t\t\t\t\t\t<Column field=\"id\" title=\"#\" width=\"60px\" filterable={false} cell={(props) => <td>{props.dataIndex + 1}</td>} />\n\t\t\t\t\t\t\t\t\t<Column\n\t\t\t\t\t\t\t\t\t\tfield=\"created_at\"\n\t\t\t\t\t\t\t\t\t\tfilterable={false}\n\t\t\t\t\t\t\t\t\t\twidth={setWidth(180)}\n\t\t\t\t\t\t\t\t\t\ttitle=\"Entry Date\"\n\t\t\t\t\t\t\t\t\t\tcell={(props) => (\n\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t<div>{moment(props.dataItem.created_at).format(\"DD-MMM-YYYY\")}</div>\n\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Column\n\t\t\t\t\t\t\t\t\t\tfield=\"entry_status_id\"\n\t\t\t\t\t\t\t\t\t\ttitle=\"Status\"\n\t\t\t\t\t\t\t\t\t\twidth=\"200px\"\n\t\t\t\t\t\t\t\t\t\tcell={(props) => (\n\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"d-flex align-items-center\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{props.dataItem.entry_status_id === entryStatus.REJECTED && <div className=\"text-danger\">Rejected</div>}\n\t\t\t\t\t\t\t\t\t\t\t\t\t&nbsp;\n\t\t\t\t\t\t\t\t\t\t\t\t\t{props.dataItem.comment && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<OverlayTrigger\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttrigger=\"click\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplacement=\"top\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trootClose={true}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toverlay={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Popover>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Popover.Content>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"p-2\">{props.dataItem.comment}</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Popover.Content>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Popover>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-info text-primary\" style={{ fontSize: 16, cursor: \"pointer\" }}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</OverlayTrigger>\n\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Column\n\t\t\t\t\t\t\t\t\t\tfield=\"View\"\n\t\t\t\t\t\t\t\t\t\ttitle=\"View\"\n\t\t\t\t\t\t\t\t\t\tfilterable={false}\n\t\t\t\t\t\t\t\t\t\twidth=\"120\"\n\t\t\t\t\t\t\t\t\t\tcell={(props) => (\n\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"action-panel\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn-icon btn btn-outline-primary\" title=\"View\" onClick={() => viewEntry(props.dataItem)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-eye\"></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{!windowWidth && (\n\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t<Accordion defaultActiveKey=\"0\">\n\t\t\t\t\t\t\t\t\t\t\t{accordionList &&\n\t\t\t\t\t\t\t\t\t\t\t\taccordionList.length > 0 &&\n\t\t\t\t\t\t\t\t\t\t\t\taccordionList.map((row) => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Card key={row.id} style={{ marginBottom: 4 }}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Accordion.Toggle as={Card.Header} style={{ backgroundColor: \"#7599b1\", color: \"#ffffff\", padding: \"8px 16px\" }} eventKey={row.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{moment(row.invoice_date).format(\"DD-MMM-YYYY\")}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button variant=\"outline-light\" size=\"sm\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<FaAngleDown />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Accordion.Toggle>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Accordion.Collapse eventKey={row.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"action-panel\" style={{ dispaly: \"flex\", justifyContent: \"flex-end\", marginBottom: 16 }}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn btn-outline-primary\" title=\"View\" onClick={() => viewEntry(row)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tView <i className=\"feather icon-eye\"></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{ padding: \"0 16px 0 8px\" }}>Entry Date:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span> {moment(row.invoice_date).format(\"DD-MMM-YYYY\")}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item style={{ display: \"flex\" }}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{ padding: \"0 16px 0 8px\" }}>Status:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"d-flex align-items-center\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{row.entry_status_id === entryStatus.REJECTED && <div className=\"text-danger\">Rejected</div>}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&nbsp;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{row.comment && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<OverlayTrigger\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttrigger=\"click\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplacement=\"top\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trootClose={true}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toverlay={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Popover>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Popover.Content>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"p-2\">{row.comment}</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Popover.Content>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Popover>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-info text-primary\" style={{ fontSize: 16, cursor: \"pointer\" }}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</OverlayTrigger>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Accordion.Collapse>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</Accordion>\n\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t</Card>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t<Modal size=\"lg\" show={showPreview} backdrop=\"static\" keyboard={true}>\n\t\t\t\t<Modal.Body className=\"p-0\">\n\t\t\t\t\t<button type=\"button\" className=\"btn-icon btn close-btn\" onClick={() => setshowPreview(false)}>\n\t\t\t\t\t\t<i className=\"feather icon-x-circle\"></i>\n\t\t\t\t\t</button>\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Col sm={12}>\n\t\t\t\t\t\t\t<div className=\"px-4 py-5\">\n\t\t\t\t\t\t\t\t<Preview source={selectedEntry?.file_path} />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Row>\n\t\t\t\t</Modal.Body>\n\t\t\t</Modal>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default ApprovedEntries;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/client/recent-entries/index.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/client/approved-entries/index.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/client/pending-entries/index.js",["857"],"import React, { useState, useEffect } from \"react\";\nimport { Row, Col, Card, Modal, Accordion, Button, ListGroup, InputGroup, FormControl } from \"react-bootstrap\";\nimport { Grid, GridColumn as Column } from \"@progress/kendo-react-grid\";\nimport { process } from \"@progress/kendo-data-query\";\nimport moment from \"moment\";\nimport DatePicker from \"react-datepicker\";\nimport { FaAngleDown } from \"react-icons/fa\";\nimport { AiOutlineReload } from \"react-icons/ai\";\n\nimport { callApi } from \"../../../services/apiService\";\nimport { ApiConstants } from \"../../../config/apiConstants\";\nimport { showNotification } from \"../../../services/toasterService\";\nimport Spinner from \"../../../components/Spinner\";\nimport Preview from \"../../../components/Preview\";\nimport FileIcon from \"../../../components/FileIcon\";\nimport useWindowSize from \"../../../hooks/useWindowSize\";\n\nconst PendingEntries = (props) => {\n\tconst [showLoader, setShowLoader] = useState(false);\n\tconst [entriesList, setEntriesList] = useState([]);\n\tconst [startDate, setStartDate] = useState(null);\n\tconst [endDate, setEndDate] = useState(null);\n\tconst [showPreview, setshowPreview] = useState(false);\n\tconst [selectedEntry, setselectedEntry] = useState(null);\n\tconst [showDeleteConfirm, setDeleteConfirm] = useState(false);\n\n\tconst [accordionList, setAccordionList] = useState([]);\n\tconst [windowWidth, setWindowWidth] = useState(window.innerWidth);\n\n\tconst userObj = JSON.parse(localStorage.getItem(\"user\"));\n\tconst [gridState, setgridState] = useState({ skip: 0, take: 10 });\n\tconst [gridData, setgridData] = useState(null);\n\tconst [gridWidth, setgridWidth] = useState(1024);\n\tconst windowSize = useWindowSize();\n\n\tconst pagerSettings = { buttonCount: 5, info: true, type: \"numeric\", pageSizes: true, previousNext: true };\n\n\tconst handleResize = React.useCallback(() => {\n\t\tlet gridContext = document.querySelector(\".k-grid\");\n\t\tif (gridContext?.offsetWidth > gridWidth) {\n\t\t\tsetgridWidth(gridContext.offsetWidth);\n\t\t}\n\t}, [gridWidth]);\n\tuseEffect(() => {\n\t\tsetWindowWidth(window.innerWidth > 992);\n\t\tlet resizeObserver = new ResizeObserver(() => {\n\t\t\thandleResize();\n\t\t});\n\t\tresizeObserver.observe(document.querySelector(\".k-grid\"));\n\t\tgetData();\n\t}, [handleResize]);\n\n\tuseEffect(() => {\n\t\tsetgridData(process(entriesList, gridState));\n\t}, [entriesList, gridState]);\n\n\tconst setWidth = (minWidth) => {\n\t\tif (windowSize.width < 992) return minWidth;\n\t\tlet dynamicWidth = gridWidth - 480;\n\t\tlet width = dynamicWidth > minWidth ? dynamicWidth : minWidth;\n\t\treturn width;\n\t};\n\n\tconst pageChange = (event) => setgridState({ ...gridState, skip: event.page.skip, take: event.page.take });\n\n\tconst onSearchFilter = () => {\n\t\tlet dateFilters = [];\n\t\tif (startDate) {\n\t\t\tdateFilters.push({ field: \"created_at\", operator: \"gte\", value: moment(startDate).format(\"YYYY-MM-DD\") });\n\t\t}\n\n\t\tif (endDate) {\n\t\t\tdateFilters.push({ field: \"created_at\", operator: \"lte\", value: moment(endDate).format(\"YYYY-MM-DD\") });\n\t\t}\n\n\t\tlet updatedState = { ...gridState, filter: { logic: \"and\", filters: dateFilters } };\n\t\tsetgridState(updatedState);\n\t};\n\n\tconst resetFilters = () => {\n\t\tlet updatedState = { ...gridState, filter: null };\n\t\tsetgridState(updatedState);\n\t\tsetStartDate(null);\n\t\tsetEndDate(null);\n\t};\n\n\tconst getData = () => {\n\t\tsetShowLoader(true);\n\t\tcallApi(\"get\", ApiConstants.entry.clientpendinglist, {}, true)\n\t\t\t.then((response) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tsetAccordionList(response.payload);\n\t\t\t\t\tsetEntriesList(response.payload);\n\t\t\t\t\tconsole.log(response.payload);\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\tconst viewEntry = (entry) => {\n\t\tsetselectedEntry(entry);\n\t\tsetshowPreview(true);\n\t};\n\n\tconst deleteEntry = (entry) => {\n\t\tsetselectedEntry(entry);\n\t\tsetDeleteConfirm(true);\n\t};\n\n\tconst deleteData = () => {\n\t\tsetShowLoader(true);\n\t\tcallApi(\"post\", ApiConstants.entry.clientdeleteentry, { entry_id: selectedEntry.id }, true)\n\t\t\t.then((response) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tshowNotification(\"Success\", response.message, \"success\");\n\t\t\t\t\tgetData();\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t{showLoader && <Spinner />}\n\t\t\t<Row>\n\t\t\t\t<Col xl={12}>\n\t\t\t\t\t<Card className=\"rounded\">\n\t\t\t\t\t\t<Card.Body className=\"p-4\">\n\t\t\t\t\t\t\t<Row className=\"mb-3\">\n\t\t\t\t\t\t\t\t<Col xs={12} md={4} xl={3}>\n\t\t\t\t\t\t\t\t\t<div className=\"date-picker-container\">\n\t\t\t\t\t\t\t\t\t\t<DatePicker\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"form-control mb-2\"\n\t\t\t\t\t\t\t\t\t\t\tminDate={new Date(userObj?.period?.start_period_date?.date)}\n\t\t\t\t\t\t\t\t\t\t\tmaxDate={new Date(userObj?.period?.end_period_date?.date)}\n\t\t\t\t\t\t\t\t\t\t\tplaceholderText=\"Start Date\"\n\t\t\t\t\t\t\t\t\t\t\tdateFormat=\"dd/MM/yyyy\"\n\t\t\t\t\t\t\t\t\t\t\tselected={startDate}\n\t\t\t\t\t\t\t\t\t\t\tonSelect={() => setEndDate(null)}\n\t\t\t\t\t\t\t\t\t\t\tonChange={setStartDate}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-calendar\"></i>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col xs={12} md={4} xl={3}>\n\t\t\t\t\t\t\t\t\t<div className=\"date-picker-container\">\n\t\t\t\t\t\t\t\t\t\t<DatePicker className=\"form-control mb-2\" minDate={startDate ? startDate : new Date(userObj?.period?.start_period_date?.date)} maxDate={new Date(userObj?.period?.end_period_date?.date)} placeholderText=\"End Date\" dateFormat=\"dd/MM/yyyy\" selected={endDate} onChange={setEndDate} />\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-calendar\"></i>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col xs={10} md={1} xl={1}>\n\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn-icon btn btn-primary search-button\" onClick={onSearchFilter}>\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-search\"></i>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t\t\t\t<Col xs={2} md={1} xl={1}>\n\t\t\t\t\t\t\t\t\t{(startDate || endDate) && (\n\t\t\t\t\t\t\t\t\t\t<div className=\"filter-close-btn\" role=\"button\" onClick={resetFilters}>\n\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-x\"></i>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col md={1} xl={4} style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n\t\t\t\t\t\t\t\t\t<Button size=\"sm\" onClick={getData}>\n\t\t\t\t\t\t\t\t\t\t<AiOutlineReload size={`1.8em`} />\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t{windowWidth && (\n\t\t\t\t\t\t\t\t<Grid data={gridData} skip={gridState.skip} pageSize={gridState.take} pageable={pagerSettings} onPageChange={pageChange}>\n\t\t\t\t\t\t\t\t\t<Column field=\"id\" title=\"#\" width=\"120px\" filterable={false} cell={(props) => <td>{props.dataIndex + 1}</td>} />\n\t\t\t\t\t\t\t\t\t<Column field=\"created_at\" title=\"Entry Date\" cell={(props) => <td>{moment(props.dataItem.created_at).format(\"DD-MMM-YYYY\")}</td>} />\n\t\t\t\t\t\t\t\t\t{/* <Column\n\t\t\t\t\t\t\t\t\t\tfield=\"file_path\"\n\t\t\t\t\t\t\t\t\t\ttitle=\"Document\"\n\t\t\t\t\t\t\t\t\t\twidth={setWidth(590)}\n\t\t\t\t\t\t\t\t\t\tcell={(props) => (\n\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t<FileIcon className=\"mr-2\" source={props.dataItem.file_path} style={{width: 25}} />\n\t\t\t\t\t\t\t\t\t\t\t\t{props.dataItem.file_path.split(\"/\")[1]}\n\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t/> */}\n\t\t\t\t\t\t\t\t\t<Column\n\t\t\t\t\t\t\t\t\t\tfield=\"View\"\n\t\t\t\t\t\t\t\t\t\ttitle=\"View\"\n\t\t\t\t\t\t\t\t\t\tfilterable={false}\n\t\t\t\t\t\t\t\t\t\tcell={(props) => (\n\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn-icon btn btn-outline-primary\" title=\"View\" onClick={() => viewEntry(props.dataItem)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-eye\"></i>\n\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Column\n\t\t\t\t\t\t\t\t\t\tfield=\"Actions\"\n\t\t\t\t\t\t\t\t\t\ttitle=\"Actions\"\n\t\t\t\t\t\t\t\t\t\tfilterable={false}\n\t\t\t\t\t\t\t\t\t\tcell={(props) => (\n\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn-icon btn btn-outline-danger\" title=\"Delete\" onClick={() => deleteEntry(props.dataItem)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-trash\"></i>\n\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{!windowWidth && (\n\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t<InputGroup className=\"mb-2\">\n\t\t\t\t\t\t\t\t\t\t\t<FormControl\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Invoice Number\"\n\t\t\t\t\t\t\t\t\t\t\t\taria-label=\"Invoice Number\"\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetAccordionList(entriesList);\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn event.target.value ? setAccordionList(accordionList?.filter((data) => data.invoice_number?.includes(event.target.value))) : setAccordionList(entriesList);\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</InputGroup>\n\t\t\t\t\t\t\t\t\t\t<InputGroup className=\"mb-2\">\n\t\t\t\t\t\t\t\t\t\t\t<FormControl\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Amount\"\n\t\t\t\t\t\t\t\t\t\t\t\taria-label=\"Amount\"\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetAccordionList(entriesList);\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn event.target.value ? setAccordionList(accordionList?.filter((data) => data.amount?.includes(event.target.value))) : setAccordionList(entriesList);\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</InputGroup>\n\n\t\t\t\t\t\t\t\t\t\t<Accordion defaultActiveKey=\"0\">\n\t\t\t\t\t\t\t\t\t\t\t{accordionList &&\n\t\t\t\t\t\t\t\t\t\t\t\taccordionList.length > 0 &&\n\t\t\t\t\t\t\t\t\t\t\t\taccordionList.map((row) => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Card key={row.id} style={{ marginBottom: 4 }}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Accordion.Toggle as={Card.Header} style={{ backgroundColor: \"#7599b1\", color: \"#ffffff\", padding: \"8px 16px\" }} eventKey={row.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{moment(row.created_at).format(\"DD-MMM-YYYY\")}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button variant=\"outline-light\" size=\"sm\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<FaAngleDown />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Accordion.Toggle>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Accordion.Collapse eventKey={row.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"action-panel\" style={{ dispaly: \"flex\", justifyContent: \"flex-end\", marginBottom: 16 }}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn btn-outline-primary\" title=\"View\" onClick={() => viewEntry(row)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tView <i className=\"feather icon-eye\"></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn btn-outline-danger\" title=\"Delete\" onClick={() => deleteEntry(row)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tDelete <i className=\"feather icon-trash\"></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{ padding: \"0 16px 0 8px\" }}>Entry Date:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span> {moment(row.created_at).format(\"DD-MMM-YYYY\")}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{ padding: \"0 16px 0 8px\" }}>Document:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<FileIcon className=\"mr-2\" source={row.file_path} style={{ width: 25 }} />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{row.file_path.split(\"/\")[1]}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Accordion.Collapse>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</Accordion>\n\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t</Card>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t<Modal size=\"lg\" show={showPreview} backdrop=\"static\" keyboard={true}>\n\t\t\t\t<Modal.Body className=\"p-0\">\n\t\t\t\t\t<button type=\"button\" className=\"btn-icon btn close-btn\" onClick={() => setshowPreview(false)}>\n\t\t\t\t\t\t<i className=\"feather icon-x-circle\"></i>\n\t\t\t\t\t</button>\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Col sm={12}>\n\t\t\t\t\t\t\t<div className=\"px-4 py-5\">\n\t\t\t\t\t\t\t\t<Preview source={selectedEntry?.file_path} />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Row>\n\t\t\t\t</Modal.Body>\n\t\t\t</Modal>\n\t\t\t<Modal size=\"md\" show={showDeleteConfirm} backdrop=\"static\" keyboard={true}>\n\t\t\t\t<Modal.Header>\n\t\t\t\t\t<h5 className=\"card-title\">Confirm Delete</h5>\n\t\t\t\t</Modal.Header>\n\t\t\t\t<Modal.Body>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<span>Are you sure that to delete this entry?</span>\n\t\t\t\t\t</div>\n\t\t\t\t</Modal.Body>\n\t\t\t\t<Modal.Footer>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<button className=\"btn btn-outline-primary\" onClick={() => setDeleteConfirm(false)}>\n\t\t\t\t\t\t\tNo\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn btn-primary\"\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tsetDeleteConfirm(false);\n\t\t\t\t\t\t\t\tdeleteData();\n\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\tYes\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</Modal.Footer>\n\t\t\t</Modal>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default PendingEntries;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/client/summary/index.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/clientList/index.js",["858","859","860","861","862","863"],"import React, {useState, useEffect} from \"react\";\nimport {Link} from \"react-router-dom\";\nimport {Row, Col, Card, Modal, Accordion, Button, ListGroup, FormControl, InputGroup} from \"react-bootstrap\";\nimport {Grid, GridColumn as Column} from \"@progress/kendo-react-grid\";\nimport {process} from \"@progress/kendo-data-query\";\nimport moment from \"moment\";\nimport DatePicker from \"react-datepicker\";\nimport {FaAngleDown} from \"react-icons/fa\";\n\nimport {callApi} from \"../../../services/apiService\";\nimport {showNotification} from \"../../../services/toasterService\";\nimport {ApiConstants} from \"../../../config/apiConstants\";\nimport {clientStatus} from \"../../../enums/clientStatus\";\nimport Spinner from \"../../../components/Spinner\";\nimport {DropdownFilterCell} from \"../../../components/CustomFilters/DropdownFilter\";\nimport ClientForm from \"./form\";\n\nconst options = [\"Approved\", \"Registered\"];\nconst StatusFilterCell = (props) => <DropdownFilterCell {...props} data={options} defaultItem={\"All\"} />;\n\nconst Clients = (props) => {\n\tconst [showLoader, setShowLoader] = useState(false);\n\tconst [clientsList, setClientsList] = useState([]);\n\tconst [startDate, setStartDate] = useState(null);\n\tconst [endDate, setEndDate] = useState(null);\n\tconst [clientsState, setClientsState] = useState({skip: 0, take: 10});\n\tconst [clientsGridData, setclientsGridData] = useState(null);\n\tconst [showEditModal, setshowEditModal] = useState(false);\n\tconst [isEdit, setIsEdit] = useState(false);\n\tconst [selectedItem, setSelectedItem] = useState(null);\n\tconst [windowWidth, setWindowWidth] = useState(window.innerWidth);\n\tconst [accordionList, setAccordionList] = useState([]);\n\n\tReact.useLayoutEffect(() => {\n\t\tsetWindowWidth(window.innerWidth > 992);\n\t}, []);\n\n\tconst pagerSettings = {buttonCount: 5, info: true, type: \"numeric\", pageSizes: true, previousNext: true};\n\n\tuseEffect(() => {\n\t\tgetClients();\n\t}, []);\n\n\tuseEffect(() => {\n\t\tsetclientsGridData(process(clientsList, clientsState));\n\t}, [clientsList, clientsState]);\n\n\tconst pageChange = (event) => {\n\t\tsetClientsState({...clientsState, skip: event.page.skip, take: event.page.take});\n\t};\n\n\tconst filterChange = (event) => {\n\t\tsetClientsState({...clientsState, filter: event.filter});\n\t};\n\n\tconst resetFilters = () => {\n\t\tsetClientsState({...clientsState, filter: null});\n\t\tsetStartDate(null);\n\t\tsetEndDate(null);\n\t};\n\n\tconst onSearchFilter = () => {\n\t\tlet dateFilters = [];\n\t\tif (windowWidth) {\n\t\t\tif (startDate) {\n\t\t\t\tdateFilters.push({field: \"join_date\", operator: \"gte\", value: moment(startDate).format(\"YYYY-MM-DD\")});\n\t\t\t}\n\t\t\tif (endDate) {\n\t\t\t\tdateFilters.push({field: \"join_date\", operator: \"lte\", value: moment(endDate).format(\"YYYY-MM-DD\")});\n\t\t\t}\n\t\t\tlet updatedState = {...clientsState, filter: {logic: \"and\", filters: dateFilters}};\n\t\t\tsetClientsState(updatedState);\n\t\t} else {\n\t\t\tif (startDate && !endDate) {\n\t\t\t\tsetAccordionList(accordionList.filter((data) => new Date(data.join_date) >= new Date(startDate)));\n\t\t\t}\n\t\t\tif (endDate && !startDate) {\n\t\t\t\tsetAccordionList(accordionList.filter((data) => new Date(data.join_date) < new Date(endDate)));\n\t\t\t}\n\t\t\tif (endDate && startDate) {\n\t\t\t\tsetAccordionList(accordionList.filter((data) => new Date(data.join_date) >= new Date(startDate) && new Date(data.join_date) <= new Date(endDate)));\n\t\t\t}\n\t\t}\n\t};\n\tconst formatVatPeriod = (val) => {\n\t\tlet vat_label;\n\t\tswitch (val) {\n\t\t\tcase 1:\n\t\t\t\tvat_label = \"Monthly\";\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tvat_label = \"Quarterly\";\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\tvat_label = \"Half Yearly\";\n\t\t\t\tbreak;\n\t\t\tcase 12:\n\t\t\t\tvat_label = \"Yearly\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tvat_label = \"NA\";\n\t\t\t\tbreak;\n\t\t}\n\t\treturn vat_label;\n\t};\n\tconst getClients = () => {\n\t\tsetShowLoader(true);\n\t\tcallApi(\"get\", ApiConstants.checker.clientlist, {}, true)\n\t\t\t.then((response) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tlet data = response.payload.map((item) => ({...item, status: item.verified_on ? clientStatus.APPROVED : clientStatus.REGISTERED}));\n\t\t\t\t\tlet vat_data = response.payload.map((item) => ({...item, vat_type: formatVatPeriod(item.vat_period)}));\n\t\t\t\t\tsetClientsList(vat_data);\n\t\t\t\t\tsetAccordionList(data);\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\tconst closeModal = () => {\n\t\tsetshowEditModal(false);\n\t\tsetIsEdit(false);\n\t\tsetSelectedItem(null);\n\t};\n\n\tconst onEdit = (data) => {\n\t\tsetSelectedItem(data);\n\t\tsetIsEdit(true);\n\t\tsetshowEditModal(true);\n\t};\n\n\tconst onEditUser = () => {\n\t\tcloseModal();\n\t\tgetClients();\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t{showLoader && <Spinner />}\n\t\t\t<Row>\n\t\t\t\t<Col xl={12}>\n\t\t\t\t\t<Card className=\"rounded\">\n\t\t\t\t\t\t<Card.Body className=\"p-4\">\n\t\t\t\t\t\t\t{/* <Row className=\"mb-3\">\n                <Col xs={12} md={4} xl={3}>\n                  <div className=\"date-picker-container\">\n                    <DatePicker className=\"form-control mb-2\" placeholderText=\"Start Date\" dateFormat=\"dd/MM/yyyy\" selected={startDate} onSelect={() => setEndDate(null)} onChange={setStartDate} />\n                    <i className=\"feather icon-calendar\"></i>\n                  </div>\n                </Col>\n                <Col xs={12} md={4} xl={3}>\n                  <div className=\"date-picker-container\">\n                    <DatePicker className=\"form-control mb-2\" minDate={startDate} placeholderText=\"End Date\" dateFormat=\"dd/MM/yyyy\" selected={endDate} onChange={setEndDate} />\n                    <i className=\"feather icon-calendar\"></i>\n                  </div>\n                </Col>\n                <Col xs={12} md={1} xl={1}>\n                  <button type=\"button\" onClick={onSearchFilter} className=\"btn-icon btn btn-primary search-button\">\n                    <i className=\"feather icon-search\"></i>\n                  </button>\n                </Col>\n                <Col xs={2} md={1} xl={1}>\n                  {(startDate || endDate) && (\n                    <div className=\"filter-close-btn\" role=\"button\" onClick={resetFilters}>\n                      <i className=\"feather icon-x\"></i>\n                    </div>\n                  )}\n                </Col>\n              </Row> */}\n\n\t\t\t\t\t\t\t{windowWidth && (\n\t\t\t\t\t\t\t\t<Grid data={clientsGridData} skip={clientsState.skip} pageable={pagerSettings} pageSize={clientsState.take} onPageChange={pageChange} filterable={true} filter={clientsState.filter} onFilterChange={filterChange}>\n\t\t\t\t\t\t\t\t\t<Column field=\"id\" title=\"#\" width=\"60px\" filterable={false} cell={(props) => <td>{props.dataIndex + 1}</td>} />\n\t\t\t\t\t\t\t\t\t<Column field=\"name\" width=\"250\" title=\"Company Name\" />\n\t\t\t\t\t\t\t\t\t<Column field=\"trn_number\" width=\"160\" title=\"TRN\" />\n\t\t\t\t\t\t\t\t\t<Column field=\"emirate\" width=\"160\" title=\"Emirates\" />\n\t\t\t\t\t\t\t\t\t<Column field=\"vat_type\" width=\"160\" title=\"VAT Period\" />\n\t\t\t\t\t\t\t\t\t<Column field=\"to\" width=\"160\" title=\"Next Due Date\" />\n\t\t\t\t\t\t\t\t\t{/* <Column field=\"contact_person\" width=\"200\" title=\"Contact Person\" /> */}\n\t\t\t\t\t\t\t\t\t{/* <Column field=\"join_date\" width=\"150\" filterable={false} title=\"Join Date\" cell={(props) => <td>{moment(props.dataItem.join_date).format(\"DD-MMM-YYYY\")}</td>} /> */}\n\t\t\t\t\t\t\t\t\t{/* <Column field=\"email\" width=\"300\" title=\"Email\" /> */}\n\t\t\t\t\t\t\t\t\t{/* <Column field=\"cp_mobile\" width=\"180\" title=\"Contact No\" cell={(props) => <td>{`${props.dataItem.cp_country_code} ${props.dataItem.cp_mobile}`}</td>} /> */}\n\t\t\t\t\t\t\t\t\t{/* <Column field=\"whatsapp_no\" width=\"180\" title=\"WhatsApp No\" cell={(props) => <td>{`${props.dataItem.w_country_code} ${props.dataItem.whatsapp_no}`}</td>} /> */}\n\t\t\t\t\t\t\t\t\t{/* <Column\n                    field=\"status\"\n                    title=\"Status\"\n                    filterCell={StatusFilterCell}\n                    width=\"150\"\n                    cell={(props) => (\n                      <td>\n                        <div className={props.dataItem.verified_on ? \"text-success\" : \"text-warning\"}>{props.dataItem.status}</div>\n                      </td>\n                    )}\n                  /> */}\n\t\t\t\t\t\t\t\t\t{/* <Column\n                    field=\"Actions\"\n                    filterable={false}\n                    width=\"120\"\n                    cell={(props) => (\n                      <td>\n                        <div className=\"action-panel\">\n                          <Link className=\"text-primary\" to={\"/checker/clients/profile/\" + props.dataItem.id}>\n                            <button type=\"button\" className=\"btn-icon btn btn-outline-primary\" title=\"Edit\">\n                              <i className=\"feather icon-eye\"></i>\n                            </button>\n                          </Link>\n                          <button type=\"button\" className=\"btn-icon btn btn-outline-primary\" title=\"Edit\" onClick={() => onEdit(props.dataItem)}>\n                            <i className=\"feather icon-edit-2\"></i>\n                          </button>\n                        </div>\n                      </td>\n                    )}\n                  /> */}\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{!windowWidth && (\n\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t<InputGroup className=\"mb-2\">\n\t\t\t\t\t\t\t\t\t\t\t<FormControl\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Company\"\n\t\t\t\t\t\t\t\t\t\t\t\taria-label=\"Company\"\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetAccordionList(clientsGridData.data);\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn event.target.value ? setAccordionList(clientsGridData.data?.filter((data) => data.name?.includes(event.target.value))) : setAccordionList(clientsGridData.data);\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</InputGroup>\n\t\t\t\t\t\t\t\t\t\t<InputGroup className=\"mb-2\">\n\t\t\t\t\t\t\t\t\t\t\t<FormControl\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"TRN\"\n\t\t\t\t\t\t\t\t\t\t\t\taria-label=\"TRN\"\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetAccordionList(clientsGridData.data);\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn event.target.value ? setAccordionList(clientsGridData.data?.filter((data) => data.trn_number?.includes(event.target.value))) : setAccordionList(clientsGridData.data);\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</InputGroup>\n\n\t\t\t\t\t\t\t\t\t\t<InputGroup className=\"mb-2\">\n\t\t\t\t\t\t\t\t\t\t\t<FormControl\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Emirate\"\n\t\t\t\t\t\t\t\t\t\t\t\taria-label=\"Emirate\"\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetAccordionList(clientsGridData.data);\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn event.target.value ? setAccordionList(clientsGridData.data?.filter((data) => data.emirate?.includes(event.target.value))) : setAccordionList(clientsGridData.data);\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</InputGroup>\n\n\t\t\t\t\t\t\t\t\t\t{/* <InputGroup className=\"mb-2\">\n                      <FormControl\n                        className=\"form-control\"\n                        placeholder=\"VAT Period\"\n                        aria-label=\"VAT-Period\"\n                        onChange={(event) => {\n                          setAccordionList(clientsGridData.data);\n                          return event.target.value ? setAccordionList(clientsGridData.data?.filter((data) => data.vat_period?.includes(event.target.value))) : setAccordionList(clientsGridData.data);\n                        }}\n                      />\n                    </InputGroup> */}\n\t\t\t\t\t\t\t\t\t\t{/* <InputGroup className=\"mb-2\">\n                      <FormControl\n                        className=\"form-control\"\n                        placeholder=\"WhatsApp Number\"\n                        aria-label=\"WhatsApp Number\"\n                        onChange={(event) => {\n                          setAccordionList(clientsGridData.data);\n                          return event.target.value ? setAccordionList(clientsGridData.data?.filter((data) => data.whatsapp_no?.includes(event.target.value))) : setAccordionList(clientsGridData.data);\n                        }}\n                      />\n                    </InputGroup> */}\n\t\t\t\t\t\t\t\t\t\t{/* <InputGroup className=\"mb-2\">\n                      <FormControl\n                        className=\"form-control\"\n                        placeholder=\"Validator\"\n                        aria-label=\"Validator\"\n                        onChange={(event) => {\n                          setAccordionList(clientsGridData.data);\n                          return event.target.value ? setAccordionList(clientsGridData.data?.filter((data) => data.validator_name?.includes(event.target.value))) : setAccordionList(clientsGridData.data);\n                        }}\n                      />\n                    </InputGroup> */}\n\n\t\t\t\t\t\t\t\t\t\t<Accordion defaultActiveKey=\"0\">\n\t\t\t\t\t\t\t\t\t\t\t{accordionList &&\n\t\t\t\t\t\t\t\t\t\t\t\taccordionList.length > 0 &&\n\t\t\t\t\t\t\t\t\t\t\t\taccordionList.map((row) => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Card key={row.id} style={{marginBottom: 4}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Accordion.Toggle as={Card.Header} style={{backgroundColor: \"#7599b1\", color: \"#ffffff\", padding: \"8px 16px\"}} eventKey={row.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div style={{display: \"flex\", justifyContent: \"space-between\"}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCompany: {row.name}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button variant=\"outline-light\" size=\"sm\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<FaAngleDown />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Accordion.Toggle>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Accordion.Collapse eventKey={row.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"action-panel\" style={{dispaly: \"flex\", justifyContent: \"flex-end\", marginBottom: 16}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn btn-outline-primary\" title=\"View\" onClick={() => onEdit(row)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-edit-2\"></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>TRN:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span> {row.trn_number}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>Joining Date:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span> {moment(row.join_date).format(\"DD-MMM-YYYY\")}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>Emirates:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span> {row.emirate}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>VAT Period:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span>{`${row.vat_period}`}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>Next Due Date:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span> {moment(row.join_date).format(\"DD-MMM-YYYY\")}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{/* <ListGroup.Item>\n                                    <div className=\"action-panel\">\n                                    <span style={{ padding: \"0 16px 0 8px\" }}>Actions:</span>\n                                      <Link className=\"text-primary\" to={\"/users/clients/profile/\" + row.id}>\n                                        <button type=\"button\" className=\"btn-icon btn btn-outline-primary\" title=\"Edit\">\n                                          <i className=\"feather icon-eye\"></i>\n                                        </button>\n                                      </Link>\n                                      <button type=\"button\" className=\"btn-icon btn btn-outline-primary\" title=\"Edit\" onClick={() => onEdit(row)}>\n                                        <i className=\"feather icon-edit-2\"></i>\n                                      </button>\n                                    </div>\n                                  </ListGroup.Item> */}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Accordion.Collapse>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</Accordion>\n\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t</Card>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t<Modal size=\"lg\" show={showEditModal} backdrop=\"static\" keyboard={true}>\n\t\t\t\t<Modal.Body className=\"p-0\">\n\t\t\t\t\t<button type=\"button\" className=\"btn-icon btn close-btn\" onClick={closeModal}>\n\t\t\t\t\t\t<i className=\"feather icon-x-circle\"></i>\n\t\t\t\t\t</button>\n\t\t\t\t\t<ClientForm onSuccess={onEditUser} onShowLoader={setShowLoader} isEdit={isEdit} dataItem={selectedItem} {...props} />\n\t\t\t\t</Modal.Body>\n\t\t\t</Modal>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default Clients;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/dashboard/admin/index.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/checked-entries/index.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/rejected-entries/index.js",["864","865","866","867","868","869","870","871","872"],"import React, {useState, useEffect} from \"react\";\nimport {Row, Col, Card, Modal, OverlayTrigger, Popover, Accordion, Button, ListGroup, InputGroup, FormControl} from \"react-bootstrap\";\nimport {Grid, GridColumn as Column} from \"@progress/kendo-react-grid\";\nimport {process} from \"@progress/kendo-data-query\";\nimport moment from \"moment\";\nimport DatePicker from \"react-datepicker\";\nimport Select from \"react-select\";\nimport {FaAngleDown} from \"react-icons/fa\";\nimport {AiOutlineReload} from \"react-icons/ai\";\nimport {callApi} from \"../../../services/apiService\";\nimport {ApiConstants} from \"../../../config/apiConstants\";\nimport Spinner from \"../../../components/Spinner\";\nimport Preview from \"../../../components/Preview\";\nimport {entryTypeList} from \"../../../enums/entryTypeList\";\nimport {entryTypes} from \"../../../enums/entryTypes\";\nimport {entryStatus} from \"../../../enums/entryStatus\";\nimport FileIcon from \"../../../components/FileIcon\";\nimport {showNotification} from \"../../../services/toasterService\";\nimport SalesForm from \"./forms/salesForm\";\nimport ExpenditureForm from \"./forms/expenditureForm\";\nimport PurchaseForm from \"./forms/purchaseForm\";\nimport useWindowSize from \"../../../hooks/useWindowSize\";\n\nconst RejectedEntries = (props) => {\n\tconst [showLoader, setShowLoader] = useState(false);\n\tconst [entriesList, setEntriesList] = useState([]);\n\tconst [startDate, setStartDate] = useState(null);\n\tconst [endDate, setEndDate] = useState(null);\n\tconst [showPreview, setshowPreview] = useState(false);\n\tconst [selectedEntry, setselectedEntry] = useState(null);\n\tconst [selectedEntryType, setselectedEntryType] = useState(\"\");\n\tconst [clientVatPeriod, setclientVatPeriod] = useState(null);\n\n\tconst [accordionList, setAccordionList] = useState([]);\n\tconst [windowWidth, setWindowWidth] = useState(window.innerWidth);\n\n\tReact.useLayoutEffect(() => {\n\t\tsetWindowWidth(window.innerWidth > 992);\n\t}, []);\n\n\tconst [gridState, setgridState] = useState({skip: 0, take: 10});\n\tconst [gridData, setgridData] = useState(null);\n\n\tconst [gridWidth, setgridWidth] = useState(1024);\n\tconst windowSize = useWindowSize();\n\n\tconst pagerSettings = {\n\t\tbuttonCount: 5,\n\t\tinfo: true,\n\t\ttype: \"numeric\",\n\t\tpageSizes: true,\n\t\tpreviousNext: true,\n\t};\n\tconst handleResize = React.useCallback(() => {\n\t\tlet gridContext = document.querySelector(\".k-grid\");\n\t\tif (gridContext?.offsetWidth > gridWidth) {\n\t\t\tsetgridWidth(gridContext.offsetWidth);\n\t\t}\n\t}, [gridWidth]);\n\n\tuseEffect(() => {\n\t\tlet resizeObserver = new ResizeObserver(() => {\n\t\t\thandleResize();\n\t\t});\n\t\tresizeObserver.observe(document.querySelector(\".k-grid\"));\n\t\tgetData();\n\t}, [handleResize]);\n\n\tuseEffect(() => {\n\t\tsetgridData(process(entriesList, gridState));\n\t}, [entriesList, gridState]);\n\n\tconst setWidth = (minWidth) => {\n\t\tif (windowSize.width < 992) return minWidth;\n\t\tlet dynamicWidth = gridWidth - 620;\n\t\tlet width = dynamicWidth > minWidth ? dynamicWidth : minWidth;\n\t\treturn width;\n\t};\n\n\tconst pageChange = (event) => {\n\t\tlet updatedState = {\n\t\t\t...gridState,\n\t\t\tskip: event.page.skip,\n\t\t\ttake: event.page.take,\n\t\t};\n\t\tsetgridState({...updatedState});\n\t};\n\n\tconst filterChange = (event) => {\n\t\tlet updatedState = {\n\t\t\t...gridState,\n\t\t\tfilter: event.filter,\n\t\t};\n\t\tsetgridState(updatedState);\n\t};\n\n\tconst onSearchFilter = () => {\n\t\tlet dateFilters = [];\n\t\tif (startDate) {\n\t\t\tdateFilters.push({\n\t\t\t\tfield: \"created_at\",\n\t\t\t\toperator: \"gte\",\n\t\t\t\tvalue: moment(startDate).format(\"YYYY-MM-DD\"),\n\t\t\t});\n\t\t}\n\n\t\tif (endDate) {\n\t\t\tdateFilters.push({\n\t\t\t\tfield: \"created_at\",\n\t\t\t\toperator: \"lte\",\n\t\t\t\tvalue: moment(endDate).format(\"YYYY-MM-DD\"),\n\t\t\t});\n\t\t}\n\n\t\tlet updatedState = {\n\t\t\t...gridState,\n\t\t\tfilter: {\n\t\t\t\tlogic: \"and\",\n\t\t\t\tfilters: dateFilters,\n\t\t\t},\n\t\t};\n\t\tsetgridState(updatedState);\n\t};\n\n\tconst resetFilters = () => {\n\t\tlet updatedState = {\n\t\t\t...gridState,\n\t\t\tfilter: null,\n\t\t};\n\t\tsetgridState(updatedState);\n\t\tsetStartDate(null);\n\t\tsetEndDate(null);\n\t};\n\n\tconst getVatPeriod = (entry) => {\n\t\tsetShowLoader(true);\n\t\tlet params = {user_id: entry.client_user_id};\n\t\tcallApi(\"get\", ApiConstants.client.currentvatperiod, params, true)\n\t\t\t.then((response) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tsetclientVatPeriod(response.payload);\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\tconst getData = () => {\n\t\tsetShowLoader(true);\n\t\tcallApi(\"get\", ApiConstants.entry.checkerrejectedlist, {}, true)\n\t\t\t.then((response) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tlet temp = response.payload;\n\t\t\t\t\tsetEntriesList(temp);\n\t\t\t\t\tsetAccordionList(temp);\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\tconst viewEntry = (entry) => {\n\t\tsetselectedEntry(entry);\n\t\tif (entry?.entry_status_id === entryStatus.RECHECK) {\n\t\t\tsetselectedEntryType(entry.entry_type);\n\t\t}\n\t\tgetVatPeriod(entry);\n\t\tsetshowPreview(true);\n\t};\n\n\tconst closeEntryModal = () => {\n\t\tsetshowPreview(false);\n\t\tsetselectedEntryType(\"\");\n\t};\n\n\tconst onEntrySubmit = () => {\n\t\tcloseEntryModal();\n\t\tgetData();\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t{showLoader && <Spinner />}\n\t\t\t<Row>\n\t\t\t\t<Col xl={12}>\n\t\t\t\t\t<Card className=\"rounded\">\n\t\t\t\t\t\t<Card.Body className=\"p-4\">\n\t\t\t\t\t\t\t<Row className=\"mb-3\">\n\t\t\t\t\t\t\t\t<Col xs={12} md={4} xl={3}>\n\t\t\t\t\t\t\t\t\t<div className=\"date-picker-container\">\n\t\t\t\t\t\t\t\t\t\t<DatePicker className=\"form-control mb-2\" placeholderText=\"Start Date\" dateFormat=\"dd/MM/yyyy\" selected={startDate} onSelect={() => setEndDate(null)} onChange={setStartDate} />\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-calendar\"></i>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col xs={12} md={4} xl={3}>\n\t\t\t\t\t\t\t\t\t<div className=\"date-picker-container\">\n\t\t\t\t\t\t\t\t\t\t<DatePicker className=\"form-control mb-2\" minDate={startDate} placeholderText=\"End Date\" dateFormat=\"dd/MM/yyyy\" selected={endDate} onChange={setEndDate} />\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-calendar\"></i>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col xs={10} md={1} xl={1}>\n\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn-icon btn btn-primary search-button\" onClick={onSearchFilter}>\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-search\"></i>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col xs={2} md={1} xl={1}>\n\t\t\t\t\t\t\t\t\t{(startDate || endDate) && (\n\t\t\t\t\t\t\t\t\t\t<div className=\"text-muted filter-close-btn\" role=\"button\" onClick={resetFilters}>\n\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-x\"></i>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col md={1} xl={4} style={{display: \"flex\", justifyContent: \"flex-end\"}}>\n\t\t\t\t\t\t\t\t\t<Button size=\"sm\" onClick={getData}>\n\t\t\t\t\t\t\t\t\t\t<AiOutlineReload size={`1.8em`} />\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t{windowWidth && (\n\t\t\t\t\t\t\t\t<Grid data={gridData} skip={gridState.skip} pageSize={gridState.take} pageable={pagerSettings} onPageChange={pageChange} filterable={true} filter={gridState.filter} onFilterChange={filterChange}>\n\t\t\t\t\t\t\t\t\t<Column field=\"id\" title=\"#\" filterable={false} width=\"60px\" cell={(props) => <td>{props.dataIndex + 1}</td>} />\n\t\t\t\t\t\t\t\t\t<Column field=\"name\" title=\"Client Name\" width=\"200px\" />\n\t\t\t\t\t\t\t\t\t<Column\n\t\t\t\t\t\t\t\t\t\tfield=\"created_at\"\n\t\t\t\t\t\t\t\t\t\twidth=\"150\"\n\t\t\t\t\t\t\t\t\t\tfilterable={false}\n\t\t\t\t\t\t\t\t\t\ttitle=\"Entry Date\"\n\t\t\t\t\t\t\t\t\t\tcell={(props) => (\n\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t<div>{moment(props.dataItem.created_at).format(\"DD-MMM-YYYY\")}</div>\n\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t{/* <Column\n\t\t\t\t\t\t\t\t\t\tfield=\"file_path\"\n\t\t\t\t\t\t\t\t\t\tfilterable={false}\n\t\t\t\t\t\t\t\t\t\ttitle=\"Document\"\n\t\t\t\t\t\t\t\t\t\twidth={setWidth(450)}\n\t\t\t\t\t\t\t\t\t\tcell={(props) => (\n\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<FileIcon className=\"mr-2\" source={props.dataItem.file_path} style={{width: 25}} />\n\t\t\t\t\t\t\t\t\t\t\t\t\t{props.dataItem.file_path.split(\"/\")[1]}\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t/> */}\n\t\t\t\t\t\t\t\t\t<Column\n\t\t\t\t\t\t\t\t\t\tfield=\"Actions\"\n\t\t\t\t\t\t\t\t\t\tfilterable={false}\n\t\t\t\t\t\t\t\t\t\ttitle=\"Actions\"\n\t\t\t\t\t\t\t\t\t\twidth=\"120\"\n\t\t\t\t\t\t\t\t\t\tcell={(props) => (\n\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className={`text-center ${props.dataItem.entry_status_id === entryStatus.RECHECK ? \"text-warning\" : props.dataItem.entry_status_id === entryStatus.REJECTED ? \"text-danger\" : \"\"}`}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{props.dataItem.entry_status_id === entryStatus.RECHECK ? \"Recheck\" : props.dataItem.entry_status_id === entryStatus.REJECTED ? \"Rejected\" : \"\"}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t{(props.dataItem.entry_status_id === entryStatus.RECHECK || props.dataItem.entry_status_id === entryStatus.REJECTED) && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&nbsp;&nbsp;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<OverlayTrigger\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttrigger=\"click\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplacement=\"top\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trootClose={true}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toverlay={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Popover id=\"popover-basic\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Popover.Content>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"p-2\">{props.dataItem?.comment}</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Popover.Content>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Popover>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-info text-primary\" style={{fontSize: 16, cursor: \"pointer\"}}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</OverlayTrigger>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Column\n\t\t\t\t\t\t\t\t\t\tfield=\"View\"\n\t\t\t\t\t\t\t\t\t\ttitle=\"View\"\n\t\t\t\t\t\t\t\t\t\tfilterable={false}\n\t\t\t\t\t\t\t\t\t\twidth=\"100\"\n\t\t\t\t\t\t\t\t\t\tcell={(props) => (\n\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"action-panel\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn-icon btn btn-outline-primary\" title=\"View\" onClick={() => viewEntry(props.dataItem)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-eye\"></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{!windowWidth && (\n\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t<InputGroup className=\"mb-2\">\n\t\t\t\t\t\t\t\t\t\t\t<FormControl\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Client Name\"\n\t\t\t\t\t\t\t\t\t\t\t\taria-label=\"Client Name\"\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetAccordionList(entriesList);\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn event.target.value ? setAccordionList(accordionList?.filter((data) => data.name?.includes(event.target.value))) : setAccordionList(entriesList);\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</InputGroup>\n\t\t\t\t\t\t\t\t\t\t<InputGroup className=\"mb-2\">\n\t\t\t\t\t\t\t\t\t\t\t<FormControl\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Checker Name\"\n\t\t\t\t\t\t\t\t\t\t\t\taria-label=\"Checker Name\"\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetAccordionList(entriesList);\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn event.target.value ? setAccordionList(accordionList?.filter((data) => data.checker_name?.includes(event.target.value))) : setAccordionList(entriesList);\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</InputGroup>\n\n\t\t\t\t\t\t\t\t\t\t<Accordion defaultActiveKey=\"0\">\n\t\t\t\t\t\t\t\t\t\t\t{accordionList &&\n\t\t\t\t\t\t\t\t\t\t\t\taccordionList.length > 0 &&\n\t\t\t\t\t\t\t\t\t\t\t\taccordionList.map((row) => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Card key={row.id} style={{marginBottom: 4}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Accordion.Toggle as={Card.Header} style={{backgroundColor: \"#7599b1\", color: \"#ffffff\", padding: \"8px 16px\"}} eventKey={row.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div style={{display: \"flex\", justifyContent: \"space-between\"}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tClient: {row.name}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button variant=\"outline-light\" size=\"sm\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<FaAngleDown />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Accordion.Toggle>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Accordion.Collapse eventKey={row.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"action-panel\" style={{dispaly: \"flex\", justifyContent: \"flex-end\", marginBottom: 16}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn btn-outline-primary\" title=\"View\" onClick={() => viewEntry(row)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tView <i className=\"feather icon-eye\"></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>Entry Date:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span> {moment(row.invoice_date).format(\"DD-MMM-YYYY\")}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item style={{display: \"flex\"}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>Type:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className={`text-center ${row.entry_status_id === entryStatus.RECHECK ? \"text-warning\" : row.entry_status_id === entryStatus.REJECTED ? \"text-danger\" : \"\"}`}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{row.entry_status_id === entryStatus.RECHECK ? \"Recheck\" : row.entry_status_id === entryStatus.REJECTED ? \"Rejected\" : \"\"}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{(row.entry_status_id === entryStatus.RECHECK || row.entry_status_id === entryStatus.REJECTED) && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&nbsp;&nbsp;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<OverlayTrigger\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttrigger=\"click\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplacement=\"top\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trootClose={true}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toverlay={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Popover id=\"popover-basic\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Popover.Content>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"p-2\">{row?.comment}</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Popover.Content>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Popover>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-info text-primary\" style={{fontSize: 16, cursor: \"pointer\"}}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</OverlayTrigger>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Accordion.Collapse>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</Accordion>\n\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t</Card>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t<Modal size={selectedEntryType === entryTypes.PURCHASE ? \"xl\" : \"lg\"} show={showPreview} backdrop=\"static\" keyboard={true}>\n\t\t\t\t<Modal.Body className=\"p-0\">\n\t\t\t\t\t<button type=\"button\" className=\"btn-icon btn close-btn\" onClick={closeEntryModal}>\n\t\t\t\t\t\t<i className=\"feather icon-x-circle\"></i>\n\t\t\t\t\t</button>\n\t\t\t\t\t<div className=\"px-4 py-5\">\n\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t<Col className={\"col-12\"}>\n\t\t\t\t\t\t\t\t<Preview source={selectedEntry?.file_path} />\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t{/* <Col className={selectedEntryType === entryTypes.PURCHASE ? \"col-lg-8 col-12\" : \"col-lg-6 col-12\"}>\n\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t<Col className={selectedEntryType === entryTypes.PURCHASE ? \"col-lg-6 col-12\" : \"col-lg-12 col-12\"}>\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group my-3\">\n\t\t\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"w-100 form-control-select\"\n\t\t\t\t\t\t\t\t\t\t\t\tclassNamePrefix=\"select\"\n\t\t\t\t\t\t\t\t\t\t\t\toptions={entryTypeList}\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Entry type\"\n\t\t\t\t\t\t\t\t\t\t\t\tisSearchable={false}\n\t\t\t\t\t\t\t\t\t\t\t\tisDisabled={selectedEntry?.entry_status_id === entryStatus.RECHECK}\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={entryTypeList.find((i) => i.value === selectedEntryType)}\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(data) => setselectedEntryType(data.value)}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t<Col lg={12}>\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t{selectedEntryType === entryTypes.SALE && <SalesForm entry={selectedEntry} onSuccess={onEntrySubmit} onShowLoader={setShowLoader} vatPeriod={clientVatPeriod} />}\n\t\t\t\t\t\t\t\t\t\t\t{selectedEntryType === entryTypes.EXPENDITURE && <ExpenditureForm entry={selectedEntry} onSuccess={onEntrySubmit} onShowLoader={setShowLoader} vatPeriod={clientVatPeriod} />}\n\t\t\t\t\t\t\t\t\t\t\t{selectedEntryType === entryTypes.PURCHASE && <PurchaseForm entry={selectedEntry} onSuccess={onEntrySubmit} onShowLoader={setShowLoader} vatPeriod={clientVatPeriod} />}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t</Col> */}\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</div>\n\t\t\t\t</Modal.Body>\n\t\t\t</Modal>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default RejectedEntries;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/clients-no-entry/index.js",["873","874","875","876","877","878","879","880","881","882","883"],"import React, {useState, useEffect} from \"react\";\nimport {Row, Col, Card, Modal, OverlayTrigger, Popover, Accordion, Button, ListGroup, InputGroup, FormControl} from \"react-bootstrap\";\nimport {Grid, GridColumn as Column} from \"@progress/kendo-react-grid\";\nimport {process} from \"@progress/kendo-data-query\";\nimport moment from \"moment\";\nimport DatePicker from \"react-datepicker\";\nimport Select from \"react-select\";\nimport {FaAngleDown} from \"react-icons/fa\";\nimport {AiOutlineReload} from \"react-icons/ai\";\nimport {callApi} from \"../../../services/apiService\";\nimport {ApiConstants} from \"../../../config/apiConstants\";\nimport Spinner from \"../../../components/Spinner\";\nimport Preview from \"../../../components/Preview\";\nimport {entryTypeList} from \"../../../enums/entryTypeList\";\nimport {entryTypes} from \"../../../enums/entryTypes\";\nimport {entryStatus} from \"../../../enums/entryStatus\";\nimport FileIcon from \"../../../components/FileIcon\";\nimport {showNotification} from \"../../../services/toasterService\";\nimport SalesForm from \"./forms/salesForm\";\nimport ExpenditureForm from \"./forms/expenditureForm\";\nimport PurchaseForm from \"./forms/purchaseForm\";\nimport useWindowSize from \"../../../hooks/useWindowSize\";\n\nconst NpEntries = (props) => {\n\tconst [showLoader, setShowLoader] = useState(false);\n\tconst [entriesList, setEntriesList] = useState([]);\n\tconst [startDate, setStartDate] = useState(null);\n\tconst [endDate, setEndDate] = useState(null);\n\tconst [showPreview, setshowPreview] = useState(false);\n\tconst [selectedEntry, setselectedEntry] = useState(null);\n\tconst [selectedEntryType, setselectedEntryType] = useState(\"\");\n\tconst [clientVatPeriod, setclientVatPeriod] = useState(null);\n\n\tconst [accordionList, setAccordionList] = useState([]);\n\tconst [windowWidth, setWindowWidth] = useState(window.innerWidth);\n\n\tReact.useLayoutEffect(() => {\n\t\tsetWindowWidth(window.innerWidth > 992);\n\t}, []);\n\n\tconst [gridState, setgridState] = useState({\n\t\tskip: 0,\n\t\ttake: 10,\n\t});\n\tconst [gridData, setgridData] = useState(null);\n\n\tconst [gridWidth, setgridWidth] = useState(1024);\n\tconst windowSize = useWindowSize();\n\n\tconst pagerSettings = {\n\t\tbuttonCount: 5,\n\t\tinfo: true,\n\t\ttype: \"numeric\",\n\t\tpageSizes: true,\n\t\tpreviousNext: true,\n\t};\n\tconst handleResize = React.useCallback(() => {\n\t\tlet gridContext = document.querySelector(\".k-grid\");\n\t\tif (gridContext?.offsetWidth > gridWidth) {\n\t\t\tsetgridWidth(gridContext.offsetWidth);\n\t\t}\n\t}, [gridWidth]);\n\n\tuseEffect(() => {\n\t\tlet resizeObserver = new ResizeObserver(() => {\n\t\t\thandleResize();\n\t\t});\n\t\tresizeObserver.observe(document.querySelector(\".k-grid\"));\n\t\tgetData();\n\t}, [handleResize]);\n\n\tuseEffect(() => {\n\t\tsetgridData(process(entriesList, gridState));\n\t}, [entriesList, gridState]);\n\n\tconst setWidth = (minWidth) => {\n\t\tif (windowSize.width < 992) return minWidth;\n\t\tlet dynamicWidth = gridWidth - 620;\n\t\tlet width = dynamicWidth > minWidth ? dynamicWidth : minWidth;\n\t\treturn width;\n\t};\n\n\tconst pageChange = (event) => {\n\t\tlet updatedState = {\n\t\t\t...gridState,\n\t\t\tskip: event.page.skip,\n\t\t\ttake: event.page.take,\n\t\t};\n\t\tsetgridState({...updatedState});\n\t};\n\n\tconst filterChange = (event) => {\n\t\tlet updatedState = {\n\t\t\t...gridState,\n\t\t\tfilter: event.filter,\n\t\t};\n\t\tsetgridState(updatedState);\n\t};\n\n\tconst onSearchFilter = () => {\n\t\tlet dateFilters = [];\n\t\tif (startDate) {\n\t\t\tdateFilters.push({\n\t\t\t\tfield: \"created_at\",\n\t\t\t\toperator: \"gte\",\n\t\t\t\tvalue: moment(startDate).format(\"YYYY-MM-DD\"),\n\t\t\t});\n\t\t}\n\n\t\tif (endDate) {\n\t\t\tdateFilters.push({\n\t\t\t\tfield: \"created_at\",\n\t\t\t\toperator: \"lte\",\n\t\t\t\tvalue: moment(endDate).format(\"YYYY-MM-DD\"),\n\t\t\t});\n\t\t}\n\n\t\tlet updatedState = {\n\t\t\t...gridState,\n\t\t\tfilter: {\n\t\t\t\tlogic: \"and\",\n\t\t\t\tfilters: dateFilters,\n\t\t\t},\n\t\t};\n\t\tsetgridState(updatedState);\n\t};\n\n\tconst resetFilters = () => {\n\t\tlet updatedState = {\n\t\t\t...gridState,\n\t\t\tfilter: null,\n\t\t};\n\t\tsetgridState(updatedState);\n\t\tsetStartDate(null);\n\t\tsetEndDate(null);\n\t};\n\n\tconst getVatPeriod = (entry) => {\n\t\tsetShowLoader(true);\n\t\tlet params = {user_id: entry.client_user_id};\n\t\tcallApi(\"get\", ApiConstants.client.currentvatperiod, params, true)\n\t\t\t.then((response) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tsetclientVatPeriod(response.payload);\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\tconst getData = () => {\n\t\tsetShowLoader(true);\n\t\tcallApi(\"get\", ApiConstants.entry.checkernoentrylist, {}, true)\n\t\t\t.then((response) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\t// let temp = response.payload;\n\t\t\t\t\tlet unique = response.payload.filter((value, index, self) => index === self.findIndex((t) => t.id == value.id && t.name == value.name));\n\t\t\t\t\tsetEntriesList(unique);\n\t\t\t\t\tsetAccordionList(unique);\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\tconst viewEntry = (entry) => {\n\t\tsetselectedEntry(entry);\n\t\tif (entry?.entry_status_id === entryStatus.RECHECK) {\n\t\t\tsetselectedEntryType(entry.entry_type);\n\t\t}\n\t\tgetVatPeriod(entry);\n\t\tsetshowPreview(true);\n\t};\n\n\tconst closeEntryModal = () => {\n\t\tsetshowPreview(false);\n\t\tsetselectedEntryType(\"\");\n\t};\n\n\tconst onEntrySubmit = () => {\n\t\tcloseEntryModal();\n\t\tgetData();\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t{showLoader && <Spinner />}\n\t\t\t<Row>\n\t\t\t\t<Col xl={12}>\n\t\t\t\t\t<Card className=\"rounded\">\n\t\t\t\t\t\t<Card.Body className=\"p-4\">\n\t\t\t\t\t\t\t{windowWidth && (\n\t\t\t\t\t\t\t\t<Grid data={gridData} skip={gridState.skip} pageSize={gridState.take} pageable={pagerSettings} onPageChange={pageChange} filterable={true} filter={gridState.filter} onFilterChange={filterChange}>\n\t\t\t\t\t\t\t\t\t<Column field=\"id\" title=\"#\" filterable={false} cell={(props) => <td>{props.dataIndex + 1}</td>} />\n\t\t\t\t\t\t\t\t\t<Column field=\"name\" title=\"Client Name\" />\n\t\t\t\t\t\t\t\t\t<Column field=\"region\" title=\"Emirate\" />\n\t\t\t\t\t\t\t\t\t<Column field=\"trn_number\" title=\"TRN Number\" />\n\t\t\t\t\t\t\t\t\t{/* <Column\n\t\t\t\t\t\t\t\t\t\tfield=\"View\"\n\t\t\t\t\t\t\t\t\t\ttitle=\"View\"\n\t\t\t\t\t\t\t\t\t\tfilterable={false}\n\t\t\t\t\t\t\t\t\t\twidth=\"100\"\n\t\t\t\t\t\t\t\t\t\tcell={(props) => (\n\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"action-panel\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn-icon btn btn-outline-primary\" title=\"View\" onClick={() => viewEntry(props.dataItem)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-eye\"></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t/> */}\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{!windowWidth && (\n\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t<InputGroup className=\"mb-2\">\n\t\t\t\t\t\t\t\t\t\t\t<FormControl\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Client Name\"\n\t\t\t\t\t\t\t\t\t\t\t\taria-label=\"Client Name\"\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetAccordionList(entriesList);\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn event.target.value ? setAccordionList(accordionList?.filter((data) => data.name?.includes(event.target.value))) : setAccordionList(entriesList);\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</InputGroup>\n\t\t\t\t\t\t\t\t\t\t<InputGroup className=\"mb-2\">\n\t\t\t\t\t\t\t\t\t\t\t<FormControl\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Checker Name\"\n\t\t\t\t\t\t\t\t\t\t\t\taria-label=\"Checker Name\"\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetAccordionList(entriesList);\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn event.target.value ? setAccordionList(accordionList?.filter((data) => data.checker_name?.includes(event.target.value))) : setAccordionList(entriesList);\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</InputGroup>\n\n\t\t\t\t\t\t\t\t\t\t<Accordion defaultActiveKey=\"0\">\n\t\t\t\t\t\t\t\t\t\t\t{accordionList &&\n\t\t\t\t\t\t\t\t\t\t\t\taccordionList.length > 0 &&\n\t\t\t\t\t\t\t\t\t\t\t\taccordionList.map((row) => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Card key={row.id} style={{marginBottom: 4}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Accordion.Toggle as={Card.Header} style={{backgroundColor: \"#7599b1\", color: \"#ffffff\", padding: \"8px 16px\"}} eventKey={row.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div style={{display: \"flex\", justifyContent: \"space-between\"}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tClient: {row.name}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button variant=\"outline-light\" size=\"sm\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<FaAngleDown />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Accordion.Toggle>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Accordion.Collapse eventKey={row.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{/* <div className=\"action-panel\" style={{dispaly: \"flex\", justifyContent: \"flex-end\", marginBottom: 16}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn btn-outline-primary\" title=\"View\" onClick={() => viewEntry(row)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tView <i className=\"feather icon-eye\"></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div> */}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>Name:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span> {row.name}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>Emirate:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span> {row.region}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>TRN Number:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span> {row.trn_number}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Accordion.Collapse>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</Accordion>\n\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t</Card>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t<Modal size={selectedEntryType === entryTypes.PURCHASE ? \"xl\" : \"lg\"} show={showPreview} backdrop=\"static\" keyboard={true}>\n\t\t\t\t<Modal.Body className=\"p-0\">\n\t\t\t\t\t<button type=\"button\" className=\"btn-icon btn close-btn\" onClick={closeEntryModal}>\n\t\t\t\t\t\t<i className=\"feather icon-x-circle\"></i>\n\t\t\t\t\t</button>\n\t\t\t\t\t<div className=\"px-4 py-5\">\n\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t<Col className={selectedEntryType === entryTypes.PURCHASE ? \"col-lg-4 col-12 mt-3\" : \"col-lg-6 col-12 mt-3\"}>\n\t\t\t\t\t\t\t\t<Preview source={selectedEntry?.file_path} containerStyles={{backgroundColor: \"#f5f5f5\", padding: 10}} zoom={true} />\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t<Col className={selectedEntryType === entryTypes.PURCHASE ? \"col-lg-8 col-12\" : \"col-lg-6 col-12\"}>\n\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t<Col className={selectedEntryType === entryTypes.PURCHASE ? \"col-lg-6 col-12\" : \"col-lg-12 col-12\"}>\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group my-3\">\n\t\t\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"w-100 form-control-select\"\n\t\t\t\t\t\t\t\t\t\t\t\tclassNamePrefix=\"select\"\n\t\t\t\t\t\t\t\t\t\t\t\toptions={entryTypeList}\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Entry type\"\n\t\t\t\t\t\t\t\t\t\t\t\tisSearchable={false}\n\t\t\t\t\t\t\t\t\t\t\t\tisDisabled={selectedEntry?.entry_status_id === entryStatus.RECHECK}\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={entryTypeList.find((i) => i.value === selectedEntryType)}\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(data) => setselectedEntryType(data.value)}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t<Col lg={12}>\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t{selectedEntryType === entryTypes.SALE && <SalesForm entry={selectedEntry} onSuccess={onEntrySubmit} onShowLoader={setShowLoader} vatPeriod={clientVatPeriod} />}\n\t\t\t\t\t\t\t\t\t\t\t{selectedEntryType === entryTypes.EXPENDITURE && <ExpenditureForm entry={selectedEntry} onSuccess={onEntrySubmit} onShowLoader={setShowLoader} vatPeriod={clientVatPeriod} />}\n\t\t\t\t\t\t\t\t\t\t\t{selectedEntryType === entryTypes.PURCHASE && <PurchaseForm entry={selectedEntry} onSuccess={onEntrySubmit} onShowLoader={setShowLoader} vatPeriod={clientVatPeriod} />}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</div>\n\t\t\t\t</Modal.Body>\n\t\t\t</Modal>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default NpEntries;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/pending-entries/index.js",["884","885","886","887","888","889","890"],"import React, {useState, useEffect} from \"react\";\nimport {Row, Col, Card, Modal, OverlayTrigger, Popover, Accordion, Button, ListGroup, InputGroup, FormControl} from \"react-bootstrap\";\nimport {Grid, GridColumn as Column} from \"@progress/kendo-react-grid\";\nimport {process} from \"@progress/kendo-data-query\";\nimport moment from \"moment\";\nimport DatePicker from \"react-datepicker\";\nimport Select from \"react-select\";\nimport {FaAngleDown} from \"react-icons/fa\";\nimport {AiOutlineReload} from \"react-icons/ai\";\nimport {callApi} from \"../../../services/apiService\";\nimport {ApiConstants} from \"../../../config/apiConstants\";\nimport {showNotification} from \"../../../services/toasterService\";\nimport Spinner from \"../../../components/Spinner\";\nimport Preview from \"../../../components/Preview\";\nimport {entryTypeList} from \"../../../enums/entryTypeList\";\nimport {entryTypes} from \"../../../enums/entryTypes\";\nimport FileIcon from \"../../../components/FileIcon\";\nimport SalesForm from \"./forms/salesForm\";\nimport ExpenditureForm from \"./forms/expenditureForm\";\nimport PurchaseForm from \"./forms/purchaseForm\";\nimport useWindowSize from \"../../../hooks/useWindowSize\";\n\nconst PendingEntries = (props) => {\n\tconst [showLoader, setShowLoader] = useState(false);\n\tconst [entriesList, setEntriesList] = useState([]);\n\tconst [startDate, setStartDate] = useState(null);\n\tconst [endDate, setEndDate] = useState(null);\n\tconst [showPreview, setshowPreview] = useState(false);\n\tconst [selectedEntry, setselectedEntry] = useState(null);\n\tconst [selectedEntryType, setselectedEntryType] = useState(\"\");\n\tconst [showDeleteConfirm, setDeleteConfirm] = React.useState(false);\n\n\tconst [accordionList, setAccordionList] = useState([]);\n\tconst [windowWidth, setWindowWidth] = useState(window.innerWidth);\n\n\tReact.useLayoutEffect(() => {\n\t\tsetWindowWidth(window.innerWidth > 992);\n\t}, []);\n\n\tconst [gridState, setgridState] = useState({\n\t\tskip: 0,\n\t\ttake: 10,\n\t});\n\tconst [gridData, setgridData] = useState(null);\n\n\tconst [gridWidth, setgridWidth] = useState(1024);\n\tconst windowSize = useWindowSize();\n\n\tconst pagerSettings = {\n\t\tbuttonCount: 5,\n\t\tinfo: true,\n\t\ttype: \"numeric\",\n\t\tpageSizes: true,\n\t\tpreviousNext: true,\n\t};\n\n\tuseEffect(() => {\n\t\tlet resizeObserver = new ResizeObserver(() => {\n\t\t\thandleResize();\n\t\t});\n\t\tresizeObserver.observe(document.querySelector(\".k-grid\"));\n\t\tgetData();\n\t}, []);\n\n\tuseEffect(() => {\n\t\tloadGridData();\n\t}, [entriesList, gridState]);\n\n\tconst handleResize = () => {\n\t\tlet gridContext = document.querySelector(\".k-grid\");\n\t\tif (gridContext?.offsetWidth > gridWidth) {\n\t\t\tsetgridWidth(gridContext.offsetWidth);\n\t\t}\n\t};\n\n\tconst setWidth = (minWidth) => {\n\t\tif (windowSize.width < 992) return minWidth;\n\t\tlet dynamicWidth = gridWidth - 560;\n\t\tlet width = dynamicWidth > minWidth ? dynamicWidth : minWidth;\n\t\treturn width;\n\t};\n\n\tconst loadGridData = () => {\n\t\tlet updatedData = process(entriesList, gridState);\n\t\tsetgridData(updatedData);\n\t};\n\n\tconst pageChange = (event) => {\n\t\tlet updatedState = {\n\t\t\t...gridState,\n\t\t\tskip: event.page.skip,\n\t\t\ttake: event.page.take,\n\t\t};\n\t\tsetgridState({...updatedState});\n\t};\n\n\tconst filterChange = (event) => {\n\t\tlet updatedState = {\n\t\t\t...gridState,\n\t\t\tfilter: event.filter,\n\t\t};\n\t\tsetgridState(updatedState);\n\t};\n\n\tconst onSearchFilter = () => {\n\t\tlet dateFilters = [];\n\t\tif (startDate) {\n\t\t\tdateFilters.push({\n\t\t\t\tfield: \"invoice_date\",\n\t\t\t\toperator: \"gte\",\n\t\t\t\tvalue: moment(startDate).format(\"YYYY-MM-DD\"),\n\t\t\t});\n\t\t}\n\n\t\tif (endDate) {\n\t\t\tdateFilters.push({\n\t\t\t\tfield: \"invoice_date\",\n\t\t\t\toperator: \"lte\",\n\t\t\t\tvalue: moment(endDate).format(\"YYYY-MM-DD\"),\n\t\t\t});\n\t\t}\n\n\t\tlet updatedState = {\n\t\t\t...gridState,\n\t\t\tfilter: {\n\t\t\t\tlogic: \"and\",\n\t\t\t\tfilters: dateFilters,\n\t\t\t},\n\t\t};\n\t\tsetgridState(updatedState);\n\t};\n\n\tconst resetFilters = () => {\n\t\tlet updatedState = {\n\t\t\t...gridState,\n\t\t\tfilter: null,\n\t\t};\n\t\tsetgridState(updatedState);\n\t\tsetStartDate(null);\n\t\tsetEndDate(null);\n\t};\n\n\tconst getData = () => {\n\t\tsetShowLoader(true);\n\t\tcallApi(\"get\", ApiConstants.entry.validatorpendinglist, {}, true)\n\t\t\t.then((response) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\t// console.log(response.payload);\n\t\t\t\t\tsetEntriesList(response.payload);\n\t\t\t\t\tsetAccordionList(response.payload);\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\tconst viewEntry = (entry) => {\n\t\tsetselectedEntry(entry);\n\t\tsetselectedEntryType(entry.entry_type);\n\t\tsetshowPreview(true);\n\t};\n\n\tconst closeEntryModal = () => {\n\t\tsetshowPreview(false);\n\t\tsetselectedEntryType(\"\");\n\t};\n\n\tconst onEntrySubmit = () => {\n\t\tcloseEntryModal();\n\t\tgetData();\n\t};\n\n\tconst deleteEntry = (entry) => {\n\t\tsetselectedEntry(entry);\n\t\tsetDeleteConfirm(true);\n\t};\n\n\tconst deleteData = () => {\n\t\tsetShowLoader(true);\n\t\tcallApi(\"post\", ApiConstants.entry.validatordeleteentry, {entry_id: selectedEntry.id}, true)\n\t\t\t.then((response) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tshowNotification(\"Success\", response.message, \"success\");\n\t\t\t\t\tgetData();\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t{showLoader && <Spinner />}\n\t\t\t<Row>\n\t\t\t\t<Col xl={12}>\n\t\t\t\t\t<Card className=\"rounded\">\n\t\t\t\t\t\t<Card.Body className=\"p-4\">\n\t\t\t\t\t\t\t<Row className=\"mb-3\">\n\t\t\t\t\t\t\t\t<Col xs={12} md={4} xl={3}>\n\t\t\t\t\t\t\t\t\t<div className=\"date-picker-container\">\n\t\t\t\t\t\t\t\t\t\t<DatePicker className=\"form-control mb-2\" placeholderText=\"Start Date\" dateFormat=\"dd/MM/yyyy\" selected={startDate} onSelect={() => setEndDate(null)} onChange={setStartDate} />\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-calendar\"></i>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col xs={12} md={4} xl={3}>\n\t\t\t\t\t\t\t\t\t<div className=\"date-picker-container\">\n\t\t\t\t\t\t\t\t\t\t<DatePicker className=\"form-control mb-2\" minDate={startDate} placeholderText=\"End Date\" dateFormat=\"dd/MM/yyyy\" selected={endDate} onChange={setEndDate} />\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-calendar\"></i>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col xs={10} md={2} xl={1}>\n\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn-icon btn btn-primary search-button\" onClick={onSearchFilter}>\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-search\"></i>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t{(startDate || endDate) && (\n\t\t\t\t\t\t\t\t\t<Col xs={2} md={1} xl={1}>\n\t\t\t\t\t\t\t\t\t\t<div className=\"filter-close-btn\" role=\"button\" onClick={resetFilters}>\n\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-x\"></i>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t<Col md={1} xl={4} style={{display: \"flex\", justifyContent: \"flex-end\"}}>\n\t\t\t\t\t\t\t\t\t<Button size=\"sm\" onClick={getData}>\n\t\t\t\t\t\t\t\t\t\t<AiOutlineReload size={`1.8em`} />\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</Row>\n\n\t\t\t\t\t\t\t{windowWidth && (\n\t\t\t\t\t\t\t\t<Grid data={gridData} skip={gridState.skip} pageable={true} pageSize={gridState.take} onPageChange={pageChange} filterable={true} filter={gridState.filter} onFilterChange={filterChange}>\n\t\t\t\t\t\t\t\t\t<Column field=\"id\" title=\"#\" filterable={false} width=\"60px\" cell={(props) => <td>{props.dataIndex + 1}</td>} />\n\t\t\t\t\t\t\t\t\t<Column field=\"user_name\" title=\"Client Name\" width={250} />\n\t\t\t\t\t\t\t\t\t<Column field=\"checker_name\" title=\"Checker Name\" width={250} />\n\t\t\t\t\t\t\t\t\t{/* <Column\n                  field=\"created_at\"\n                  width=\"150\"\n                  filterable={false}\n                  title=\"Date\"\n                  cell={(props) => (\n                    <td>\n                      <div>\n                        {moment(props.dataItem.created_at).format(\n                          \"DD-MMM-YYYY\"\n                        )}\n                      </div>\n                    </td>\n                  )}\n                /> */}\n\t\t\t\t\t\t\t\t\t{/* <Column\n                  field=\"invoice_number\"\n                  title=\"Invoice #\"\n                  width=\"180px\"\n                /> */}\n\t\t\t\t\t\t\t\t\t<Column\n\t\t\t\t\t\t\t\t\t\tfield=\"invoice_date\"\n\t\t\t\t\t\t\t\t\t\tfilterable={false}\n\t\t\t\t\t\t\t\t\t\twidth=\"180\"\n\t\t\t\t\t\t\t\t\t\ttitle=\"Invoice Date\"\n\t\t\t\t\t\t\t\t\t\tcell={(props) => (\n\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t<div>{moment(props.dataItem.invoice_date).format(\"DD-MMM-YYYY\")}</div>\n\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t{/* <Column\n\t\t\t\t\t\t\t\t\t\tfield=\"file_path\"\n\t\t\t\t\t\t\t\t\t\twidth=\"100\"\n\t\t\t\t\t\t\t\t\t\tfilterable={false}\n\t\t\t\t\t\t\t\t\t\ttitle=\"Document\"\n\t\t\t\t\t\t\t\t\t\tcell={(props) => (\n\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<FileIcon className=\"mr-2\" source={props.dataItem.file_path} style={{width: 25}} />\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t/> */}\n\t\t\t\t\t\t\t\t\t<Column\n\t\t\t\t\t\t\t\t\t\tfield=\"View\"\n\t\t\t\t\t\t\t\t\t\tfilterable={false}\n\t\t\t\t\t\t\t\t\t\ttitle=\"View\"\n\t\t\t\t\t\t\t\t\t\twidth=\"100\"\n\t\t\t\t\t\t\t\t\t\tcell={(props) => (\n\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"action-panel\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn-icon btn btn-outline-primary\" title=\"View\" onClick={() => viewEntry(props.dataItem)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-eye\"></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Column\n\t\t\t\t\t\t\t\t\t\tfield=\"Actions\"\n\t\t\t\t\t\t\t\t\t\ttitle=\"Actions\"\n\t\t\t\t\t\t\t\t\t\tfilterable={false}\n\t\t\t\t\t\t\t\t\t\twidth=\"100\"\n\t\t\t\t\t\t\t\t\t\tcell={(props) => (\n\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t{props.dataItem.requested_for_delete > 0 && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"action-panel\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"btn-icon btn btn-outline-danger\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle=\"Delete\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeleteEntry(props.dataItem);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-trash\"></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{!windowWidth && (\n\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t<InputGroup className=\"mb-2\">\n\t\t\t\t\t\t\t\t\t\t\t<FormControl\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Client Name\"\n\t\t\t\t\t\t\t\t\t\t\t\taria-label=\"Client Name\"\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetAccordionList(entriesList);\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn event.target.value ? setAccordionList(accordionList?.filter((data) => data.name?.includes(event.target.value))) : setAccordionList(entriesList);\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</InputGroup>\n\n\t\t\t\t\t\t\t\t\t\t<Accordion defaultActiveKey=\"0\">\n\t\t\t\t\t\t\t\t\t\t\t{accordionList &&\n\t\t\t\t\t\t\t\t\t\t\t\taccordionList.length > 0 &&\n\t\t\t\t\t\t\t\t\t\t\t\taccordionList.map((row) => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Card key={row.id} style={{marginBottom: 4}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Accordion.Toggle as={Card.Header} style={{backgroundColor: \"#7599b1\", color: \"#ffffff\", padding: \"8px 16px\"}} eventKey={row.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div style={{display: \"flex\", justifyContent: \"space-between\"}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{row.user_name}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button variant=\"outline-light\" size=\"sm\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<FaAngleDown />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Accordion.Toggle>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Accordion.Collapse eventKey={row.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"action-panel\" style={{dispaly: \"flex\", justifyContent: \"flex-end\", marginBottom: 16}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn btn-outline-primary\" title=\"View\" onClick={() => viewEntry(row)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tView <i className=\"feather icon-eye\"></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>Checker:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span> {row.checker_name}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>Client:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span> {row.user_name}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>Entry Date:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span> {moment(row.invoice_date).format(\"DD-MMM-YYYY\")}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Accordion.Collapse>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</Accordion>\n\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t</Card>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t<Modal size={selectedEntryType === entryTypes.PURCHASE ? \"xl\" : \"lg\"} show={showPreview} backdrop=\"static\" keyboard={true}>\n\t\t\t\t<Modal.Body className=\"p-0\">\n\t\t\t\t\t<button type=\"button\" className=\"btn-icon btn close-btn\" onClick={closeEntryModal}>\n\t\t\t\t\t\t<i className=\"feather icon-x-circle\"></i>\n\t\t\t\t\t</button>\n\t\t\t\t\t<div className=\"px-4 py-5\">\n\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t<Col className={selectedEntryType === entryTypes.PURCHASE ? \"col-lg-4 col-12 mt-3\" : \"col-lg-6 col-12 mt-3\"}>\n\t\t\t\t\t\t\t\t<Preview source={selectedEntry?.file_path} containerStyles={{backgroundColor: \"#f5f5f5\", padding: 10}} zoom={true} />\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t<Col className={selectedEntryType === entryTypes.PURCHASE ? \"col-lg-8 col-12\" : \"col-lg-6 col-12\"}>\n\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t<Col className={selectedEntryType === entryTypes.PURCHASE ? \"col-lg-6 col-12\" : \"col-lg-12 col-12\"}>\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group my-3\">\n\t\t\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"w-100 form-control-select\"\n\t\t\t\t\t\t\t\t\t\t\t\tclassNamePrefix=\"select\"\n\t\t\t\t\t\t\t\t\t\t\t\tisDisabled\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={entryTypeList.find((i) => i.value === selectedEntry?.entry_type)}\n\t\t\t\t\t\t\t\t\t\t\t\toptions={entryTypeList}\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Entry type\"\n\t\t\t\t\t\t\t\t\t\t\t\tisSearchable={false}\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(data) => setselectedEntryType(data.value)}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t<Col lg={12}>\n\t\t\t\t\t\t\t\t\t\t{selectedEntryType === entryTypes.SALE && <SalesForm entry={selectedEntry} onSuccess={onEntrySubmit} onShowLoader={setShowLoader} />}\n\t\t\t\t\t\t\t\t\t\t{selectedEntryType === entryTypes.EXPENDITURE && <ExpenditureForm entry={selectedEntry} onSuccess={onEntrySubmit} onShowLoader={setShowLoader} />}\n\t\t\t\t\t\t\t\t\t\t{selectedEntryType === entryTypes.PURCHASE && <PurchaseForm entry={selectedEntry} onSuccess={onEntrySubmit} onShowLoader={setShowLoader} />}\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</div>\n\t\t\t\t</Modal.Body>\n\t\t\t</Modal>\n\t\t\t<Modal size=\"md\" show={showDeleteConfirm} backdrop=\"static\" keyboard={true}>\n\t\t\t\t<Modal.Header>\n\t\t\t\t\t<h5 className=\"card-title\">Confirm Delete</h5>\n\t\t\t\t</Modal.Header>\n\t\t\t\t<Modal.Body>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<span>Are you sure that to delete this entry?</span>\n\t\t\t\t\t</div>\n\t\t\t\t</Modal.Body>\n\t\t\t\t<Modal.Footer>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<button className=\"btn btn-outline-primary\" onClick={() => setDeleteConfirm(false)}>\n\t\t\t\t\t\t\tNo\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn btn-primary\"\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tsetDeleteConfirm(false);\n\t\t\t\t\t\t\t\tdeleteData();\n\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\tYes\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</Modal.Footer>\n\t\t\t</Modal>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default PendingEntries;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/checked-entries/index.js",["891","892","893","894","895","896"],"import React, {useState, useEffect} from \"react\";\nimport {Row, Col, Card, Modal, OverlayTrigger, Popover, Accordion, Button, ListGroup, InputGroup, FormControl} from \"react-bootstrap\";\nimport {Grid, GridColumn as Column} from \"@progress/kendo-react-grid\";\nimport {process} from \"@progress/kendo-data-query\";\nimport moment from \"moment\";\nimport DatePicker from \"react-datepicker\";\nimport Select from \"react-select\";\nimport {FaAngleDown} from \"react-icons/fa\";\nimport {AiOutlineReload} from \"react-icons/ai\";\nimport {showNotification} from \"../../../services/toasterService\";\nimport {callApi} from \"../../../services/apiService\";\nimport {ApiConstants} from \"../../../config/apiConstants\";\nimport Spinner from \"../../../components/Spinner\";\nimport Preview from \"../../../components/Preview\";\nimport {entryTypeList} from \"../../../enums/entryTypeList\";\nimport {entryTypes} from \"../../../enums/entryTypes\";\nimport SalesForm from \"./forms/salesForm\";\nimport ExpenditureForm from \"./forms/expenditureForm\";\nimport PurchaseForm from \"./forms/purchaseForm\";\nimport useWindowSize from \"../../../hooks/useWindowSize\";\n\nconst CheckedEntries = (props) => {\n\tconst [showLoader, setShowLoader] = useState(false);\n\tconst [entriesList, setEntriesList] = useState([]);\n\tconst [startDate, setStartDate] = useState(null);\n\tconst [endDate, setEndDate] = useState(null);\n\tconst [showPreview, setshowPreview] = useState(false);\n\tconst [selectedEntry, setselectedEntry] = useState(null);\n\tconst [selectedEntryType, setselectedEntryType] = useState(\"\");\n\tconst [accordionList, setAccordionList] = useState([]);\n\n\tconst [windowWidth, setWindowWidth] = useState(window.innerWidth);\n\n\tReact.useLayoutEffect(() => {\n\t\tsetWindowWidth(window.innerWidth > 992);\n\t}, []);\n\n\tconst [gridState, setgridState] = useState({\n\t\tskip: 0,\n\t\ttake: 10,\n\t});\n\tconst [gridData, setgridData] = useState(null);\n\n\tconst [gridWidth, setgridWidth] = useState(1024);\n\tconst windowSize = useWindowSize();\n\n\tconst pagerSettings = {\n\t\tbuttonCount: 5,\n\t\tinfo: true,\n\t\ttype: \"numeric\",\n\t\tpageSizes: true,\n\t\tpreviousNext: true,\n\t};\n\n\tuseEffect(() => {\n\t\tlet resizeObserver = new ResizeObserver(() => {\n\t\t\thandleResize();\n\t\t});\n\t\tresizeObserver.observe(document.querySelector(\".k-grid\"));\n\t\tgetData();\n\t}, []);\n\n\tuseEffect(() => {\n\t\tloadGridData();\n\t}, [entriesList, gridState]);\n\n\tconst handleResize = () => {\n\t\tlet gridContext = document.querySelector(\".k-grid\");\n\t\tif (gridContext?.offsetWidth > gridWidth) {\n\t\t\tsetgridWidth(gridContext.offsetWidth);\n\t\t}\n\t};\n\n\tconst setWidth = (minWidth) => {\n\t\tif (windowSize.width < 992) return minWidth;\n\t\tlet dynamicWidth = gridWidth - 560;\n\t\tlet width = dynamicWidth > minWidth ? dynamicWidth : minWidth;\n\t\treturn width;\n\t};\n\n\tconst loadGridData = () => {\n\t\tlet updatedData = process(entriesList, gridState);\n\t\tsetgridData(updatedData);\n\t};\n\n\tconst pageChange = (event) => {\n\t\tlet updatedState = {\n\t\t\t...gridState,\n\t\t\tskip: event.page.skip,\n\t\t\ttake: event.page.take,\n\t\t};\n\t\tsetgridState({...updatedState});\n\t};\n\n\tconst filterChange = (event) => {\n\t\tlet updatedState = {\n\t\t\t...gridState,\n\t\t\tfilter: event.filter,\n\t\t};\n\t\tsetgridState(updatedState);\n\t};\n\n\tconst onSearchFilter = () => {\n\t\tlet dateFilters = [];\n\t\tif (startDate) {\n\t\t\tdateFilters.push({\n\t\t\t\tfield: \"invoice_date\",\n\t\t\t\toperator: \"gte\",\n\t\t\t\tvalue: moment(startDate).format(\"YYYY-MM-DD\"),\n\t\t\t});\n\t\t}\n\n\t\tif (endDate) {\n\t\t\tdateFilters.push({\n\t\t\t\tfield: \"invoice_date\",\n\t\t\t\toperator: \"lte\",\n\t\t\t\tvalue: moment(endDate).format(\"YYYY-MM-DD\"),\n\t\t\t});\n\t\t}\n\n\t\tlet updatedState = {\n\t\t\t...gridState,\n\t\t\tfilter: {\n\t\t\t\tlogic: \"and\",\n\t\t\t\tfilters: dateFilters,\n\t\t\t},\n\t\t};\n\t\tsetgridState(updatedState);\n\t};\n\n\tconst resetFilters = () => {\n\t\tlet updatedState = {\n\t\t\t...gridState,\n\t\t\tfilter: null,\n\t\t};\n\t\tsetgridState(updatedState);\n\t\tsetStartDate(null);\n\t\tsetEndDate(null);\n\t};\n\n\tconst getData = () => {\n\t\tsetShowLoader(true);\n\t\tcallApi(\"get\", ApiConstants.entry.validatorcheckedlist, {}, true)\n\t\t\t.then((response) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tlet temp = response.payload;\n          console.log(temp);\n\t\t\t\t\tsetEntriesList(temp);\n\t\t\t\t\tsetAccordionList(temp);\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\tconst viewEntry = (entry) => {\n\t\tsetselectedEntry(entry);\n\n\t\tsetselectedEntryType(entry.entry_type);\n\t\tsetshowPreview(true);\n\t};\n\n\tconst closeEntryModal = () => {\n\t\tsetshowPreview(false);\n\t\tsetselectedEntryType(\"\");\n\t};\n\n\tconst onEntrySubmit = () => {\n\t\tcloseEntryModal();\n\t\tgetData();\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t{showLoader && <Spinner />}\n\t\t\t<Row>\n\t\t\t\t<Col xl={12}>\n\t\t\t\t\t<Card className=\"rounded\">\n\t\t\t\t\t\t<Card.Body className=\"p-4\">\n\t\t\t\t\t\t\t<Row className=\"mb-3\">\n\t\t\t\t\t\t\t\t<Col xs={12} md={4} xl={3}>\n\t\t\t\t\t\t\t\t\t<div className=\"date-picker-container\">\n\t\t\t\t\t\t\t\t\t\t<DatePicker className=\"form-control mb-2\" placeholderText=\"Start Date\" dateFormat=\"dd/MM/yyyy\" selected={startDate} onSelect={() => setEndDate(null)} onChange={setStartDate} />\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-calendar\"></i>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col xs={12} md={4} xl={3}>\n\t\t\t\t\t\t\t\t\t<div className=\"date-picker-container\">\n\t\t\t\t\t\t\t\t\t\t<DatePicker className=\"form-control mb-2\" minDate={startDate} placeholderText=\"End Date\" dateFormat=\"dd/MM/yyyy\" selected={endDate} onChange={setEndDate} />\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-calendar\"></i>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col xs={10} md={1} xl={1}>\n\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn-icon btn btn-primary search-button\" onClick={onSearchFilter}>\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-search\"></i>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col xs={2} md={1} xl={1}>\n\t\t\t\t\t\t\t\t\t{(startDate || endDate) && (\n\t\t\t\t\t\t\t\t\t\t<div className=\"filter-close-btn\" role=\"button\" onClick={resetFilters}>\n\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-x\"></i>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col md={1} xl={4} style={{display: \"flex\", justifyContent: \"flex-end\"}}>\n\t\t\t\t\t\t\t\t\t<Button size=\"sm\" onClick={getData}>\n\t\t\t\t\t\t\t\t\t\t<AiOutlineReload size={`1.8em`} />\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</Row>\n\n\t\t\t\t\t\t\t{windowWidth && (\n\t\t\t\t\t\t\t\t<Grid data={gridData} skip={gridState.skip} pageable={true} pageSize={gridState.take} onPageChange={pageChange} filterable={true} filter={gridState.filter} onFilterChange={filterChange}>\n\t\t\t\t\t\t\t\t\t<Column field=\"user_name\" title=\"Client Name\" width={250} />\n\t\t\t\t\t\t\t\t\t<Column field=\"checker_name\" title=\"Checker Name\" width={250} />\n\t\t\t\t\t\t\t\t\t{/* <Column\n                  field=\"created_at\"\n                  filterable={false}\n                  width=\"180\"\n                  title=\"Date\"\n                  cell={(props) => (\n                    <td>\n                      <div>\n                        {moment(props.dataItem.created_at).format(\n                          \"DD-MMM-YYYY\"\n                        )}\n                      </div>\n                    </td>\n                  )}\n                /> */}\n\t\t\t\t\t\t\t\t\t<Column\n\t\t\t\t\t\t\t\t\t\tfield=\"invoice_date\"\n\t\t\t\t\t\t\t\t\t\tfilterable={false}\n\t\t\t\t\t\t\t\t\t\twidth=\"180\"\n\t\t\t\t\t\t\t\t\t\ttitle=\"Invoice Date\"\n\t\t\t\t\t\t\t\t\t\tcell={(props) => (\n\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t<div>{moment(props.dataItem.invoice_date).format(\"DD-MMM-YYYY\")}</div>\n\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Column field=\"invoice_number\" title=\"Invoice #\" width=\"180px\" />\n\t\t\t\t\t\t\t\t\t<Column field=\"amount\" title=\"Amount\" width=\"150px\" />\n\t\t\t\t\t\t\t\t\t<Column\n\t\t\t\t\t\t\t\t\t\tfield=\"entry_type\"\n\t\t\t\t\t\t\t\t\t\ttitle=\"Type\"\n\t\t\t\t\t\t\t\t\t\twidth=\"150px\"\n\t\t\t\t\t\t\t\t\t\tcell={(props) => (\n\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t<div>{props.dataItem.entry_type === entryTypes.SALE ? \"Sales\" : props.dataItem.entry_type === entryTypes.PURCHASE ? \"Purchase\" : props.dataItem.entry_type === entryTypes.EXPENDITURE ? \"Expenditure\" : \"\"}</div>\n\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Column\n\t\t\t\t\t\t\t\t\t\tfield=\"View\"\n\t\t\t\t\t\t\t\t\t\tfilterable={false}\n\t\t\t\t\t\t\t\t\t\ttitle=\"View\"\n\t\t\t\t\t\t\t\t\t\twidth=\"100px\"\n\t\t\t\t\t\t\t\t\t\tcell={(props) => (\n\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"action-panel\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn-icon btn btn-outline-primary\" title=\"View\" onClick={() => viewEntry(props.dataItem)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-eye\"></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{!windowWidth && (\n\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t<InputGroup className=\"mb-2\">\n\t\t\t\t\t\t\t\t\t\t\t<FormControl\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Client Name\"\n\t\t\t\t\t\t\t\t\t\t\t\taria-label=\"Client Name\"\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetAccordionList(entriesList);\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn event.target.value ? setAccordionList(accordionList?.filter((data) => data.name?.includes(event.target.value))) : setAccordionList(entriesList);\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</InputGroup>\n\t\t\t\t\t\t\t\t\t\t<InputGroup className=\"mb-2\">\n\t\t\t\t\t\t\t\t\t\t\t<FormControl\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Checker Name\"\n\t\t\t\t\t\t\t\t\t\t\t\taria-label=\"Checker Name\"\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetAccordionList(entriesList);\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn event.target.value ? setAccordionList(accordionList?.filter((data) => data.checker_name?.includes(event.target.value))) : setAccordionList(entriesList);\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</InputGroup>\n\n\t\t\t\t\t\t\t\t\t\t<Accordion defaultActiveKey=\"0\">\n\t\t\t\t\t\t\t\t\t\t\t{accordionList &&\n\t\t\t\t\t\t\t\t\t\t\t\taccordionList.length > 0 &&\n\t\t\t\t\t\t\t\t\t\t\t\taccordionList.map((row) => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Card key={row.id} style={{marginBottom: 4}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Accordion.Toggle as={Card.Header} style={{backgroundColor: \"#7599b1\", color: \"#ffffff\", padding: \"8px 16px\"}} eventKey={row.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div style={{display: \"flex\", justifyContent: \"space-between\"}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{row.user_name}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button variant=\"outline-light\" size=\"sm\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<FaAngleDown />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Accordion.Toggle>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Accordion.Collapse eventKey={row.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"action-panel\" style={{dispaly: \"flex\", justifyContent: \"flex-end\", marginBottom: 16}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn btn-outline-primary\" title=\"View\" onClick={() => viewEntry(row)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tView <i className=\"feather icon-eye\"></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>Checker:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span> {row.checker_name}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>Invoice Date:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span> {moment(row.invoice_date).format(\"DD-MMM-YYYY\")}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>Invoice Number:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span> {row.invoice_number}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>Amount:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span> {row.amount} </span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item style={{display: \"flex\"}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>Type:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div>{row.entry_type === entryTypes.SALE ? \"Sales\" : row.entry_type === entryTypes.PURCHASE ? \"Purchase\" : row.entry_type === entryTypes.EXPENDITURE ? \"Expenditure\" : \"\"}</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Accordion.Collapse>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</Accordion>\n\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t</Card>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\n\t\t\t<Modal size={selectedEntryType === entryTypes.PURCHASE ? \"xl\" : \"lg\"} show={showPreview} backdrop=\"static\" keyboard={true}>\n\t\t\t\t<Modal.Body className=\"p-0\">\n\t\t\t\t\t<button type=\"button\" className=\"btn-icon btn close-btn\" onClick={closeEntryModal}>\n\t\t\t\t\t\t<i className=\"feather icon-x-circle\"></i>\n\t\t\t\t\t</button>\n\t\t\t\t\t<div className=\"px-4 py-5\">\n\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t<Col className={selectedEntryType === entryTypes.PURCHASE ? \"col-lg-4\" : \"col-lg-6\"}>\n\t\t\t\t\t\t\t\t<Preview source={selectedEntry?.file_path} containerStyles={{backgroundColor: \"#f5f5f5\", padding: 10}} zoom={true} />\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t<Col className={selectedEntryType === entryTypes.PURCHASE ? \"col-lg-8\" : \"col-lg-6\"}>\n\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t<Col className={selectedEntryType === entryTypes.PURCHASE ? \"col-lg-6\" : \"col-lg-12\"}>\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"w-100 form-control-select\"\n\t\t\t\t\t\t\t\t\t\t\t\tclassNamePrefix=\"select\"\n\t\t\t\t\t\t\t\t\t\t\t\tisDisabled\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={entryTypeList.find((i) => i.value === selectedEntry?.entry_type)}\n\t\t\t\t\t\t\t\t\t\t\t\toptions={entryTypeList}\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Entry type\"\n\t\t\t\t\t\t\t\t\t\t\t\tisSearchable={false}\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(data) => setselectedEntryType(data.value)}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t<Col lg={12}>\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group\">\n\t\t\t\t\t\t\t\t\t\t\t{selectedEntryType === entryTypes.SALE && <SalesForm entry={selectedEntry} onSuccess={onEntrySubmit} onShowLoader={setShowLoader} />}\n\t\t\t\t\t\t\t\t\t\t\t{selectedEntryType === entryTypes.EXPENDITURE && <ExpenditureForm entry={selectedEntry} onSuccess={onEntrySubmit} onShowLoader={setShowLoader} />}\n\t\t\t\t\t\t\t\t\t\t\t{selectedEntryType === entryTypes.PURCHASE && <PurchaseForm entry={selectedEntry} onSuccess={onEntrySubmit} onShowLoader={setShowLoader} />}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</div>\n\t\t\t\t</Modal.Body>\n\t\t\t</Modal>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default CheckedEntries;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/checkerList/index.js",["897","898","899","900","901"],"import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Row, Col, Card, Modal, Accordion, Button, ListGroup, FormControl, InputGroup } from \"react-bootstrap\";\nimport { Grid, GridColumn as Column } from \"@progress/kendo-react-grid\";\nimport { process } from \"@progress/kendo-data-query\";\nimport moment from \"moment\";\nimport DatePicker from \"react-datepicker\";\nimport { FaAngleDown } from \"react-icons/fa\";\n\nimport { callApi } from \"../../../services/apiService\";\nimport { showNotification } from \"../../../services/toasterService\";\nimport { ApiConstants } from \"../../../config/apiConstants\";\nimport { clientStatus } from \"../../../enums/clientStatus\";\nimport Spinner from \"../../../components/Spinner\";\nimport { DropdownFilterCell } from \"../../../components/CustomFilters/DropdownFilter\";\nimport ClientForm from \"./form\";\n\nconst options = [\"Approved\", \"Registered\"];\nconst StatusFilterCell = (props) => <DropdownFilterCell {...props} data={options} defaultItem={\"All\"} />;\n\nconst Clients = (props) => {\n  const [showLoader, setShowLoader] = useState(false);\n  const [clientsList, setClientsList] = useState([]);\n  const [startDate, setStartDate] = useState(null);\n  const [endDate, setEndDate] = useState(null);\n  const [clientsState, setClientsState] = useState({ skip: 0, take: 10 });\n  const [clientsGridData, setclientsGridData] = useState(null);\n  const [showEditModal, setshowEditModal] = useState(false);\n  const [isEdit, setIsEdit] = useState(false);\n  const [selectedItem, setSelectedItem] = useState(null);\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n  const [accordionList, setAccordionList] = useState([]);\n\n  React.useLayoutEffect(() => {\n    setWindowWidth(window.innerWidth > 992);\n  }, []);\n\n  const pagerSettings = { buttonCount: 5, info: true, type: \"numeric\", pageSizes: true, previousNext: true };\n\n  useEffect(() => {\n    getClients();\n  }, []);\n\n  useEffect(() => {\n    setclientsGridData(process(clientsList, clientsState));\n  }, [clientsList, clientsState]);\n\n  const pageChange = (event) => {\n    setClientsState({ ...clientsState, skip: event.page.skip, take: event.page.take });\n  };\n\n  const filterChange = (event) => {\n    setClientsState({ ...clientsState, filter: event.filter });\n  };\n\n  const resetFilters = () => {\n    setClientsState({ ...clientsState, filter: null });\n    setStartDate(null);\n    setEndDate(null);\n  };\n\n  const onSearchFilter = () => {\n    let dateFilters = [];\n    if (windowWidth) {\n      if (startDate) {\n        dateFilters.push({ field: \"join_date\", operator: \"gte\", value: moment(startDate).format(\"YYYY-MM-DD\") });\n      }\n      if (endDate) {\n        dateFilters.push({ field: \"join_date\", operator: \"lte\", value: moment(endDate).format(\"YYYY-MM-DD\") });\n      }\n      let updatedState = { ...clientsState, filter: { logic: \"and\", filters: dateFilters } };\n      setClientsState(updatedState);\n    } else {\n      if (startDate && !endDate) {\n        setAccordionList(accordionList.filter((data) => new Date(data.join_date) >= new Date(startDate)));\n      }\n      if (endDate && !startDate) {\n        setAccordionList(accordionList.filter((data) => new Date(data.join_date) < new Date(endDate)));\n      }\n      if (endDate && startDate) {\n        setAccordionList(accordionList.filter((data) => new Date(data.join_date) >= new Date(startDate) && new Date(data.join_date) <= new Date(endDate)));\n      }\n    }\n  };\n\n  const getClients = () => {\n    setShowLoader(true);\n    callApi(\"get\", ApiConstants.validator.checkerlist, {},true)\n      .then((response) => {\n        setShowLoader(false);\n        if (response && response.status_code === 200) {\n          let data = response.payload.map((item) => ({ ...item, status: item.verified_on ? clientStatus.APPROVED : clientStatus.REGISTERED }));\n          setClientsList(data);\n          setAccordionList(data);\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        setShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const closeModal = () => {\n    setshowEditModal(false);\n    setIsEdit(false);\n    setSelectedItem(null);\n  };\n\n  const onEdit = (data) => {\n    setSelectedItem(data);\n    setIsEdit(true);\n    setshowEditModal(true);\n  };\n\n  const onEditUser = () => {\n    closeModal();\n    getClients();\n  };\n\n  return (\n    <React.Fragment>\n      {showLoader && <Spinner />}\n      <Row>\n        <Col xl={12}>\n          <Card className=\"rounded\">\n            <Card.Body className=\"p-4\">\n              {/* <Row className=\"mb-3\">\n                <Col xs={12} md={4} xl={3}>\n                  <div className=\"date-picker-container\">\n                    <DatePicker className=\"form-control mb-2\" placeholderText=\"Start Date\" dateFormat=\"dd/MM/yyyy\" selected={startDate} onSelect={() => setEndDate(null)} onChange={setStartDate} />\n                    <i className=\"feather icon-calendar\"></i>\n                  </div>\n                </Col>\n                <Col xs={12} md={4} xl={3}>\n                  <div className=\"date-picker-container\">\n                    <DatePicker className=\"form-control mb-2\" minDate={startDate} placeholderText=\"End Date\" dateFormat=\"dd/MM/yyyy\" selected={endDate} onChange={setEndDate} />\n                    <i className=\"feather icon-calendar\"></i>\n                  </div>\n                </Col>\n                <Col xs={12} md={1} xl={1}>\n                  <button type=\"button\" onClick={onSearchFilter} className=\"btn-icon btn btn-primary search-button\">\n                    <i className=\"feather icon-search\"></i>\n                  </button>\n                </Col>\n                <Col xs={2} md={1} xl={1}>\n                  {(startDate || endDate) && (\n                    <div className=\"filter-close-btn\" role=\"button\" onClick={resetFilters}>\n                      <i className=\"feather icon-x\"></i>\n                    </div>\n                  )}\n                </Col>\n              </Row> */}\n              \n              {windowWidth && (\n                <Grid data={clientsGridData} skip={clientsState.skip} pageable={pagerSettings} pageSize={clientsState.take} onPageChange={pageChange} filterable={true} filter={clientsState.filter} onFilterChange={filterChange}>\n                  <Column field=\"id\" title=\"#\" width=\"60px\" filterable={false} cell={(props) => <td>{props.dataIndex + 1}</td>} />\n                  <Column field=\"name\" width=\"250\" title=\"Checker Name\" />\n                  {/* <Column field=\"trn_number\" width=\"160\" title=\"TRN\" /> */}\n                  <Column field=\"country_name\" width=\"160\" title=\"Country\" />\n                  <Column field=\"whatsapp_no\" width=\"160\" title=\"Whatsapp Number\" />\n                  {/* <Column field=\"vat_period\" width=\"160\" title=\"Next Due Date\" /> */}\n                  {/* <Column field=\"contact_person\" width=\"200\" title=\"Contact Person\" /> */}\n                  {/* <Column field=\"join_date\" width=\"150\" filterable={false} title=\"Join Date\" cell={(props) => <td>{moment(props.dataItem.join_date).format(\"DD-MMM-YYYY\")}</td>} /> */}\n                  {/* <Column field=\"email\" width=\"300\" title=\"Email\" /> */}\n                  {/* <Column field=\"cp_mobile\" width=\"180\" title=\"Contact No\" cell={(props) => <td>{`${props.dataItem.cp_country_code} ${props.dataItem.cp_mobile}`}</td>} /> */}\n                  {/* <Column field=\"whatsapp_no\" width=\"180\" title=\"WhatsApp No\" cell={(props) => <td>{`${props.dataItem.w_country_code} ${props.dataItem.whatsapp_no}`}</td>} /> */}\n                  {/* <Column\n                    field=\"status\"\n                    title=\"Status\"\n                    filterCell={StatusFilterCell}\n                    width=\"150\"\n                    cell={(props) => (\n                      <td>\n                        <div className={props.dataItem.verified_on ? \"text-success\" : \"text-warning\"}>{props.dataItem.status}</div>\n                      </td>\n                    )}\n                  /> */}\n                  {/* <Column\n                    field=\"Actions\"\n                    filterable={false}\n                    width=\"120\"\n                    cell={(props) => (\n                      <td>\n                        <div className=\"action-panel\">\n                          <Link className=\"text-primary\" to={\"/validator/clients/profile/\" + props.dataItem.id}>\n                            <button type=\"button\" className=\"btn-icon btn btn-outline-primary\" title=\"Edit\">\n                              <i className=\"feather icon-eye\"></i>\n                            </button>\n                          </Link>\n                          <button type=\"button\" className=\"btn-icon btn btn-outline-primary\" title=\"Edit\" onClick={() => onEdit(props.dataItem)}>\n                            <i className=\"feather icon-edit-2\"></i>\n                          </button>\n                        </div>\n                      </td>\n                    )}\n                  /> */}\n                </Grid>\n              )}\n              <div>\n                {!windowWidth && (\n                  <>\n                    <InputGroup className=\"mb-2\">\n                      <FormControl\n                        className=\"form-control\"\n                        placeholder=\"Company\"\n                        aria-label=\"Company\"\n                        onChange={(event) => {\n                          setAccordionList(clientsGridData.data);\n                          return event.target.value ? setAccordionList(clientsGridData.data?.filter((data) => data.name?.includes(event.target.value))) : setAccordionList(clientsGridData.data);\n                        }}\n                      />\n                    </InputGroup>\n                    <InputGroup className=\"mb-2\">\n                      <FormControl\n                        className=\"form-control\"\n                        placeholder=\"Country\"\n                        aria-label=\"Country\"\n                        onChange={(event) => {\n                          setAccordionList(clientsGridData.data);\n                          return event.target.value ? setAccordionList(clientsGridData.data?.filter((data) => data.country_name?.includes(event.target.value))) : setAccordionList(clientsGridData.data);\n                        }}\n                      />\n                    </InputGroup>\n                    <InputGroup className=\"mb-2\">\n                      <FormControl\n                        className=\"form-control\"\n                        placeholder=\"Whatsapp\"\n                        aria-label=\"Whatsapp\"\n                        onChange={(event) => {\n                          setAccordionList(clientsGridData.data);\n                          return event.target.value ? setAccordionList(clientsGridData.data?.filter((data) => data.whatsapp_no?.includes(event.target.value))) : setAccordionList(clientsGridData.data);\n                        }}\n                      />\n                    </InputGroup>\n                    {/* <InputGroup className=\"mb-2\">\n                      <FormControl\n                        className=\"form-control\"\n                        placeholder=\"WhatsApp Number\"\n                        aria-label=\"WhatsApp Number\"\n                        onChange={(event) => {\n                          setAccordionList(clientsGridData.data);\n                          return event.target.value ? setAccordionList(clientsGridData.data?.filter((data) => data.whatsapp_no?.includes(event.target.value))) : setAccordionList(clientsGridData.data);\n                        }}\n                      />\n                    </InputGroup> */}\n                    {/* <InputGroup className=\"mb-2\">\n                      <FormControl\n                        className=\"form-control\"\n                        placeholder=\"Validator\"\n                        aria-label=\"Validator\"\n                        onChange={(event) => {\n                          setAccordionList(clientsGridData.data);\n                          return event.target.value ? setAccordionList(clientsGridData.data?.filter((data) => data.validator_name?.includes(event.target.value))) : setAccordionList(clientsGridData.data);\n                        }}\n                      />\n                    </InputGroup> */}\n\n                    <Accordion defaultActiveKey=\"0\">\n                      {accordionList &&\n                        accordionList.length > 0 &&\n                        accordionList.map((row) => (\n                          <Card key={row.id} style={{ marginBottom: 4 }}>\n                            <Accordion.Toggle as={Card.Header} style={{ backgroundColor: \"#7599b1\", color: \"#ffffff\", padding: \"8px 16px\" }} eventKey={row.id}>\n                              <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n                                Name: {row.name}\n                                <Button variant=\"outline-light\" size=\"sm\">\n                                  <FaAngleDown />\n                                </Button>\n                              </div>\n                            </Accordion.Toggle>\n                            <Accordion.Collapse eventKey={row.id}>\n                              <Card.Body>\n                                <div className=\"action-panel\" style={{ dispaly: \"flex\", justifyContent: \"flex-end\", marginBottom: 16 }}>\n                                  <button type=\"button\" className=\"btn btn-outline-primary\" title=\"View\" onClick={() => onEdit(row)}>\n                                    <i className=\"feather icon-edit-2\"></i>\n                                  </button>\n                                </div>\n                                <ListGroup>\n                                {/* <ListGroup.Item>\n                                    <span style={{ padding: \"0 16px 0 8px\" }}>TRN:</span>\n                                    <span> {row.trn_number}</span>\n                                  </ListGroup.Item>\n                        \n                                  <ListGroup.Item>\n                                    <span style={{ padding: \"0 16px 0 8px\" }}>Joining Date:</span>\n                                    <span> {moment(row.join_date).format(\"DD-MMM-YYYY\")}</span>\n                                  </ListGroup.Item> */}\n                                  <ListGroup.Item>\n                                    <span style={{ padding: \"0 16px 0 8px\" }}>Country:</span>\n                                    <span> {row.country_name}</span>\n                                  </ListGroup.Item>\n                             \n                                  <ListGroup.Item>\n                                    <span style={{ padding: \"0 16px 0 8px\" }}>Whatsapp Number:</span>\n                                    <span>{`${row.whatsapp_no}`}</span>\n                                  </ListGroup.Item>\n                                  {/* <ListGroup.Item>\n                                    <span style={{ padding: \"0 16px 0 8px\" }}>Next Due Date:</span>\n                                    <span> {moment(row.join_date).format(\"DD-MMM-YYYY\")}</span>\n                                  </ListGroup.Item> */}\n                                </ListGroup>\n                              </Card.Body>\n                            </Accordion.Collapse>\n                          </Card>\n                        ))}\n                    </Accordion>\n                  </>\n                )}\n              </div>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n      <Modal size=\"lg\" show={showEditModal} backdrop=\"static\" keyboard={true}>\n        <Modal.Body className=\"p-0\">\n          <button type=\"button\" className=\"btn-icon btn close-btn\" onClick={closeModal}>\n            <i className=\"feather icon-x-circle\"></i>\n          </button>\n          <ClientForm onSuccess={onEditUser} onShowLoader={setShowLoader} isEdit={isEdit} dataItem={selectedItem} {...props} />\n        </Modal.Body>\n      </Modal>\n    </React.Fragment>\n  );\n};\n\nexport default Clients;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/validator-pending-entries/index.js",["902"],"import React, { useState, useEffect } from \"react\";\nimport { Row, Col, Card, Modal, InputGroup, FormControl, Accordion, Button, ListGroup } from \"react-bootstrap\";\nimport { Grid, GridColumn as Column } from \"@progress/kendo-react-grid\";\nimport { process } from \"@progress/kendo-data-query\";\nimport moment from \"moment\";\nimport DatePicker from \"react-datepicker\";\nimport Select from \"react-select\";\nimport { FaAngleDown } from \"react-icons/fa\";\n\nimport { callApi } from \"../../../services/apiService\";\nimport { ApiConstants } from \"../../../config/apiConstants\";\nimport { showNotification } from \"../../../services/toasterService\";\nimport Spinner from \"../../../components/Spinner\";\nimport Preview from \"../../../components/Preview\";\nimport { entryTypeList } from \"../../../enums/entryTypeList\";\nimport { entryTypes } from \"../../../enums/entryTypes\";\nimport FileIcon from \"../../../components/FileIcon\";\nimport SalesForm from \"./forms/salesForm\";\nimport ExpenditureForm from \"./forms/expenditureForm\";\nimport PurchaseForm from \"./forms/purchaseForm\";\nimport useWindowSize from \"../../../hooks/useWindowSize\";\n\nconst PendingEntries = (props) => {\n  const [showLoader, setShowLoader] = useState(false);\n  const [entriesList, setEntriesList] = useState([]);\n  const [startDate, setStartDate] = useState(null);\n  const [endDate, setEndDate] = useState(null);\n  const [showPreview, setshowPreview] = useState(false);\n  const [selectedEntry, setselectedEntry] = useState(null);\n  const [selectedEntryType, setselectedEntryType] = useState(\"\");\n  const [showDeleteConfirm, setDeleteConfirm] = React.useState(false);\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n  const [accordionList, setAccordionList] = useState([]);\n  const [gridState, setgridState] = useState({ skip: 0, take: 10 });\n  const [gridData, setgridData] = useState(null);\n  const [gridWidth, setgridWidth] = useState(1024);\n  const windowSize = useWindowSize();\n\n  React.useLayoutEffect(() => {\n    setWindowWidth(window.innerWidth > 992);\n  }, []);\n\n  const pagerSettings = { buttonCount: 5, info: true, type: \"numeric\", pageSizes: true, previousNext: true };\n\n  useEffect(() => {\n    let resizeObserver = new ResizeObserver(() => {\n      let gridContext = document.querySelector(\".k-grid\");\n      if (gridContext?.offsetWidth > gridWidth) {\n        setgridWidth(gridContext.offsetWidth);\n      }\n    });\n    resizeObserver.observe(document.querySelector(\".k-grid\"));\n    getData();\n  }, [gridWidth]);\n\n  useEffect(() => {\n    setgridData(process(entriesList, gridState));\n  }, [entriesList, gridState]);\n\n  const setWidth = (minWidth) => {\n    if (windowSize.width < 992) return minWidth;\n    let dynamicWidth = gridWidth - 850;\n    let width = dynamicWidth > minWidth ? dynamicWidth : minWidth;\n    return width;\n  };\n\n  const pageChange = (event) => {\n    let updatedState = { ...gridState, skip: event.page.skip, take: event.page.take };\n    setgridState({ ...updatedState });\n  };\n\n  const filterChange = (event) => {\n    let updatedState = { ...gridState, filter: event.filter };\n    setgridState(updatedState);\n  };\n\n  const onSearchFilter = () => {\n    let dateFilters = [];\n    if (windowWidth) {\n      if (startDate) {\n        dateFilters.push({ field: \"invoice_date\", operator: \"gte\", value: moment(startDate).format(\"YYYY-MM-DD\") });\n      }\n      if (endDate) {\n        dateFilters.push({ field: \"invoice_date\", operator: \"lte\", value: moment(endDate).format(\"YYYY-MM-DD\") });\n      }\n      let updatedState = { ...gridState, filter: { logic: \"and\", filters: dateFilters } };\n      setgridState(updatedState);\n    } else {\n      if (startDate && !endDate) {\n        setAccordionList(accordionList.filter((data) => new Date(data.invoice_date) >= new Date(startDate)));\n      }\n      if (endDate && !startDate) {\n        setAccordionList(accordionList.filter((data) => new Date(data.invoice_date) < new Date(endDate)));\n      }\n      if (endDate && startDate) {\n        setAccordionList(accordionList.filter((data) => new Date(data.invoice_date) >= new Date(startDate) && new Date(data.invoice_date) <= new Date(endDate)));\n      }\n    }\n  };\n\n  const resetFilters = () => {\n    let updatedState = { ...gridState, filter: null };\n    setgridState(updatedState);\n    setStartDate(null);\n    setEndDate(null);\n  };\n\n  const getData = () => {\n    setShowLoader(true);\n    callApi(\"get\", ApiConstants.admin.adminvalidatorpendinglist, {}, true)\n      .then((response) => {\n        setShowLoader(false);\n        if (response && response.status_code === 200) {\n          setEntriesList(response.payload);\n          setAccordionList(response.payload);\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        setShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const viewEntry = (entry) => {\n    setselectedEntry(entry);\n    setselectedEntryType(entry.entry_type);\n    setshowPreview(true);\n  };\n\n  const closeEntryModal = () => {\n    setshowPreview(false);\n    setselectedEntryType(\"\");\n  };\n\n  const onEntrySubmit = () => {\n    closeEntryModal();\n    getData();\n  };\n\n  const deleteEntry = (entry) => {\n    setselectedEntry(entry);\n    setDeleteConfirm(true);\n  };\n\n  const deleteData = () => {\n    setShowLoader(true);\n    callApi(\"post\", ApiConstants.entry.validatordeleteentry, { entry_id: selectedEntry.id }, true)\n      .then((response) => {\n        setShowLoader(false);\n        if (response && response.status_code === 200) {\n          showNotification(\"Success\", response.message, \"success\");\n          getData();\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        setShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  return (\n    <React.Fragment>\n      {showLoader && <Spinner />}\n      <Row>\n        <Col xl={12}>\n          <Card className=\"rounded\">\n            <Card.Body className=\"p-4\">\n              <Row className=\"mb-3\">\n                <Col xs={12} md={4} xl={3}>\n                  <div className=\"date-picker-container\">\n                    <DatePicker className=\"form-control mb-2\" placeholderText=\"Start Date\" dateFormat=\"dd/MM/yyyy\" selected={startDate} onSelect={() => setEndDate(null)} onChange={setStartDate} />\n                    <i className=\"feather icon-calendar\"></i>\n                  </div>\n                </Col>\n                <Col xs={12} md={4} xl={3}>\n                  <div className=\"date-picker-container\">\n                    <DatePicker className=\"form-control mb-2\" minDate={startDate} placeholderText=\"End Date\" dateFormat=\"dd/MM/yyyy\" selected={endDate} onChange={setEndDate} />\n                    <i className=\"feather icon-calendar\"></i>\n                  </div>\n                </Col>\n                <Col xs={12} md={1} xl={1}>\n                  <button type=\"button\" className=\"btn-icon btn btn-primary search-button\" onClick={onSearchFilter}>\n                    <i className=\"feather icon-search\"></i>\n                  </button>\n                </Col>\n                <Col xs={2} md={1} xl={1}>\n                  {(startDate || endDate) && (\n                    <div className=\"filter-close-btn\" role=\"button\" onClick={resetFilters}>\n                      <i className=\"feather icon-x\"></i>\n                    </div>\n                  )}\n                </Col>\n              </Row>\n              {windowWidth && (\n                <Grid data={gridData} skip={gridState.skip} pageSize={gridState.take} pageable={pagerSettings} onPageChange={pageChange} filterable={true} filter={gridState.filter} onFilterChange={filterChange}>\n                  {/* pageable={true} */}\n                  <Column field=\"id\" filterable={false} title=\"#\" width=\"60px\" cell={(props) => <td>{props.dataIndex + 1}</td>} />\n                  <Column field=\"name\" title=\"Client Name\" width={setWidth(200)} />\n                  <Column field=\"validator_name\" title=\"Validator Name\" width=\"200px\" />\n                  <Column field=\"checker_name\" title=\"Checker Name\" width=\"200px\" />\n                  <Column\n                    field=\"invoice_date\"\n                    filterable={false}\n                    width=\"180\"\n                    title=\"Invoice Date\"\n                    cell={(props) => (\n                      <td>\n                        <div>{moment(props.dataItem.invoice_date).format(\"DD-MMM-YYYY\")}</div>\n                      </td>\n                    )}\n                  />\n                  {/* <Column\n                    field=\"file_path\"\n                    filterable={false}\n                    title=\"Document\"\n                    width=\"100\"\n                    cell={(props) => (\n                      <td>\n                        <div className=\"text-break-all\">\n                          <FileIcon className=\"mr-2\" source={props.dataItem.file_path} style={{ width: 25 }} />\n                        </div>\n                      </td>\n                    )}\n                  /> */}\n                  <Column\n                    field=\"View\"\n                    title=\"View\"\n                    filterable={false}\n                    width=\"100\"\n                    cell={(props) => (\n                      <td>\n                        <div className=\"action-panel\">\n                          <button type=\"button\" className=\"btn-icon btn btn-outline-primary\" title=\"View\" onClick={() => viewEntry(props.dataItem)}>\n                            <i className=\"feather icon-eye\"></i>\n                          </button>\n                        </div>\n                      </td>\n                    )}\n                  />\n                  <Column\n                    field=\"Actions\"\n                    title=\"Actions\"\n                    filterable={false}\n                    width=\"120\"\n                    cell={(props) => (\n                      <td>\n                        {props.dataItem.requested_for_delete > 0 && (\n                          <div className=\"action-panel\">\n                            <button type=\"button\" className=\"btn-icon btn btn-outline-danger\" title=\"Delete\" onClick={() => deleteEntry(props.dataItem)}>\n                              <i className=\"feather icon-trash\"></i>\n                            </button>\n                          </div>\n                        )}\n                      </td>\n                    )}\n                  />\n                </Grid>\n              )}\n              <div>\n                {!windowWidth && (\n                  <>\n                    <InputGroup className=\"mb-2\">\n                      <FormControl\n                        className=\"form-control\"\n                        placeholder=\"Client Name\"\n                        aria-label=\"Client Name\"\n                        onChange={(event) => {\n                          setAccordionList(entriesList);\n                          return event.target.value ? setAccordionList(accordionList?.filter((data) => data.name?.includes(event.target.value))) : setAccordionList(entriesList);\n                        }}\n                      />\n                    </InputGroup>\n                    <InputGroup className=\"mb-2\">\n                      <FormControl\n                        className=\"form-control\"\n                        placeholder=\"Checker Name\"\n                        aria-label=\"Checker Name\"\n                        onChange={(event) => {\n                          setAccordionList(entriesList);\n                          return event.target.value ? setAccordionList(accordionList?.filter((data) => data.checker_name?.includes(event.target.value))) : setAccordionList(entriesList);\n                        }}\n                      />\n                    </InputGroup>\n\n                    <Accordion defaultActiveKey=\"0\">\n                      {accordionList &&\n                        accordionList.length > 0 &&\n                        accordionList.map((row) => (\n                          <Card key={row.id} style={{ marginBottom: 4 }}>\n                            <Accordion.Toggle as={Card.Header} style={{ backgroundColor: \"#7599b1\", color: \"#ffffff\", padding: \"8px 16px\" }} eventKey={row.id}>\n                              <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n                                {row.name}\n                                <Button variant=\"outline-light\" size=\"sm\">\n                                  <FaAngleDown />\n                                </Button>\n                              </div>\n                            </Accordion.Toggle>\n                            <Accordion.Collapse eventKey={row.id}>\n                              <Card.Body>\n                                <div className=\"action-panel\" style={{ dispaly: \"flex\", justifyContent: \"flex-end\", marginBottom: 16 }}>\n                                  <button type=\"button\" className=\"btn btn-outline-primary\" title=\"View\" onClick={() => viewEntry(row)}>\n                                    View <i className=\"feather icon-eye\"></i>\n                                  </button>\n                                </div>\n                                <ListGroup>\n                                  <ListGroup.Item>\n                                    <span style={{ padding: \"0 16px 0 8px\" }}>Validator:</span>\n                                    <span> {row.validator_name}</span>\n                                  </ListGroup.Item>\n                                  <ListGroup.Item>\n                                    <span style={{ padding: \"0 16px 0 8px\" }}>Checker:</span>\n                                    <span> {row.checker_name}</span>\n                                  </ListGroup.Item>\n                                  <ListGroup.Item>\n                                    <span style={{ padding: \"0 16px 0 8px\" }}>Invoice Date:</span>\n                                    <span> {moment(row.invoice_date).format(\"DD-MMM-YYYY\")}</span>\n                                  </ListGroup.Item>\n                                  <ListGroup.Item>\n                                    <span style={{ padding: \"0 16px 0 8px\" }}>Action:</span>\n                                    <button type=\"button\" className=\"btn-icon btn btn-outline-danger\" title=\"Delete\" onClick={() => deleteEntry(props.dataItem)}>\n                                      <i className=\"feather icon-trash\"></i>\n                                    </button>\n                                  </ListGroup.Item>\n                                </ListGroup>\n                              </Card.Body>\n                            </Accordion.Collapse>\n                          </Card>\n                        ))}\n                    </Accordion>\n                  </>\n                )}\n              </div>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n      <Modal size={selectedEntryType === entryTypes.PURCHASE ? \"xl\" : \"lg\"} show={showPreview} backdrop=\"static\" keyboard={true}>\n        <Modal.Body className=\"p-0\">\n          <button type=\"button\" className=\"btn-icon btn close-btn\" onClick={closeEntryModal}>\n            <i className=\"feather icon-x-circle\"></i>\n          </button>\n          <div className=\"px-4 py-5\">\n            <Row>\n              <Col className={selectedEntryType === entryTypes.PURCHASE ? \"col-lg-4 col-12 mt-3\" : \"col-lg-6 col-12 mt-3\"}>\n                <Preview source={selectedEntry?.file_path} containerStyles={{ backgroundColor: \"#f5f5f5\", padding: 10 }} zoom={true} />\n              </Col>\n              <Col className={selectedEntryType === entryTypes.PURCHASE ? \"col-lg-8 col-12\" : \"col-lg-6 col-12\"}>\n                <Row>\n                  <Col className={selectedEntryType === entryTypes.PURCHASE ? \"col-lg-6\" : \"col-lg-12\"}>\n                    <div className=\"input-group my-3\">\n                      <Select\n                        className=\"w-100 form-control-select\"\n                        classNamePrefix=\"select\"\n                        isDisabled\n                        value={entryTypeList.find((i) => i.value === selectedEntry?.entry_type)}\n                        options={entryTypeList}\n                        placeholder=\"Entry type\"\n                        isSearchable={false}\n                        onChange={(data) => setselectedEntryType(data.value)}\n                      />\n                    </div>\n                  </Col>\n                </Row>\n                <Row>\n                  <Col lg={12} xs={12}>\n                    {selectedEntryType === entryTypes.SALE && <SalesForm entry={selectedEntry} onSuccess={onEntrySubmit} onShowLoader={setShowLoader} />}\n                    {selectedEntryType === entryTypes.EXPENDITURE && <ExpenditureForm entry={selectedEntry} onSuccess={onEntrySubmit} onShowLoader={setShowLoader} />}\n                    {selectedEntryType === entryTypes.PURCHASE && <PurchaseForm entry={selectedEntry} onSuccess={onEntrySubmit} onShowLoader={setShowLoader} />}\n                  </Col>\n                </Row>\n              </Col>\n            </Row>\n          </div>\n        </Modal.Body>\n      </Modal>\n      <Modal size=\"md\" show={showDeleteConfirm} backdrop=\"static\" keyboard={true}>\n        <Modal.Header>\n          <h5 className=\"card-title\">Confirm Delete</h5>\n        </Modal.Header>\n        <Modal.Body>\n          <div>\n            <span>Are you sure that to delete this entry?</span>\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <div>\n            <button className=\"btn btn-outline-primary\" onClick={() => setDeleteConfirm(false)}>\n              No\n            </button>\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => {\n                setDeleteConfirm(false);\n                deleteData();\n              }}\n            >\n              Yes\n            </button>\n          </div>\n        </Modal.Footer>\n      </Modal>\n    </React.Fragment>\n  );\n};\n\nexport default PendingEntries;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/approved-entries/index.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/checker-pending-entries/index.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/rejected-entries/index.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/approved-entries/index.js",["903","904"],"import React, {useState, useEffect} from \"react\";\nimport {Row, Col, Card, Modal, Accordion, Button, ListGroup, InputGroup, FormControl} from \"react-bootstrap\";\nimport {Grid, GridColumn as Column} from \"@progress/kendo-react-grid\";\nimport {process} from \"@progress/kendo-data-query\";\nimport moment from \"moment\";\nimport DatePicker from \"react-datepicker\";\nimport Select from \"react-select\";\nimport {FaAngleDown} from \"react-icons/fa\";\nimport {AiOutlineReload} from \"react-icons/ai\";\nimport {showNotification} from \"../../../services/toasterService\";\nimport {callApi} from \"../../../services/apiService\";\nimport {ApiConstants} from \"../../../config/apiConstants\";\nimport Spinner from \"../../../components/Spinner\";\nimport Preview from \"../../../components/Preview\";\nimport {entryTypeList} from \"../../../enums/entryTypeList\";\nimport {entryTypes} from \"../../../enums/entryTypes\";\nimport SalesForm from \"./forms/salesForm\";\nimport ExpenditureForm from \"./forms/expenditureForm\";\nimport PurchaseForm from \"./forms/purchaseForm\";\n\nconst CheckedEntries = (props) => {\n\tconst [showLoader, setShowLoader] = useState(false);\n\tconst [entriesList, setEntriesList] = useState([]);\n\tconst [startDate, setStartDate] = useState(null);\n\tconst [endDate, setEndDate] = useState(null);\n\tconst [showPreview, setshowPreview] = useState(false);\n\tconst [selectedEntry, setselectedEntry] = useState(null);\n\tconst [selectedEntryType, setselectedEntryType] = useState(\"\");\n\tconst [accordionList, setAccordionList] = useState([]);\n\tconst [windowWidth, setWindowWidth] = useState(window.innerWidth);\n\n\tReact.useLayoutEffect(() => {\n\t\tsetWindowWidth(window.innerWidth > 992);\n\t}, []);\n\n\tconst [gridState, setgridState] = useState({\n\t\tskip: 0,\n\t\ttake: 10,\n\t});\n\tconst [gridData, setgridData] = useState(null);\n\n\tconst [gridWidth, setgridWidth] = useState(1024);\n\n\tuseEffect(() => {\n\t\tlet resizeObserver = new ResizeObserver(() => {\n\t\t\thandleResize();\n\t\t});\n\t\tresizeObserver.observe(document.querySelector(\".k-grid\"));\n\t\tgetData();\n\t}, []);\n\n\tuseEffect(() => {\n\t\tloadGridData();\n\t}, [entriesList, gridState]);\n\n\tconst handleResize = () => {\n\t\tlet gridContext = document.querySelector(\".k-grid\");\n\t\tif (gridContext?.offsetWidth > gridWidth) {\n\t\t\tsetgridWidth(gridContext.offsetWidth);\n\t\t}\n\t};\n\n\tconst loadGridData = () => {\n\t\tlet updatedData = process(entriesList, gridState);\n\t\tsetgridData(updatedData);\n\t};\n\n\tconst pageChange = (event) => {\n\t\tlet updatedState = {\n\t\t\t...gridState,\n\t\t\tskip: event.page.skip,\n\t\t\ttake: event.page.take,\n\t\t};\n\t\tsetgridState({...updatedState});\n\t};\n\n\tconst filterChange = (event) => {\n\t\tlet updatedState = {\n\t\t\t...gridState,\n\t\t\tfilter: event.filter,\n\t\t};\n\t\tsetgridState(updatedState);\n\t};\n\n\tconst onSearchFilter = () => {\n\t\tlet dateFilters = [];\n\t\tif (startDate) {\n\t\t\tdateFilters.push({\n\t\t\t\tfield: \"invoice_date\",\n\t\t\t\toperator: \"gte\",\n\t\t\t\tvalue: moment(startDate).format(\"YYYY-MM-DD\"),\n\t\t\t});\n\t\t}\n\n\t\tif (endDate) {\n\t\t\tdateFilters.push({\n\t\t\t\tfield: \"invoice_date\",\n\t\t\t\toperator: \"lte\",\n\t\t\t\tvalue: moment(endDate).format(\"YYYY-MM-DD\"),\n\t\t\t});\n\t\t}\n\n\t\tlet updatedState = {\n\t\t\t...gridState,\n\t\t\tfilter: {\n\t\t\t\tlogic: \"and\",\n\t\t\t\tfilters: dateFilters,\n\t\t\t},\n\t\t};\n\t\tsetgridState(updatedState);\n\t};\n\n\tconst resetFilters = () => {\n\t\tlet updatedState = {\n\t\t\t...gridState,\n\t\t\tfilter: null,\n\t\t};\n\t\tsetgridState(updatedState);\n\t\tsetStartDate(null);\n\t\tsetEndDate(null);\n\t};\n\n\tconst getData = () => {\n\t\tsetShowLoader(true);\n\t\tcallApi(\"get\", ApiConstants.entry.validatorapprovedlist, {}, true)\n\t\t\t.then((response) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tlet temp = response.payload;\n\t\t\t\t\tconsole.log(temp);\n\t\t\t\t\tsetEntriesList(temp);\n\t\t\t\t\tsetAccordionList(temp);\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\tconst viewEntry = (entry) => {\n\t\tsetselectedEntry(entry);\n\n\t\tsetselectedEntryType(entry.entry_type);\n\t\tsetshowPreview(true);\n\t};\n\n\tconst closeEntryModal = () => {\n\t\tsetshowPreview(false);\n\t\tsetselectedEntryType(\"\");\n\t};\n\n\tconst onEntrySubmit = () => {\n\t\tcloseEntryModal();\n\t\tgetData();\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t{showLoader && <Spinner />}\n\t\t\t<Row>\n\t\t\t\t<Col xl={12}>\n\t\t\t\t\t<Card className=\"rounded\">\n\t\t\t\t\t\t<Card.Body className=\"p-4\">\n\t\t\t\t\t\t\t<Row className=\"mb-3\">\n\t\t\t\t\t\t\t\t<Col xs={12} md={4} xl={3}>\n\t\t\t\t\t\t\t\t\t<div className=\"date-picker-container\">\n\t\t\t\t\t\t\t\t\t\t<DatePicker className=\"form-control mb-2\" placeholderText=\"Start Date\" dateFormat=\"dd/MM/yyyy\" selected={startDate} onSelect={() => setEndDate(null)} onChange={setStartDate} />\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-calendar\"></i>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col xs={12} md={4} xl={3}>\n\t\t\t\t\t\t\t\t\t<div className=\"date-picker-container\">\n\t\t\t\t\t\t\t\t\t\t<DatePicker className=\"form-control mb-2\" minDate={startDate} placeholderText=\"End Date\" dateFormat=\"dd/MM/yyyy\" selected={endDate} onChange={setEndDate} />\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-calendar\"></i>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col xs={10} md={1} xl={1}>\n\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn-icon btn btn-primary search-button\" onClick={onSearchFilter}>\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-search\"></i>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col xs={2} md={1} xl={1}>\n\t\t\t\t\t\t\t\t\t{(startDate || endDate) && (\n\t\t\t\t\t\t\t\t\t\t<div className=\"filter-close-btn\" role=\"button\" onClick={resetFilters}>\n\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-x\"></i>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col md={1} xl={4} style={{display: \"flex\", justifyContent: \"flex-end\"}}>\n\t\t\t\t\t\t\t\t\t<Button size=\"sm\" onClick={getData}>\n\t\t\t\t\t\t\t\t\t\t<AiOutlineReload size={`1.8em`} />\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</Row>\n\n\t\t\t\t\t\t\t{windowWidth && (\n\t\t\t\t\t\t\t\t<Grid data={gridData} skip={gridState.skip} pageable={true} pageSize={gridState.take} onPageChange={pageChange} filterable={true} filter={gridState.filter} onFilterChange={filterChange}>\n\t\t\t\t\t\t\t\t\t<Column field=\"user_name\" title=\"Client Name\" width={250} />\n\t\t\t\t\t\t\t\t\t<Column field=\"checker_name\" title=\"Checker Name\" width={250} />\n\t\t\t\t\t\t\t\t\t<Column\n\t\t\t\t\t\t\t\t\t\tfield=\"invoice_date\"\n\t\t\t\t\t\t\t\t\t\tfilterable={false}\n\t\t\t\t\t\t\t\t\t\twidth=\"180\"\n\t\t\t\t\t\t\t\t\t\ttitle=\"Invoice Date\"\n\t\t\t\t\t\t\t\t\t\tcell={(props) => (\n\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t<div>{moment(props.dataItem.invoice_date).format(\"DD-MMM-YYYY\")}</div>\n\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Column field=\"invoice_number\" title=\"Invoice #\" width=\"180px\" />\n\t\t\t\t\t\t\t\t\t<Column field=\"amount\" title=\"Amount\" width=\"150px\" />\n\t\t\t\t\t\t\t\t\t<Column\n\t\t\t\t\t\t\t\t\t\tfield=\"entry_type\"\n\t\t\t\t\t\t\t\t\t\ttitle=\"Type\"\n\t\t\t\t\t\t\t\t\t\twidth=\"150px\"\n\t\t\t\t\t\t\t\t\t\tcell={(props) => (\n\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t<div>{props.dataItem.entry_type === entryTypes.SALE ? \"Sales\" : props.dataItem.entry_type === entryTypes.PURCHASE ? \"Purchase\" : props.dataItem.entry_type === entryTypes.EXPENDITURE ? \"Expenditure\" : \"\"}</div>\n\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Column\n\t\t\t\t\t\t\t\t\t\tfield=\"View\"\n\t\t\t\t\t\t\t\t\t\tfilterable={false}\n\t\t\t\t\t\t\t\t\t\ttitle=\"View\"\n\t\t\t\t\t\t\t\t\t\twidth=\"100px\"\n\t\t\t\t\t\t\t\t\t\tcell={(props) => (\n\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"action-panel\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn-icon btn btn-outline-primary\" title=\"View\" onClick={() => viewEntry(props.dataItem)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-eye\"></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{!windowWidth && (\n\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t<InputGroup className=\"mb-2\">\n\t\t\t\t\t\t\t\t\t\t\t<FormControl\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Client Name\"\n\t\t\t\t\t\t\t\t\t\t\t\taria-label=\"Client Name\"\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetAccordionList(entriesList);\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn event.target.value ? setAccordionList(accordionList?.filter((data) => data.name?.includes(event.target.value))) : setAccordionList(entriesList);\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</InputGroup>\n\t\t\t\t\t\t\t\t\t\t<InputGroup className=\"mb-2\">\n\t\t\t\t\t\t\t\t\t\t\t<FormControl\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Checker Name\"\n\t\t\t\t\t\t\t\t\t\t\t\taria-label=\"Checker Name\"\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetAccordionList(entriesList);\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn event.target.value ? setAccordionList(accordionList?.filter((data) => data.checker_name?.includes(event.target.value))) : setAccordionList(entriesList);\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</InputGroup>\n\n\t\t\t\t\t\t\t\t\t\t<Accordion defaultActiveKey=\"0\">\n\t\t\t\t\t\t\t\t\t\t\t{accordionList &&\n\t\t\t\t\t\t\t\t\t\t\t\taccordionList.length > 0 &&\n\t\t\t\t\t\t\t\t\t\t\t\taccordionList.map((row) => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Card key={row.id} style={{marginBottom: 4}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Accordion.Toggle as={Card.Header} style={{backgroundColor: \"#7599b1\", color: \"#ffffff\", padding: \"8px 16px\"}} eventKey={row.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div style={{display: \"flex\", justifyContent: \"space-between\"}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{row.user_name}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button variant=\"outline-light\" size=\"sm\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<FaAngleDown />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Accordion.Toggle>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Accordion.Collapse eventKey={row.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"action-panel\" style={{dispaly: \"flex\", justifyContent: \"flex-end\", marginBottom: 16}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn btn-outline-primary\" title=\"View\" onClick={() => viewEntry(row)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tView <i className=\"feather icon-eye\"></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>Checker:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span> {row.checker_name}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>Invoice Date:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span> {moment(row.invoice_date).format(\"DD-MMM-YYYY\")}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>Invoice Number:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span> {row.invoice_number}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>Amount:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span> {row.amount} </span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item style={{display: \"flex\"}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>Type:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div>{row.entry_type === entryTypes.SALE ? \"Sales\" : row.entry_type === entryTypes.PURCHASE ? \"Purchase\" : row.entry_type === entryTypes.EXPENDITURE ? \"Expenditure\" : \"\"}</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Accordion.Collapse>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</Accordion>\n\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t</Card>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\n\t\t\t<Modal size={selectedEntryType === entryTypes.PURCHASE ? \"xl\" : \"lg\"} show={showPreview} backdrop=\"static\" keyboard={true}>\n\t\t\t\t<Modal.Body className=\"p-0\">\n\t\t\t\t\t<button type=\"button\" className=\"btn-icon btn close-btn\" onClick={closeEntryModal}>\n\t\t\t\t\t\t<i className=\"feather icon-x-circle\"></i>\n\t\t\t\t\t</button>\n\t\t\t\t\t<div className=\"px-4 py-5\">\n\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t<Col className={selectedEntryType === entryTypes.PURCHASE ? \"col-lg-4\" : \"col-lg-6\"}>\n\t\t\t\t\t\t\t\t<Preview source={selectedEntry?.file_path} containerStyles={{backgroundColor: \"#f5f5f5\", padding: 10}} zoom={true} />\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t<Col className={selectedEntryType === entryTypes.PURCHASE ? \"col-lg-8\" : \"col-lg-6\"}>\n\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t<Col className={selectedEntryType === entryTypes.PURCHASE ? \"col-lg-6\" : \"col-lg-12\"}>\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"w-100 form-control-select\"\n\t\t\t\t\t\t\t\t\t\t\t\tclassNamePrefix=\"select\"\n\t\t\t\t\t\t\t\t\t\t\t\tisDisabled\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={entryTypeList.find((i) => i.value === selectedEntry?.entry_type)}\n\t\t\t\t\t\t\t\t\t\t\t\toptions={entryTypeList}\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Entry type\"\n\t\t\t\t\t\t\t\t\t\t\t\tisSearchable={false}\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(data) => setselectedEntryType(data.value)}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t<Col lg={12}>\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group\">\n\t\t\t\t\t\t\t\t\t\t\t{selectedEntryType === entryTypes.SALE && <SalesForm entry={selectedEntry} onSuccess={onEntrySubmit} onShowLoader={setShowLoader} />}\n\t\t\t\t\t\t\t\t\t\t\t{selectedEntryType === entryTypes.EXPENDITURE && <ExpenditureForm entry={selectedEntry} onSuccess={onEntrySubmit} onShowLoader={setShowLoader} />}\n\t\t\t\t\t\t\t\t\t\t\t{selectedEntryType === entryTypes.PURCHASE && <PurchaseForm entry={selectedEntry} onSuccess={onEntrySubmit} onShowLoader={setShowLoader} />}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</div>\n\t\t\t\t</Modal.Body>\n\t\t\t</Modal>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default CheckedEntries;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/validator-checked-entries/index.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/pending-entries/index.js",["905"],"import React, {useState, useEffect} from \"react\";\r\nimport {Row, Col, Card, Modal, OverlayTrigger, Popover, Accordion, Button, ListGroup, InputGroup, FormControl} from \"react-bootstrap\";\r\nimport {Grid, GridColumn as Column} from \"@progress/kendo-react-grid\";\r\nimport {process} from \"@progress/kendo-data-query\";\r\nimport moment from \"moment\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport Select from \"react-select\";\r\nimport {FaAngleDown} from \"react-icons/fa\";\r\nimport {AiOutlineReload} from \"react-icons/ai\";\r\nimport {callApi} from \"../../../services/apiService\";\r\nimport {ApiConstants} from \"../../../config/apiConstants\";\r\nimport Spinner from \"../../../components/Spinner\";\r\nimport Preview from \"../../../components/Preview\";\r\nimport {entryTypeList} from \"../../../enums/entryTypeList\";\r\nimport {entryTypes} from \"../../../enums/entryTypes\";\r\nimport {entryStatus} from \"../../../enums/entryStatus\";\r\n// import FileIcon from \"../../../components/FileIcon\";\r\nimport {showNotification} from \"../../../services/toasterService\";\r\nimport SalesForm from \"./forms/salesForm\";\r\nimport ExpenditureForm from \"./forms/expenditureForm\";\r\nimport PurchaseForm from \"./forms/purchaseForm\";\r\nimport useWindowSize from \"../../../hooks/useWindowSize\";\r\n\r\nconst PendingEntries = (props) => {\r\n\tconst [showLoader, setShowLoader] = useState(false);\r\n\tconst [entriesList, setEntriesList] = useState([]);\r\n\tconst [startDate, setStartDate] = useState(null);\r\n\tconst [endDate, setEndDate] = useState(null);\r\n\tconst [showPreview, setshowPreview] = useState(false);\r\n\tconst [selectedEntry, setselectedEntry] = useState(null);\r\n\tconst [selectedEntryType, setselectedEntryType] = useState(\"\");\r\n\tconst [clientVatPeriod, setclientVatPeriod] = useState(null);\r\n\r\n\tconst [accordionList, setAccordionList] = useState([]);\r\n\tconst [windowWidth, setWindowWidth] = useState(window.innerWidth);\r\n\tconst [hidePurchaseCombo, setHidePurchaseCombo] = useState(false);\r\n\r\n\tReact.useLayoutEffect(() => {\r\n\t\tsetWindowWidth(window.innerWidth > 992);\r\n\t}, []);\r\n\r\n\tconst [gridState, setgridState] = useState({\r\n\t\tskip: 0,\r\n\t\ttake: 10,\r\n\t});\r\n\tconst [gridData, setgridData] = useState(null);\r\n\r\n\tconst [gridWidth, setgridWidth] = useState(1024);\r\n\tconst windowSize = useWindowSize();\r\n\r\n\tconst pagerSettings = {\r\n\t\tbuttonCount: 5,\r\n\t\tinfo: true,\r\n\t\ttype: \"numeric\",\r\n\t\tpageSizes: true,\r\n\t\tpreviousNext: true,\r\n\t};\r\n\tconst handleResize = React.useCallback(() => {\r\n\t\tlet gridContext = document.querySelector(\".k-grid\");\r\n\t\tif (gridContext?.offsetWidth > gridWidth) {\r\n\t\t\tsetgridWidth(gridContext.offsetWidth);\r\n\t\t}\r\n\t}, [gridWidth]);\r\n\r\n\tuseEffect(() => {\r\n\t\tlet resizeObserver = new ResizeObserver(() => {\r\n\t\t\thandleResize();\r\n\t\t});\r\n\t\tresizeObserver.observe(document.querySelector(\".k-grid\"));\r\n\t\tgetData();\r\n\t}, [handleResize]);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetgridData(process(entriesList, gridState));\r\n\t}, [entriesList, gridState]);\r\n\r\n\tconst setWidth = (minWidth) => {\r\n\t\tif (windowSize.width < 992) return minWidth;\r\n\t\tlet dynamicWidth = gridWidth - 620;\r\n\t\tlet width = dynamicWidth > minWidth ? dynamicWidth : minWidth;\r\n\t\treturn width;\r\n\t};\r\n\r\n\tconst pageChange = (event) => {\r\n\t\tlet updatedState = {\r\n\t\t\t...gridState,\r\n\t\t\tskip: event.page.skip,\r\n\t\t\ttake: event.page.take,\r\n\t\t};\r\n\t\tsetgridState({...updatedState});\r\n\t};\r\n\r\n\tconst filterChange = (event) => {\r\n\t\tlet updatedState = {\r\n\t\t\t...gridState,\r\n\t\t\tfilter: event.filter,\r\n\t\t};\r\n\t\tsetgridState(updatedState);\r\n\t};\r\n\r\n\tconst onSearchFilter = () => {\r\n\t\tlet dateFilters = [];\r\n\t\tif (startDate) {\r\n\t\t\tdateFilters.push({\r\n\t\t\t\tfield: \"created_at\",\r\n\t\t\t\toperator: \"gte\",\r\n\t\t\t\tvalue: moment(startDate).format(\"YYYY-MM-DD\"),\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (endDate) {\r\n\t\t\tdateFilters.push({\r\n\t\t\t\tfield: \"created_at\",\r\n\t\t\t\toperator: \"lte\",\r\n\t\t\t\tvalue: moment(endDate).format(\"YYYY-MM-DD\"),\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tlet updatedState = {\r\n\t\t\t...gridState,\r\n\t\t\tfilter: {\r\n\t\t\t\tlogic: \"and\",\r\n\t\t\t\tfilters: dateFilters,\r\n\t\t\t},\r\n\t\t};\r\n\t\tsetgridState(updatedState);\r\n\t};\r\n\r\n\tconst resetFilters = () => {\r\n\t\tlet updatedState = {\r\n\t\t\t...gridState,\r\n\t\t\tfilter: null,\r\n\t\t};\r\n\t\tsetgridState(updatedState);\r\n\t\tsetStartDate(null);\r\n\t\tsetEndDate(null);\r\n\t};\r\n\r\n\tconst getVatPeriod = (entry) => {\r\n\t\tsetShowLoader(true);\r\n\t\tlet params = {user_id: entry.client_user_id};\r\n\t\tcallApi(\"get\", ApiConstants.client.currentvatperiod, params, true)\r\n\t\t\t.then((response) => {\r\n\t\t\t\tsetShowLoader(false);\r\n\t\t\t\tif (response && response.status_code === 200) {\r\n\t\t\t\t\tsetclientVatPeriod(response.payload);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tsetShowLoader(false);\r\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\r\n\t\t\t});\r\n\t};\r\n\r\n\tconst getData = () => {\r\n\t\tsetShowLoader(true);\r\n\t\tcallApi(\"get\", ApiConstants.entry.checkerpendinglist, {}, true)\r\n\t\t\t.then((response) => {\r\n\t\t\t\tsetShowLoader(false);\r\n\t\t\t\tif (response && response.status_code === 200) {\r\n\t\t\t\t\tlet temp = response.payload;\r\n\t\t\t\t\tsetEntriesList(temp);\r\n\t\t\t\t\tsetAccordionList(temp);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tsetShowLoader(false);\r\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\r\n\t\t\t});\r\n\t};\r\n\r\n\tconst viewEntry = (entry) => {\r\n\t\tsetselectedEntry(entry);\r\n\t\tif (entry?.entry_status_id === entryStatus.RECHECK) {\r\n\t\t\tsetselectedEntryType(entry.entry_type);\r\n\t\t}\r\n\t\tgetVatPeriod(entry);\r\n\t\tsetshowPreview(true);\r\n\t};\r\n\r\n\tconst closeEntryModal = () => {\r\n\t\tsetshowPreview(false);\r\n\t\tsetselectedEntryType(\"\");\r\n\t};\r\n\r\n\tconst onEntrySubmit = () => {\r\n\t\tcloseEntryModal();\r\n\t\tgetData();\r\n\t};\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t{showLoader && <Spinner />}\r\n\t\t\t<Row>\r\n\t\t\t\t<Col xl={12}>\r\n\t\t\t\t\t<Card className=\"rounded\">\r\n\t\t\t\t\t\t<Card.Body className=\"p-4\">\r\n\t\t\t\t\t\t\t<Row className=\"mb-3\">\r\n\t\t\t\t\t\t\t\t<Col xs={12} md={4} xl={3}>\r\n\t\t\t\t\t\t\t\t\t<div className=\"date-picker-container\">\r\n\t\t\t\t\t\t\t\t\t\t<DatePicker className=\"form-control mb-2\" placeholderText=\"Start Date\" dateFormat=\"dd/MM/yyyy\" selected={startDate} onSelect={() => setEndDate(null)} onChange={setStartDate} />\r\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-calendar\"></i>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t<Col xs={12} md={4} xl={3}>\r\n\t\t\t\t\t\t\t\t\t<div className=\"date-picker-container\">\r\n\t\t\t\t\t\t\t\t\t\t<DatePicker className=\"form-control mb-2\" minDate={startDate} placeholderText=\"End Date\" dateFormat=\"dd/MM/yyyy\" selected={endDate} onChange={setEndDate} />\r\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-calendar\"></i>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t<Col xs={10} md={1} xl={1}>\r\n\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn-icon btn btn-primary search-button\" onClick={onSearchFilter}>\r\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-search\"></i>\r\n\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t<Col xs={2} md={1} xl={1}>\r\n\t\t\t\t\t\t\t\t\t{(startDate || endDate) && (\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"text-muted filter-close-btn\" role=\"button\" onClick={resetFilters}>\r\n\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-x\"></i>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t<Col md={1} xl={4} style={{display: \"flex\", justifyContent: \"flex-end\"}}>\r\n\t\t\t\t\t\t\t\t\t<Button size=\"sm\" onClick={getData}>\r\n\t\t\t\t\t\t\t\t\t\t<AiOutlineReload size={`1.8em`} />\r\n\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t</Row>\r\n\r\n\t\t\t\t\t\t\t{windowWidth && (\r\n\t\t\t\t\t\t\t\t<Grid data={gridData} skip={gridState.skip} pageSize={gridState.take} pageable={pagerSettings} onPageChange={pageChange} filterable={true} filter={gridState.filter} onFilterChange={filterChange}>\r\n\t\t\t\t\t\t\t\t\t<Column field=\"id\" title=\"#\" filterable={false} width=\"60px\" cell={(props) => <td>{props.dataIndex + 1}</td>} />\r\n\t\t\t\t\t\t\t\t\t<Column field=\"name\" title=\"Client Name\" />\r\n\t\t\t\t\t\t\t\t\t<Column\r\n\t\t\t\t\t\t\t\t\t\tfield=\"created_at\"\r\n\t\t\t\t\t\t\t\t\t\tfilterable={false}\r\n\t\t\t\t\t\t\t\t\t\ttitle=\"Entry Date\"\r\n\t\t\t\t\t\t\t\t\t\tcell={(props) => (\r\n\t\t\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<div>{moment(props.dataItem.created_at).format(\"DD-MMM-YYYY\")}</div>\r\n\t\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t{/* <Column\r\n\t\t\t\t\t\t\t\t\t\tfield=\"file_path\"\r\n\t\t\t\t\t\t\t\t\t\tfilterable={false}\r\n\t\t\t\t\t\t\t\t\t\ttitle=\"Document\"\r\n\t\t\t\t\t\t\t\t\t\tcell={(props) => (\r\n\t\t\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<FileIcon className=\"mr-2\" source={props.dataItem.file_path} style={{width: 25}} />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{props.dataItem.file_path.split(\"/\")[1]}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t/> */}\r\n\t\t\t\t\t\t\t\t\t<Column\r\n\t\t\t\t\t\t\t\t\t\tfield=\"Actions\"\r\n\t\t\t\t\t\t\t\t\t\tfilterable={false}\r\n\t\t\t\t\t\t\t\t\t\ttitle=\"Actions\"\r\n\t\t\t\t\t\t\t\t\t\tcell={(props) => (\r\n\t\t\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<div className={`text-center ${props.dataItem.entry_status_id === entryStatus.RECHECK ? \"text-warning\" : props.dataItem.entry_status_id === entryStatus.REJECTED ? \"text-danger\" : \"\"}`}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{props.dataItem.entry_status_id === entryStatus.RECHECK ? \"Recheck\" : props.dataItem.entry_status_id === entryStatus.REJECTED ? \"Rejected\" : \"\"}\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{(props.dataItem.entry_status_id === entryStatus.RECHECK || props.dataItem.entry_status_id === entryStatus.REJECTED) && (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&nbsp;&nbsp;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<OverlayTrigger\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttrigger=\"click\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplacement=\"top\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trootClose={true}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toverlay={\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Popover id=\"popover-basic\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Popover.Content>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"p-2\">{props.dataItem?.comment}</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Popover.Content>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Popover>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-info text-primary\" style={{fontSize: 16, cursor: \"pointer\"}}></i>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</OverlayTrigger>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t<Column\r\n\t\t\t\t\t\t\t\t\t\tfield=\"View\"\r\n\t\t\t\t\t\t\t\t\t\ttitle=\"View\"\r\n\t\t\t\t\t\t\t\t\t\tfilterable={false}\r\n\t\t\t\t\t\t\t\t\t\tcell={(props) => (\r\n\t\t\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"action-panel\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn-icon btn btn-outline-primary\" title=\"View\" onClick={() => viewEntry(props.dataItem)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-eye\"></i>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t{!windowWidth && (\r\n\t\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t\t<InputGroup className=\"mb-2\">\r\n\t\t\t\t\t\t\t\t\t\t\t<FormControl\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"form-control\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Client Name\"\r\n\t\t\t\t\t\t\t\t\t\t\t\taria-label=\"Client Name\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(event) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetAccordionList(entriesList);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn event.target.value ? setAccordionList(accordionList?.filter((data) => data.name?.includes(event.target.value))) : setAccordionList(entriesList);\r\n\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t</InputGroup>\r\n\t\t\t\t\t\t\t\t\t\t<InputGroup className=\"mb-2\">\r\n\t\t\t\t\t\t\t\t\t\t\t<FormControl\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"form-control\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Checker Name\"\r\n\t\t\t\t\t\t\t\t\t\t\t\taria-label=\"Checker Name\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(event) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetAccordionList(entriesList);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn event.target.value ? setAccordionList(accordionList?.filter((data) => data.checker_name?.includes(event.target.value))) : setAccordionList(entriesList);\r\n\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t</InputGroup>\r\n\r\n\t\t\t\t\t\t\t\t\t\t<Accordion defaultActiveKey=\"0\">\r\n\t\t\t\t\t\t\t\t\t\t\t{accordionList &&\r\n\t\t\t\t\t\t\t\t\t\t\t\taccordionList.length > 0 &&\r\n\t\t\t\t\t\t\t\t\t\t\t\taccordionList.map((row) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Card key={row.id} style={{marginBottom: 4}}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Accordion.Toggle as={Card.Header} style={{backgroundColor: \"#7599b1\", color: \"#ffffff\", padding: \"8px 16px\"}} eventKey={row.id}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div style={{display: \"flex\", justifyContent: \"space-between\"}}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tClient: {row.name}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button variant=\"outline-light\" size=\"sm\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<FaAngleDown />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Accordion.Toggle>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Accordion.Collapse eventKey={row.id}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Card.Body>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"action-panel\" style={{dispaly: \"flex\", justifyContent: \"flex-end\", marginBottom: 16}}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn btn-outline-primary\" title=\"View\" onClick={() => viewEntry(row)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tView <i className=\"feather icon-eye\"></i>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>Entry Date:</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span> {moment(row.invoice_date).format(\"DD-MMM-YYYY\")}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item style={{display: \"flex\"}}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>Type:</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className={`text-center ${row.entry_status_id === entryStatus.RECHECK ? \"text-warning\" : row.entry_status_id === entryStatus.REJECTED ? \"text-danger\" : \"\"}`}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{row.entry_status_id === entryStatus.RECHECK ? \"Recheck\" : row.entry_status_id === entryStatus.REJECTED ? \"Rejected\" : \"\"}\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{(row.entry_status_id === entryStatus.RECHECK || row.entry_status_id === entryStatus.REJECTED) && (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&nbsp;&nbsp;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<OverlayTrigger\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttrigger=\"click\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplacement=\"top\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trootClose={true}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toverlay={\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Popover id=\"popover-basic\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Popover.Content>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"p-2\">{row?.comment}</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Popover.Content>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Popover>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-info text-primary\" style={{fontSize: 16, cursor: \"pointer\"}}></i>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</OverlayTrigger>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Card.Body>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Accordion.Collapse>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Card>\r\n\t\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t</Accordion>\r\n\t\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</Card.Body>\r\n\t\t\t\t\t</Card>\r\n\t\t\t\t</Col>\r\n\t\t\t</Row>\r\n\t\t\t<Modal size={selectedEntryType === entryTypes.PURCHASE ? \"xl\" : \"lg\"} show={showPreview} backdrop=\"static\" keyboard={true}>\r\n\t\t\t\t<Modal.Body className=\"p-0\">\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\tclassName=\"btn-icon btn close-btn\"\r\n\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\tcloseEntryModal();\r\n\t\t\t\t\t\t\tsetHidePurchaseCombo(false);\r\n\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t<i className=\"feather icon-x-circle\"></i>\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<div className=\"px-4 py-5\">\r\n\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t<Col className={selectedEntryType === entryTypes.PURCHASE ? \"col-lg-4 col-12 mt-3\" : \"col-lg-6 col-12 mt-3\"}>\r\n\t\t\t\t\t\t\t\t<Preview source={selectedEntry?.file_path} containerStyles={{backgroundColor: \"#f5f5f5\", padding: 10}} zoom={true} />\r\n\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t<Col className={selectedEntryType === entryTypes.PURCHASE ? \"col-lg-8 col-12\" : \"col-lg-6 col-12\"}>\r\n\t\t\t\t\t\t\t\t{!hidePurchaseCombo && (\r\n\t\t\t\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t\t\t\t<Col className={selectedEntryType === entryTypes.PURCHASE ? \"col-lg-6 col-12\" : \"col-lg-12 col-12\"}>\r\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"input-group my-3\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"w-100 form-control-select\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassNamePrefix=\"select\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\toptions={entryTypeList}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Entry type\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tisSearchable={false}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tisDisabled={selectedEntry?.entry_status_id === entryStatus.RECHECK}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={entryTypeList.find((i) => i.value === selectedEntryType)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(data) => setselectedEntryType(data.value)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t\t\t<Col lg={12}>\r\n\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t{selectedEntryType === entryTypes.SALE && <SalesForm entry={selectedEntry} onSuccess={onEntrySubmit} onShowLoader={setShowLoader} vatPeriod={clientVatPeriod} />}\r\n\t\t\t\t\t\t\t\t\t\t\t{selectedEntryType === entryTypes.EXPENDITURE && <ExpenditureForm entry={selectedEntry} onSuccess={onEntrySubmit} onShowLoader={setShowLoader} vatPeriod={clientVatPeriod} />}\r\n\t\t\t\t\t\t\t\t\t\t\t{selectedEntryType === entryTypes.PURCHASE && <PurchaseForm entry={selectedEntry} setHideSelectBox={setHidePurchaseCombo} onSuccess={onEntrySubmit} onShowLoader={setShowLoader} vatPeriod={clientVatPeriod} />}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Modal.Body>\r\n\t\t\t</Modal>\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default PendingEntries;\r\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/reports/purchase/index.js",["906"],"import React, { useState, useEffect } from \"react\";\r\nimport { Row, Col, Accordion, Card, ListGroup, Button } from \"react-bootstrap\";\r\nimport { Grid, GridColumn as Column } from \"@progress/kendo-react-grid\";\r\nimport { process } from \"@progress/kendo-data-query\";\r\nimport moment from \"moment\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport { FaAngleDown } from \"react-icons/fa\";\r\n\r\nimport { callApi } from \"../../../services/apiService\";\r\nimport { showNotification } from \"../../../services/toasterService\";\r\nimport { ApiConstants } from \"../../../config/apiConstants\";\r\nimport Spinner from \"../../../components/Spinner\";\r\n\r\nconst PurchaseReport = (props) => {\r\n  const [showLoader, setShowLoader] = useState(false);\r\n  const [reportList, setreportList] = useState([]);\r\n  const [startDate, setStartDate] = useState(null);\r\n  const [endDate, setEndDate] = useState(null);\r\n  const userObj = JSON.parse(localStorage.getItem(\"user\"));\r\n  const [gridState, setgridState] = useState({ skip: 0, take: 10 });\r\n  const [reportGridData, setreportGridData] = useState(null);\r\n  const [accordionList, setAccordionList] = useState([]);\r\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\r\n\r\n  const pagerSettings = {\r\n    buttonCount: 5,\r\n    info: true,\r\n    type: \"numeric\",\r\n    pageSizes: true,\r\n    previousNext: true,\r\n  };\r\n\r\n  useEffect(() => {\r\n    getReports();\r\n    setWindowWidth(window.innerWidth > 992);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setreportGridData(process(reportList, gridState));\r\n  }, [reportList, gridState]);\r\n\r\n  const pageChange = (event) => {\r\n    let updatedState = {\r\n      ...gridState,\r\n      skip: event.page.skip,\r\n      take: event.page.take,\r\n    };\r\n    setgridState(updatedState);\r\n  };\r\n\r\n  const filterChange = (event) => {\r\n    let updatedState = { ...gridState, filter: event.filter };\r\n    setgridState(updatedState);\r\n  };\r\n\r\n  const onSearchFilter = () => {\r\n    let dateFilters = [];\r\n    if (startDate) {\r\n      dateFilters.push({ field: \"invoice_date\", operator: \"gte\", value: moment(startDate).format(\"YYYY-MM-DD\") });\r\n    }\r\n    if (endDate) {\r\n      dateFilters.push({ field: \"invoice_date\", operator: \"lte\", value: moment(endDate).format(\"YYYY-MM-DD\") });\r\n    }\r\n    let updatedState = { ...gridState, filter: { logic: \"and\", filters: dateFilters } };\r\n    setgridState(updatedState);\r\n  };\r\n\r\n  const resetFilters = () => {\r\n    let updatedState = { ...gridState, filter: null };\r\n    setgridState(updatedState);\r\n    setStartDate(null);\r\n    setEndDate(null);\r\n  };\r\n\r\n  const getReports = () => {\r\n    setShowLoader(true);\r\n    callApi(\"get\", ApiConstants.purchase.clientpurchasereport, {}, true)\r\n      .then((response) => {\r\n        setShowLoader(false);\r\n        if (response && response.status_code === 200) {\r\n          setreportList(response.payload);\r\n          setAccordionList(response.payload);\r\n        } else {\r\n          showNotification(\"Error\", response.message, \"error\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setShowLoader(false);\r\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {showLoader && <Spinner />}\r\n      <Row>\r\n        <Col xl={12}>\r\n          <Card className=\"rounded\">\r\n            <Card.Body className=\"p-4\">\r\n              <Row className=\"mb-3\">\r\n                <Col xs={12} md={4} xl={3}>\r\n                  <div className=\"date-picker-container\">\r\n                    <DatePicker\r\n                      className=\"form-control mb-2\"\r\n                      placeholderText=\"Start Date\"\r\n                      // minDate={new Date(userObj?.period?.start_period_date?.date)}\r\n                      // maxDate={new Date(userObj?.period?.end_period_date?.date)}\r\n                      dateFormat=\"dd/MM/yyyy\"\r\n                      selected={startDate}\r\n                      onSelect={() => setEndDate(null)}\r\n                      onChange={setStartDate}\r\n                    />\r\n                    <i className=\"feather icon-calendar\"></i>\r\n                  </div>\r\n                </Col>\r\n                <Col xs={12} md={4} xl={3}>\r\n                  <div className=\"date-picker-container\">\r\n                    <DatePicker className=\"form-control mb-2\"\r\n                      // minDate={startDate ? startDate : new Date(userObj?.period?.start_period_date?.date)} \r\n                      // maxDate={new Date(userObj?.period?.end_period_date?.date)} \r\n                      placeholderText=\"End Date\" dateFormat=\"dd/MM/yyyy\" selected={endDate} onChange={setEndDate} />\r\n                    <i className=\"feather icon-calendar\"></i>\r\n                  </div>\r\n                </Col>\r\n                <Col xs={10} md={1} xl={1}>\r\n                  <button type=\"button\" className=\"btn-icon btn btn-primary search-button\" onClick={onSearchFilter}>\r\n                    <i className=\"feather icon-search\"></i>\r\n                  </button>\r\n                </Col>\r\n                <Col xs={2} md={1} xl={1}>\r\n                  {(startDate || endDate) && (\r\n                    <div className=\"text-muted filter-close-btn\" role=\"button\" onClick={resetFilters}>\r\n                      <i className=\"feather icon-x\"></i>\r\n                    </div>\r\n                  )}\r\n                </Col>\r\n              </Row>\r\n              {windowWidth && (\r\n                <Grid data={reportGridData} skip={gridState.skip} pageSize={gridState.take} pageable={pagerSettings} onPageChange={pageChange} filterable={true} filter={gridState.filter} onFilterChange={filterChange}>\r\n                  <Column field=\"id\" title=\"#\" width=\"60px\" filterable={false} cell={(props) => <td>{props.dataIndex + 1}</td>} />\r\n                  <Column field=\"invoice_date\" width=\"180\" title=\"Invoice Date\" filterable={false} cell={(props) => <td>{moment(props.dataItem.invoice_date).format(\"DD-MMM-YYYY\")}</td>} />\r\n                  <Column field=\"invoice_number\" width=\"200\" title=\"Invoice Number\" />\r\n                  <Column field=\"supplier_name\" width=\"250\" title=\"Supplier\" />\r\n                  <Column field=\"trn\" width=\"180\" title=\"Supplier TRN\" />\r\n                  <Column field=\"amount_exclude_vat\" width=\"150\" filterable={false} title=\"Amount Excl VAT\" />\r\n                  <Column field=\"vat_amount\" width=\"150\" title=\"VAT\" filterable={false} />\r\n                  <Column field=\"amount\" width=\"150\" title=\"Total\" />\r\n                </Grid>\r\n              )}\r\n\r\n              <div>\r\n                {!windowWidth && (\r\n                  <Accordion defaultActiveKey=\"0\">\r\n                    {accordionList &&\r\n                      accordionList.length > 0 &&\r\n                      accordionList.map((row) => (\r\n                        <Card key={row.id} style={{ marginBottom: 4 }}>\r\n                          <Accordion.Toggle as={Card.Header} style={{ backgroundColor: \"#7599b1\" }} eventKey={row.id}>\r\n                            <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n                              <span style={{ display: \"flex\", alignItems: \"center\", color: \"#ffffff\", fontSize: 18 }}>{row.invoice_date}</span>\r\n                              <Button variant=\"outline-light\" size=\"sm\">\r\n                                <FaAngleDown />\r\n                              </Button>\r\n                            </div>\r\n                          </Accordion.Toggle>\r\n                          <Accordion.Collapse eventKey={row.id}>\r\n                            <Card.Body>\r\n                              <ListGroup>\r\n                                <ListGroup.Item>\r\n                                  <span style={{ padding: \"0 16px 0 8px\" }}>Invoice Date:</span>\r\n                                  <span>{moment(row.invoice_date).format(\"DD-MMM-YYYY\")}</span>\r\n                                </ListGroup.Item>\r\n                                <ListGroup.Item>\r\n                                  <span style={{ padding: \"0 16px 0 8px\" }}>Invoice Number:</span>\r\n                                  <span>{row.invoice_number}</span>\r\n                                </ListGroup.Item>\r\n                                <ListGroup.Item>\r\n                                  <span style={{ padding: \"0 16px 0 8px\" }}>Supplier:</span>\r\n                                  <span>{row.supplier_name}</span>\r\n                                </ListGroup.Item>\r\n                                <ListGroup.Item>\r\n                                  <span style={{ padding: \"0 16px 0 8px\" }}>Supplier TRN:</span>\r\n                                  <span>{row.trn}</span>\r\n                                </ListGroup.Item>\r\n                                <ListGroup.Item>\r\n                                  <span style={{ padding: \"0 16px 0 8px\" }}>Amount Excl VAT:</span>\r\n                                  <span>{row.amount_exclude_vat}</span>\r\n                                </ListGroup.Item>\r\n                                <ListGroup.Item>\r\n                                  <span style={{ padding: \"0 16px 0 8px\" }}>Total:</span>\r\n                                  <span>{row.amount}</span>\r\n                                </ListGroup.Item>\r\n                              </ListGroup>\r\n                            </Card.Body>\r\n                          </Accordion.Collapse>\r\n                        </Card>\r\n                      ))}\r\n                  </Accordion>\r\n                )}\r\n              </div>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default PurchaseReport;\r\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/message-list/index.js",["907","908","909","910","911","912","913","914","915","916","917","918","919","920","921"],"import React, {useState, useEffect} from \"react\";\r\nimport {Row, Col, Card, Modal, Accordion, Button, ListGroup, InputGroup, FormControl} from \"react-bootstrap\";\r\nimport {Grid, GridColumn as Column} from \"@progress/kendo-react-grid\";\r\nimport {process} from \"@progress/kendo-data-query\";\r\nimport moment from \"moment\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport Select from \"react-select\";\r\nimport {FaAngleDown} from \"react-icons/fa\";\r\nimport {AiOutlineReload} from \"react-icons/ai\";\r\nimport {callApi} from \"../../../services/apiService\";\r\nimport {ApiConstants} from \"../../../config/apiConstants\";\r\nimport {showNotification} from \"../../../services/toasterService\";\r\nimport Spinner from \"../../../components/Spinner\";\r\nimport Preview from \"../../../components/Preview\";\r\nimport {entryTypeList} from \"../../../enums/entryTypeList\";\r\nimport {entryTypes} from \"../../../enums/entryTypes\";\r\nimport useWindowSize from \"../../../hooks/useWindowSize\";\r\n\r\nconst MessageList = (props) => {\r\n\tconst [showLoader, setShowLoader] = useState(false);\r\n\tconst [entriesList, setEntriesList] = useState([]);\r\n\tconst [startDate, setStartDate] = useState(null);\r\n\tconst [endDate, setEndDate] = useState(null);\r\n\t// const [showPreview, setshowPreview] = useState(false);\r\n\t// const [selectedEntry, setselectedEntry] = useState(null);\r\n\t// const [selectedEntryType, setselectedEntryType] = useState(\"\");\r\n\t// const [showDeleteConfirm, setDeleteConfirm] = React.useState(false);\r\n\r\n\tconst [accordionList, setAccordionList] = useState([]);\r\n\tconst [windowWidth, setWindowWidth] = useState(window.innerWidth);\r\n\r\n\tReact.useLayoutEffect(() => {\r\n\t\tsetWindowWidth(window.innerWidth > 992);\r\n\t}, []);\r\n\r\n\tconst [gridState, setgridState] = useState({\r\n\t\tskip: 0,\r\n\t\ttake: 10,\r\n\t});\r\n\tconst [gridData, setgridData] = useState(null);\r\n\r\n\tconst [gridWidth, setgridWidth] = useState(1024);\r\n\r\n\tconst pagerSettings = {\r\n\t\tbuttonCount: 5,\r\n\t\tinfo: true,\r\n\t\ttype: \"numeric\",\r\n\t\tpageSizes: true,\r\n\t\tpreviousNext: true,\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tlet resizeObserver = new ResizeObserver(() => {\r\n\t\t\thandleResize();\r\n\t\t});\r\n\t\tresizeObserver.observe(document.querySelector(\".k-grid\"));\r\n\t\tgetData();\r\n\t}, []);\r\n\r\n\tuseEffect(() => {\r\n\t\tloadGridData();\r\n\t}, [entriesList, gridState]);\r\n\r\n\tconst handleResize = () => {\r\n\t\tlet gridContext = document.querySelector(\".k-grid\");\r\n\t\tif (gridContext?.offsetWidth > gridWidth) {\r\n\t\t\tsetgridWidth(gridContext.offsetWidth);\r\n\t\t}\r\n\t};\r\n\r\n\tconst loadGridData = () => {\r\n\t\tlet updatedData = process(entriesList, gridState);\r\n\t\tsetgridData(updatedData);\r\n\t};\r\n\r\n\tconst pageChange = (event) => {\r\n\t\tlet updatedState = {\r\n\t\t\t...gridState,\r\n\t\t\tskip: event.page.skip,\r\n\t\t\ttake: event.page.take,\r\n\t\t};\r\n\t\tsetgridState({...updatedState});\r\n\t};\r\n\r\n\tconst filterChange = (event) => {\r\n\t\tlet updatedState = {\r\n\t\t\t...gridState,\r\n\t\t\tfilter: event.filter,\r\n\t\t};\r\n\t\tsetgridState(updatedState);\r\n\t};\r\n\r\n\tconst onSearchFilter = () => {\r\n\t\tlet dateFilters = [];\r\n\t\tif (startDate) {\r\n\t\t\tdateFilters.push({\r\n\t\t\t\tfield: \"created_at\",\r\n\t\t\t\toperator: \"gte\",\r\n\t\t\t\tvalue: moment(startDate).format(\"YYYY-MM-DD\"),\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (endDate) {\r\n\t\t\tdateFilters.push({\r\n\t\t\t\tfield: \"created_at\",\r\n\t\t\t\toperator: \"lte\",\r\n\t\t\t\tvalue: moment(endDate).format(\"YYYY-MM-DD\"),\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tlet updatedState = {\r\n\t\t\t...gridState,\r\n\t\t\tfilter: {\r\n\t\t\t\tlogic: \"and\",\r\n\t\t\t\tfilters: dateFilters,\r\n\t\t\t},\r\n\t\t};\r\n\t\tconsole.log(updatedState);\r\n\t\tsetgridState(updatedState);\r\n\t};\r\n\r\n\tconst resetFilters = () => {\r\n\t\tlet updatedState = {\r\n\t\t\t...gridState,\r\n\t\t\tfilter: null,\r\n\t\t};\r\n\t\tsetgridState(updatedState);\r\n\t\tsetStartDate(null);\r\n\t\tsetEndDate(null);\r\n\t};\r\n\r\n\tconst getData = () => {\r\n\t\tsetShowLoader(true);\r\n\t\tcallApi(\"get\", ApiConstants.message.getallmessages, {}, true)\r\n\t\t\t.then((response) => {\r\n\t\t\t\tsetShowLoader(false);\r\n\t\t\t\tif (response && response.status_code === 200) {\r\n\t\t\t\t\tconsole.log(response.payload);\r\n\t\t\t\t\tsetEntriesList(response.payload);\r\n\t\t\t\t\tsetAccordionList(response.payload);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tsetShowLoader(false);\r\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\r\n\t\t\t});\r\n\t};\r\n\r\n\t// const viewEntry = (entry) => {\r\n\t// \tsetselectedEntry(entry);\r\n\t// \tsetselectedEntryType(entry.entry_type);\r\n\t// \tsetshowPreview(true);\r\n\t// };\r\n\r\n\t// const closeEntryModal = () => {\r\n\t// \tsetshowPreview(false);\r\n\t// \tsetselectedEntryType(\"\");\r\n\t// };\r\n\r\n\t// const onEntrySubmit = () => {\r\n\t// \tcloseEntryModal();\r\n\t// \tgetData();\r\n\t// };\r\n\r\n\t// const deleteEntry = (entry) => {\r\n\t// \tsetselectedEntry(entry);\r\n\t// \tsetDeleteConfirm(true);\r\n\t// };\r\n\r\n\t// const deleteData = () => {\r\n\t// \tsetShowLoader(true);\r\n\t// \tcallApi(\"post\", ApiConstants.entry.validatorapprovedlist, {entry_id: selectedEntry.id}, true)\r\n\t// \t\t.then((response) => {\r\n\t// \t\t\tsetShowLoader(false);\r\n\t// \t\t\tif (response && response.status_code === 200) {\r\n\t// \t\t\t\tshowNotification(\"Success\", response.message, \"success\");\r\n\t// \t\t\t\tgetData();\r\n\t// \t\t\t} else {\r\n\t// \t\t\t\tshowNotification(\"Error\", response.message, \"error\");\r\n\t// \t\t\t}\r\n\t// \t\t})\r\n\t// \t\t.catch((error) => {\r\n\t// \t\t\tsetShowLoader(false);\r\n\t// \t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\r\n\t// \t\t});\r\n\t// };\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t{showLoader && <Spinner />}\r\n\t\t\t<Row>\r\n\t\t\t\t<Col xl={12}>\r\n\t\t\t\t\t<Card className=\"rounded\">\r\n\t\t\t\t\t\t<Card.Body className=\"p-4\">\r\n\t\t\t\t\t\t\t<Row className=\"mb-3\">\r\n\t\t\t\t\t\t\t\t<Col xs={12} md={4} xl={3}>\r\n\t\t\t\t\t\t\t\t\t<div className=\"date-picker-container\">\r\n\t\t\t\t\t\t\t\t\t\t<DatePicker className=\"form-control mb-2\" placeholderText=\"Start Date\" dateFormat=\"dd/MM/yyyy\" selected={startDate} onSelect={() => setEndDate(null)} onChange={setStartDate} />\r\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-calendar\"></i>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t<Col xs={12} md={4} xl={3}>\r\n\t\t\t\t\t\t\t\t\t<div className=\"date-picker-container\">\r\n\t\t\t\t\t\t\t\t\t\t<DatePicker className=\"form-control mb-2\" minDate={startDate} placeholderText=\"End Date\" dateFormat=\"dd/MM/yyyy\" selected={endDate} onChange={setEndDate} />\r\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-calendar\"></i>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t<Col xs={10} md={2} xl={1}>\r\n\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn-icon btn btn-primary search-button\" onClick={onSearchFilter}>\r\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-search\"></i>\r\n\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t{(startDate || endDate) && (\r\n\t\t\t\t\t\t\t\t\t<Col xs={2} md={1} xl={1}>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"filter-close-btn\" role=\"button\" onClick={resetFilters}>\r\n\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-x\"></i>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t<Col md={1} xl={4} style={{display: \"flex\", justifyContent: \"flex-end\"}}>\r\n\t\t\t\t\t\t\t\t\t<Button size=\"sm\" onClick={getData}>\r\n\t\t\t\t\t\t\t\t\t\t<AiOutlineReload size={`1.8em`} />\r\n\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t</Row>\r\n\r\n\t\t\t\t\t\t\t{windowWidth && (\r\n\t\t\t\t\t\t\t\t<Grid data={gridData} skip={gridState.skip} pageable={true} pageSize={gridState.take} onPageChange={pageChange} filterable={true} filter={gridState.filter} onFilterChange={filterChange}>\r\n\t\t\t\t\t\t\t\t\t<Column field=\"id\" title=\"#\" filterable={false} width=\"60px\" cell={(props) => <td>{props.dataIndex + 1}</td>} />\r\n\t\t\t\t\t\t\t\t\t{/* <Column field=\"sender_name\" title=\"Sender\" width={250} /> */}\r\n\t\t\t\t\t\t\t\t\t<Column\r\n\t\t\t\t\t\t\t\t\t\tfield=\"sender_name\"\r\n\t\t\t\t\t\t\t\t\t\ttitle=\"Sender Name\"\r\n\t\t\t\t\t\t\t\t\t\tcell={(props) => (\r\n\t\t\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<div>{props.dataItem.sender_name}</div>\r\n\t\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t<Column field=\"message\" title=\"Message\" width={250} />\r\n\t\t\t\t\t\t\t\t\t<Column field=\"receiver_name\" title=\"Receiver\" width={250} />\r\n\t\t\t\t\t\t\t\t\t<Column\r\n\t\t\t\t\t\t\t\t\t\tfield=\"created_at\"\r\n\t\t\t\t\t\t\t\t\t\tfilterable={false}\r\n\t\t\t\t\t\t\t\t\t\ttitle=\"Message Date\"\r\n\t\t\t\t\t\t\t\t\t\tcell={(props) => (\r\n\t\t\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<div>{moment(props.dataItem.created_at).format(\"DD-MMM-YYYY\")}</div>\r\n\t\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t{/* <div>\r\n\t\t\t\t\t\t\t\t{!windowWidth && (\r\n\t\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t\t<InputGroup className=\"mb-2\">\r\n\t\t\t\t\t\t\t\t\t\t\t<FormControl\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"form-control\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Client Name\"\r\n\t\t\t\t\t\t\t\t\t\t\t\taria-label=\"Client Name\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(event) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetAccordionList(entriesList);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn event.target.value ? setAccordionList(accordionList?.filter((data) => data.name?.includes(event.target.value))) : setAccordionList(entriesList);\r\n\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t</InputGroup>\r\n\r\n\t\t\t\t\t\t\t\t\t\t<Accordion defaultActiveKey=\"0\">\r\n\t\t\t\t\t\t\t\t\t\t\t{accordionList &&\r\n\t\t\t\t\t\t\t\t\t\t\t\taccordionList.length > 0 &&\r\n\t\t\t\t\t\t\t\t\t\t\t\taccordionList.map((row) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Card key={row.id} style={{marginBottom: 4}}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Accordion.Toggle as={Card.Header} style={{backgroundColor: \"#7599b1\", color: \"#ffffff\", padding: \"8px 16px\"}} eventKey={row.id}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div style={{display: \"flex\", justifyContent: \"space-between\"}}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{row.user_name}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button variant=\"outline-light\" size=\"sm\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<FaAngleDown />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Accordion.Toggle>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Accordion.Collapse eventKey={row.id}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Card.Body>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"action-panel\" style={{dispaly: \"flex\", justifyContent: \"flex-end\", marginBottom: 16}}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn btn-outline-primary\" title=\"View\" onClick={() => viewEntry(row)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tView <i className=\"feather icon-eye\"></i>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>Checker:</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span> {row.checker_name}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>Client:</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span> {row.user_name}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>Entry Date:</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span> {moment(row.created_at).format(\"DD-MMM-YYYY\")}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Card.Body>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Accordion.Collapse>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Card>\r\n\t\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t</Accordion>\r\n\t\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</div> */}\r\n\t\t\t\t\t\t</Card.Body>\r\n\t\t\t\t\t</Card>\r\n\t\t\t\t</Col>\r\n\t\t\t</Row>\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default MessageList;\r\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/checker-rejected-entries/index.js",["922","923","924","925","926","927","928"],"import React, {useState, useEffect} from \"react\";\nimport {Row, Col, Card, Modal, OverlayTrigger, Popover, Accordion, Button, ListGroup, InputGroup, FormControl} from \"react-bootstrap\";\nimport {Grid, GridColumn as Column} from \"@progress/kendo-react-grid\";\nimport {process} from \"@progress/kendo-data-query\";\nimport moment from \"moment\";\nimport DatePicker from \"react-datepicker\";\nimport Select from \"react-select\";\nimport {FaAngleDown} from \"react-icons/fa\";\n\nimport {callApi} from \"../../../services/apiService\";\nimport {ApiConstants} from \"../../../config/apiConstants\";\nimport Spinner from \"../../../components/Spinner\";\nimport Preview from \"../../../components/Preview\";\nimport {entryTypeList} from \"../../../enums/entryTypeList\";\nimport {entryTypes} from \"../../../enums/entryTypes\";\nimport {entryStatus} from \"../../../enums/entryStatus\";\n// import FileIcon from \"../../../components/FileIcon\";\nimport {showNotification} from \"../../../services/toasterService\";\nimport SalesForm from \"./forms/salesForm\";\nimport ExpenditureForm from \"./forms/expenditureForm\";\nimport PurchaseForm from \"./forms/purchaseForm\";\nimport useWindowSize from \"../../../hooks/useWindowSize\";\n\nconst RejectedEntries = (props) => {\n\tconst [showLoader, setShowLoader] = useState(false);\n\tconst [entriesList, setEntriesList] = useState([]);\n\tconst [startDate, setStartDate] = useState(null);\n\tconst [endDate, setEndDate] = useState(null);\n\tconst [showPreview, setshowPreview] = useState(false);\n\tconst [selectedEntry, setselectedEntry] = useState(null);\n\tconst [clientVatPeriod, setclientVatPeriod] = useState(null);\n\tconst [selectedEntryType, setselectedEntryType] = useState(\"\");\n\n\tconst [accordionList, setAccordionList] = useState([]);\n\tconst [windowWidth, setWindowWidth] = useState(window.innerWidth);\n\n\tReact.useLayoutEffect(() => {\n\t\tsetWindowWidth(window.innerWidth > 992);\n\t}, []);\n\n\tconst [gridState, setgridState] = useState({\n\t\tskip: 0,\n\t\ttake: 10,\n\t});\n\tconst [gridData, setgridData] = useState(null);\n\n\tconst [gridWidth, setgridWidth] = useState(1024);\n\tconst windowSize = useWindowSize();\n\n\tconst pagerSettings = {\n\t\tbuttonCount: 5,\n\t\tinfo: true,\n\t\ttype: \"numeric\",\n\t\tpageSizes: true,\n\t\tpreviousNext: true,\n\t};\n\n\tuseEffect(() => {\n\t\tlet resizeObserver = new ResizeObserver(() => {\n\t\t\t(async () => {\n\t\t\t\tlet gridContext = document.querySelector(\".k-grid\");\n\t\t\t\tif (gridContext?.offsetWidth > gridWidth) {\n\t\t\t\t\tsetgridWidth(gridContext.offsetWidth);\n\t\t\t\t}\n\t\t\t})();\n\t\t});\n\t\tresizeObserver.observe(document.querySelector(\".k-grid\"));\n\t\tgetData();\n\t}, [gridWidth]);\n\n\tuseEffect(() => {\n\t\tsetgridData(process(entriesList, gridState));\n\t}, [entriesList, gridState]);\n\n\tconst setWidth = (minWidth) => {\n\t\tif (windowSize.width < 992) return minWidth;\n\t\tlet dynamicWidth = gridWidth - 750;\n\t\tlet width = dynamicWidth > minWidth ? dynamicWidth : minWidth;\n\t\treturn width;\n\t};\n\n\tconst pageChange = (event) => {\n\t\tlet updatedState = {\n\t\t\t...gridState,\n\t\t\tskip: event.page.skip,\n\t\t\ttake: event.page.take,\n\t\t};\n\t\tsetgridState({...updatedState});\n\t};\n\n\tconst filterChange = (event) => {\n\t\tlet updatedState = {\n\t\t\t...gridState,\n\t\t\tfilter: event.filter,\n\t\t};\n\t\t\n\t\tsetgridState(updatedState);\n\t};\n\n\tconst onSearchFilter = () => {\n\t\tlet dateFilters = [];\n\t\tif (startDate) {\n\t\t\tdateFilters.push({\n\t\t\t\tfield: \"created_at\",\n\t\t\t\toperator: \"gte\",\n\t\t\t\tvalue: moment(startDate).format(\"YYYY-MM-DD\"),\n\t\t\t});\n\t\t}\n\n\t\tif (endDate) {\n\t\t\tdateFilters.push({\n\t\t\t\tfield: \"created_at\",\n\t\t\t\toperator: \"lte\",\n\t\t\t\tvalue: moment(endDate).format(\"YYYY-MM-DD\"),\n\t\t\t});\n\t\t}\n\n\t\tlet updatedState = {\n\t\t\t...gridState,\n\t\t\tfilter: {\n\t\t\t\tlogic: \"and\",\n\t\t\t\tfilters: dateFilters,\n\t\t\t},\n\t\t};\n\t\t\n\t\tsetgridState(updatedState);\n\t};\n\n\tconst resetFilters = () => {\n\t\tlet updatedState = {\n\t\t\t...gridState,\n\t\t\tfilter: null,\n\t\t};\n\t\tsetgridState(updatedState);\n\t\tsetStartDate(null);\n\t\tsetEndDate(null);\n\t};\n\n\tconst getVatPeriod = (entry) => {\n\t\tsetShowLoader(true);\n\t\tlet params = {user_id: entry.client_user_id};\n\t\tcallApi(\"get\", ApiConstants.client.currentvatperiod, params, true)\n\t\t\t.then((response) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tsetclientVatPeriod(response.payload);\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\tconst getData = () => {\n\t\tsetShowLoader(true);\n\t\tcallApi(\"get\", ApiConstants.admin.admincheckerrejectedlist, {}, true)\n\t\t\t.then((response) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tlet temp = response.payload;\n\t\t\t\t\tsetEntriesList(temp);\n\t\t\t\t\tsetAccordionList(temp);\n\t\t\t\t\tconsole.log(temp);\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\tconst viewEntry = (entry) => {\n\t\tsetselectedEntry(entry);\n\t\tif (entry?.entry_status_id === entryStatus.RECHECK) {\n\t\t\tsetselectedEntryType(entry.entry_type);\n\t\t}\n\t\tgetVatPeriod(entry);\n\t\tsetshowPreview(true);\n\t};\n\n\tconst closeEntryModal = () => {\n\t\tsetshowPreview(false);\n\t\tsetselectedEntryType(\"\");\n\t};\n\n\tconst onEntrySubmit = () => {\n\t\tcloseEntryModal();\n\t\tgetData();\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t{showLoader && <Spinner />}\n\t\t\t<Row>\n\t\t\t\t<Col xl={12}>\n\t\t\t\t\t<Card className=\"rounded\">\n\t\t\t\t\t\t<Card.Body className=\"p-4\">\n\t\t\t\t\t\t\t<Row className=\"mb-3\">\n\t\t\t\t\t\t\t\t<Col xs={12} md={4} xl={3}>\n\t\t\t\t\t\t\t\t\t<div className=\"date-picker-container\">\n\t\t\t\t\t\t\t\t\t\t<DatePicker className=\"form-control mb-2\" placeholderText=\"Start Date\" dateFormat=\"dd/MM/yyyy\" selected={startDate} onSelect={() => setEndDate(null)} onChange={setStartDate} />\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-calendar\"></i>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col xs={12} md={4} xl={3}>\n\t\t\t\t\t\t\t\t\t<div className=\"date-picker-container\">\n\t\t\t\t\t\t\t\t\t\t<DatePicker className=\"form-control mb-2\" minDate={startDate} placeholderText=\"End Date\" dateFormat=\"dd/MM/yyyy\" selected={endDate} onChange={setEndDate} />\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-calendar\"></i>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col xs={10} md={1} xl={1}>\n\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn-icon btn btn-primary search-button\" onClick={onSearchFilter}>\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-search\"></i>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col xs={2} md={1} xl={1}>\n\t\t\t\t\t\t\t\t\t{(startDate || endDate) && (\n\t\t\t\t\t\t\t\t\t\t<div className=\"filter-close-btn\" role=\"button\" onClick={resetFilters}>\n\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-x\"></i>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</Row>\n\n\t\t\t\t\t\t\t{windowWidth && (\n\t\t\t\t\t\t\t\t<Grid data={gridData} skip={gridState.skip} pageSize={gridState.take} pageable={pagerSettings} onPageChange={pageChange} filterable={true} filter={gridState.filter} onFilterChange={filterChange}>\n\t\t\t\t\t\t\t\t\t<Column field=\"id\" title=\"#\" filterable={false} width=\"60px\" cell={(props) => <td>{props.dataIndex + 1}</td>} />\n\t\t\t\t\t\t\t\t\t<Column field=\"name\" title=\"Client Name\" width={setWidth(200)} />\n\t\t\t\t\t\t\t\t\t<Column field=\"checker_name\" title=\"Checker Name\" />\n\t\t\t\t\t\t\t\t\t<Column\n\t\t\t\t\t\t\t\t\t\tfield=\"created_at\"\n\t\t\t\t\t\t\t\t\t\twidth=\"150\"\n\t\t\t\t\t\t\t\t\t\tfilterable={false}\n\t\t\t\t\t\t\t\t\t\ttitle=\"Entry Date\"\n\t\t\t\t\t\t\t\t\t\tcell={(props) => (\n\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t<div>{moment(props.dataItem.created_at).format(\"DD-MMM-YYYY\")}</div>\n\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Column\n\t\t\t\t\t\t\t\t\t\tfield=\"Actions\"\n\t\t\t\t\t\t\t\t\t\ttitle=\"Actions\"\n\t\t\t\t\t\t\t\t\t\tfilterable={false}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tcell={(props) => (\n\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className={`text-center ${props.dataItem.entry_status_id === entryStatus.RECHECK ? \"text-warning\" : props.dataItem.entry_status_id === entryStatus.REJECTED ? \"text-danger\" : \"\"}`}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{props.dataItem.entry_status_id === entryStatus.RECHECK ? \"Recheck\" : props.dataItem.entry_status_id === entryStatus.REJECTED ? \"Rejected\" : \"\"}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t{(props.dataItem.entry_status_id === entryStatus.RECHECK || props.dataItem.entry_status_id === entryStatus.REJECTED) && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&nbsp;&nbsp;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<OverlayTrigger\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttrigger=\"click\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplacement=\"top\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trootClose={true}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toverlay={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Popover id=\"popover-basic\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Popover.Content>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"p-2\">{props.dataItem?.comment}</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Popover.Content>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Popover>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-info text-primary\" style={{fontSize: 16, cursor: \"pointer\"}}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</OverlayTrigger>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Column\n\t\t\t\t\t\t\t\t\t\tfield=\"View\"\n\t\t\t\t\t\t\t\t\t\ttitle=\"View\"\n\t\t\t\t\t\t\t\t\t\tfilterable={false}\n\t\t\t\t\t\t\t\t\t\twidth=\"100\"\n\t\t\t\t\t\t\t\t\t\tcell={(props) => (\n\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"action-panel\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn-icon btn btn-outline-primary\" title=\"View\" onClick={() => viewEntry(props.dataItem)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-eye\"></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{!windowWidth && (\n\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t<InputGroup className=\"mb-2\">\n\t\t\t\t\t\t\t\t\t\t\t<FormControl\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Client Name\"\n\t\t\t\t\t\t\t\t\t\t\t\taria-label=\"Client Name\"\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetAccordionList(entriesList);\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn event.target.value ? setAccordionList(accordionList?.filter((data) => data.name?.includes(event.target.value))) : setAccordionList(entriesList);\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</InputGroup>\n\t\t\t\t\t\t\t\t\t\t<InputGroup className=\"mb-2\">\n\t\t\t\t\t\t\t\t\t\t\t<FormControl\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Checker Name\"\n\t\t\t\t\t\t\t\t\t\t\t\taria-label=\"Checker Name\"\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetAccordionList(entriesList);\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn event.target.value ? setAccordionList(accordionList?.filter((data) => data.checker_name?.includes(event.target.value))) : setAccordionList(entriesList);\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</InputGroup>\n\n\t\t\t\t\t\t\t\t\t\t<Accordion defaultActiveKey=\"0\">\n\t\t\t\t\t\t\t\t\t\t\t{accordionList &&\n\t\t\t\t\t\t\t\t\t\t\t\taccordionList.length > 0 &&\n\t\t\t\t\t\t\t\t\t\t\t\taccordionList.map((row) => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Card key={row.id} style={{marginBottom: 4}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Accordion.Toggle as={Card.Header} style={{backgroundColor: \"#7599b1\", color: \"#ffffff\", padding: \"8px 16px\"}} eventKey={row.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div style={{display: \"flex\", justifyContent: \"space-between\"}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{row.name}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button variant=\"outline-light\" size=\"sm\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<FaAngleDown />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Accordion.Toggle>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Accordion.Collapse eventKey={row.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"action-panel\" style={{dispaly: \"flex\", justifyContent: \"flex-end\", marginBottom: 16}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn btn-outline-primary\" title=\"View\" onClick={() => viewEntry(row)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tView <i className=\"feather icon-eye\"></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>Checker:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span> {row.checker_name}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>Entry Date:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span> {moment(row.invoice_date).format(\"DD-MMM-YYYY\")}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item style={{display: \"flex\"}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>Action:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className={`text-center ${row.entry_status_id === entryStatus.RECHECK ? \"text-warning\" : row.entry_status_id === entryStatus.REJECTED ? \"text-danger\" : \"\"}`}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{row.entry_status_id === entryStatus.RECHECK ? \"Recheck\" : row.entry_status_id === entryStatus.REJECTED ? \"Rejected\" : \"\"}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{(row.entry_status_id === entryStatus.RECHECK || row.entry_status_id === entryStatus.REJECTED) && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&nbsp;&nbsp;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<OverlayTrigger\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttrigger=\"click\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplacement=\"top\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trootClose={true}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toverlay={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Popover id=\"popover-basic\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Popover.Content>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"p-2\">{props.dataItem?.comment}</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Popover.Content>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Popover>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-info text-primary\" style={{fontSize: 16, cursor: \"pointer\"}}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</OverlayTrigger>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Accordion.Collapse>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</Accordion>\n\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t</Card>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t<Modal size={selectedEntryType === entryTypes.PURCHASE ? \"xl\" : \"lg\"} show={showPreview} backdrop=\"static\" keyboard={true}>\n\t\t\t\t<Modal.Body className=\"p-0\">\n\t\t\t\t\t<button type=\"button\" className=\"btn-icon btn close-btn\" onClick={closeEntryModal}>\n\t\t\t\t\t\t<i className=\"feather icon-x-circle\"></i>\n\t\t\t\t\t</button>\n\t\t\t\t\t<div className=\"px-4 py-5\">\n\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t<Col className=\"col-12\">\n\t\t\t\t\t\t\t\t<Preview source={selectedEntry?.file_path} containerStyles={{backgroundColor: \"#f5f5f5\", padding: 10}} zoom={true} />\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</div>\n\t\t\t\t</Modal.Body>\n\t\t\t</Modal>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default RejectedEntries;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/reports/expenditure/index.js",["929"],"import React, { useState, useEffect } from \"react\";\r\nimport { Row, Col, Accordion, Card, ListGroup, Button } from \"react-bootstrap\";\r\nimport { Grid, GridColumn as Column } from \"@progress/kendo-react-grid\";\r\nimport { process } from \"@progress/kendo-data-query\";\r\nimport moment from \"moment\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport { FaAngleDown } from \"react-icons/fa\";\r\n\r\nimport { callApi } from \"../../../services/apiService\";\r\nimport { showNotification } from \"../../../services/toasterService\";\r\nimport { ApiConstants } from \"../../../config/apiConstants\";\r\nimport Spinner from \"../../../components/Spinner\";\r\n\r\nconst ExpenditureReport = (props) => {\r\n\tconst [showLoader, setShowLoader] = useState(false);\r\n\tconst [reportList, setreportList] = useState([]);\r\n\tconst [startDate, setStartDate] = useState(null);\r\n\tconst [endDate, setEndDate] = useState(null);\r\n\tconst userObj = JSON.parse(localStorage.getItem(\"user\"));\r\n\tconst [gridState, setgridState] = useState({ skip: 0, take: 10 });\r\n\tconst [reportGridData, setreportGridData] = useState(null);\r\n\tconst [accordionList, setAccordionList] = useState([]);\r\n\tconst [windowWidth, setWindowWidth] = useState(window.innerWidth);\r\n\r\n\tconst pagerSettings = { buttonCount: 5, info: true, type: \"numeric\", pageSizes: true, previousNext: true };\r\n\tconst getReports = () => {\r\n\t\tsetShowLoader(true);\r\n\t\tcallApi(\"get\", ApiConstants.expenditure.clientexpenditurereport, {}, true)\r\n\t\t\t.then((response) => {\r\n\t\t\t\t// console.log(response);\r\n\t\t\t\tsetShowLoader(false);\r\n\t\t\t\tif (response && response.status_code === 200) {\r\n\t\t\t\t\tsetreportList(response.payload);\r\n\t\t\t\t\tsetAccordionList(response.payload);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tsetShowLoader(false);\r\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\r\n\t\t\t});\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tsetWindowWidth(window.innerWidth > 992);\r\n\t\tgetReports();\r\n\t}, []);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetreportGridData(process(reportList, gridState));\r\n\t}, [reportList, gridState]);\r\n\r\n\tconst pageChange = (event) => setgridState({ ...gridState, skip: event.page.skip, take: event.page.take });\r\n\tconst filterChange = (event) => setgridState({ ...gridState, filter: event.filter });\r\n\r\n\tconst onSearchFilter = () => {\r\n\t\tlet dateFilters = [];\r\n\t\tif (startDate) {\r\n\t\t\tdateFilters.push({ field: \"invoice_number\", operator: \"gte\", value: moment(startDate).format(\"YYYY-MM-DD\") });\r\n\t\t}\r\n\t\tif (endDate) {\r\n\t\t\tdateFilters.push({ field: \"invoice_number\", operator: \"lte\", value: moment(endDate).format(\"YYYY-MM-DD\") });\r\n\t\t}\r\n\t\tlet updatedState = { ...gridState, filter: { logic: \"and\", filters: dateFilters } };\r\n\t\tsetgridState(updatedState);\r\n\t};\r\n\r\n\tconst resetFilters = () => {\r\n\t\tlet updatedState = { ...gridState, filter: null };\r\n\t\tsetgridState(updatedState);\r\n\t\tsetStartDate(null);\r\n\t\tsetEndDate(null);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t{showLoader && <Spinner />}\r\n\t\t\t<Row>\r\n\t\t\t\t<Col xl={12}>\r\n\t\t\t\t\t<Card className=\"rounded\">\r\n\t\t\t\t\t\t<Card.Body className=\"p-4\">\r\n\t\t\t\t\t\t\t<Row className=\"mb-3\">\r\n\t\t\t\t\t\t\t\t<Col xs={12} md={4} xl={3}>\r\n\t\t\t\t\t\t\t\t\t<div className=\"date-picker-container\">\r\n\t\t\t\t\t\t\t\t\t\t<DatePicker\r\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"form-control mb-2\"\r\n\t\t\t\t\t\t\t\t\t\t\tplaceholderText=\"Start Date\"\r\n\t\t\t\t\t\t\t\t\t\t\t// minDate={new Date(userObj?.period?.start_period_date?.date)}\r\n\t\t\t\t\t\t\t\t\t\t\t// maxDate={new Date(userObj?.period?.end_period_date?.date)}\r\n\t\t\t\t\t\t\t\t\t\t\tdateFormat=\"dd/MM/yyyy\"\r\n\t\t\t\t\t\t\t\t\t\t\tselected={startDate}\r\n\t\t\t\t\t\t\t\t\t\t\tonSelect={() => setEndDate(null)}\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={setStartDate}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-calendar\"></i>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t<Col xs={12} md={4} xl={3}>\r\n\t\t\t\t\t\t\t\t\t<div className=\"date-picker-container\">\r\n\t\t\t\t\t\t\t\t\t\t<DatePicker\r\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"form-control mb-2\"\r\n\t\t\t\t\t\t\t\t\t\t\t// minDate={startDate ? startDate : new Date(userObj?.period?.start_period_date?.date)}\r\n\t\t\t\t\t\t\t\t\t\t\t// maxDate={new Date(userObj?.period?.end_period_date?.date)}\r\n\t\t\t\t\t\t\t\t\t\t\tplaceholderText=\"End Date\"\r\n\t\t\t\t\t\t\t\t\t\t\tdateFormat=\"dd/MM/yyyy\"\r\n\t\t\t\t\t\t\t\t\t\t\tselected={endDate}\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={setEndDate}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-calendar\"></i>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t<Col xs={10} md={1} xl={1}>\r\n\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn-icon btn btn-primary search-button\" onClick={onSearchFilter}>\r\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-search\"></i>\r\n\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t<Col xs={2} md={1} xl={1}>\r\n\t\t\t\t\t\t\t\t\t{(startDate || endDate) && (\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"text-muted filter-close-btn\" role=\"button\" onClick={resetFilters}>\r\n\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-x\"></i>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t\t{windowWidth && (\r\n\t\t\t\t\t\t\t\t<Grid data={reportGridData} skip={gridState.skip} pageSize={gridState.take} pageable={pagerSettings} onPageChange={pageChange} filterable={true} filter={gridState.filter} onFilterChange={filterChange}>\r\n\t\t\t\t\t\t\t\t\t<Column field=\"id\" title=\"#\" width=\"60px\" filterable={false} cell={(props) => <td>{props.dataIndex + 1}</td>} />\r\n\t\t\t\t\t\t\t\t\t<Column field=\"invoice_date\" width=\"180\" title=\"Invoice Date\" filterable={false} cell={(props) => <td>{moment(props.dataItem.invoice_date).format(\"DD-MMM-YYYY\")}</td>} />\r\n\t\t\t\t\t\t\t\t\t<Column field=\"invoice_number\" width=\"200\" title=\"Invoice Number\" />\r\n\t\t\t\t\t\t\t\t\t<Column field=\"invoice_group_name\" width=\"200\" title=\"Group\" />\r\n\t\t\t\t\t\t\t\t\t<Column field=\"invoice_sub_group_name\" width=\"200\" title=\"Sub Group\" />\r\n\t\t\t\t\t\t\t\t\t<Column field=\"invoice_item_name\" width=\"200\" title=\"Item\" />\r\n\t\t\t\t\t\t\t\t\t<Column field=\"amount\" width=\"210\" title=\"Total\" />\r\n\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t{!windowWidth && (\r\n\t\t\t\t\t\t\t\t\t<Accordion defaultActiveKey=\"0\">\r\n\t\t\t\t\t\t\t\t\t\t{accordionList &&\r\n\t\t\t\t\t\t\t\t\t\t\taccordionList.length > 0 &&\r\n\t\t\t\t\t\t\t\t\t\t\taccordionList.map((row) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Card key={row.id} style={{ marginBottom: 4 }}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Accordion.Toggle as={Card.Header} style={{ backgroundColor: \"#7599b1\" }} eventKey={row.id}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{ display: \"flex\", alignItems: \"center\", color: \"#ffffff\", fontSize: 18 }}>{row.invoice_date}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button variant=\"outline-light\" size=\"sm\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<FaAngleDown />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Accordion.Toggle>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Accordion.Collapse eventKey={row.id}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Card.Body>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{ padding: \"0 16px 0 8px\" }}>Invoice Date:</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span>{moment(row.invoice_date).format(\"DD-MMM-YYYY\")}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{ padding: \"0 16px 0 8px\" }}>Invoice Number:</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span>{row.invoice_number}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{ padding: \"0 16px 0 8px\" }}>Group:</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span>{row.group}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{ padding: \"0 16px 0 8px\" }}>Sub Group:</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span>{row.sub_group}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{ padding: \"0 16px 0 8px\" }}>Item:</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span>{row.item}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{ padding: \"0 16px 0 8px\" }}>Total:</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span>{row.amount}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Card.Body>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Accordion.Collapse>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Card>\r\n\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t</Accordion>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</Card.Body>\r\n\t\t\t\t\t</Card>\r\n\t\t\t\t</Col>\r\n\t\t\t</Row>\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default ExpenditureReport;\r\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/reports/sales/index.js",["930"],"import React, { useState, useEffect } from \"react\";\r\nimport { Row, Col, Card, Accordion, ListGroup, Button } from \"react-bootstrap\";\r\nimport { Grid, GridColumn as Column } from \"@progress/kendo-react-grid\";\r\nimport { process } from \"@progress/kendo-data-query\";\r\nimport moment from \"moment\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport { FaAngleDown } from \"react-icons/fa\";\r\n\r\nimport { callApi } from \"../../../services/apiService\";\r\nimport { showNotification } from \"../../../services/toasterService\";\r\nimport { ApiConstants } from \"../../../config/apiConstants\";\r\nimport Spinner from \"../../../components/Spinner\";\r\nimport useWindowSize from \"../../../hooks/useWindowSize\";\r\n\r\nconst SalesReport = (props) => {\r\n\tconst [showLoader, setShowLoader] = useState(false);\r\n\tconst [reportList, setreportList] = useState([]);\r\n\tconst [startDate, setStartDate] = useState(null);\r\n\tconst [endDate, setEndDate] = useState(null);\r\n\tconst [gridState, setgridState] = useState({ skip: 0, take: 10 });\r\n\tconst [reportGridData, setreportGridData] = useState(null);\r\n\tconst userObj = JSON.parse(localStorage.getItem(\"user\"));\r\n\tconst [gridWidth, setgridWidth] = useState(1024);\r\n\tconst windowSize = useWindowSize();\r\n\tconst [accordionList, setAccordionList] = useState([]);\r\n\tconst [windowWidth, setWindowWidth] = useState(window.innerWidth);\r\n\tconst pagerSettings = { buttonCount: 5, info: true, type: \"numeric\", pageSizes: true, previousNext: true };\r\n\r\n\tuseEffect(() => setWindowWidth(window.innerWidth > 992), []);\r\n\tconst handleResize = React.useCallback(() => {\r\n\t\tlet gridContext = document.querySelector(\".k-grid\");\r\n\t\tif (gridContext?.offsetWidth > gridWidth) {\r\n\t\t\tsetgridWidth(gridContext.offsetWidth);\r\n\t\t}\r\n\t}, [gridWidth]);\r\n\r\n\tuseEffect(() => {\r\n\t\tlet resizeObserver = new ResizeObserver(() => {\r\n\t\t\thandleResize();\r\n\t\t});\r\n\t\tresizeObserver.observe(document.querySelector(\".k-grid\"));\r\n\t\tgetReports();\r\n\t}, [handleResize]);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetreportGridData(process(reportList, gridState));\r\n\t}, [reportList, gridState]);\r\n\r\n\tconst setWidth = (minWidth) => {\r\n\t\tif (windowSize.width < 992) return minWidth;\r\n\t\tlet dynamicWidth = gridWidth - 860;\r\n\t\tlet width = dynamicWidth > minWidth ? dynamicWidth : minWidth;\r\n\t\treturn width;\r\n\t};\r\n\r\n\tconst pageChange = (event) => setgridState({ ...gridState, skip: event.page.skip, take: event.page.take });\r\n\tconst filterChange = (event) => setgridState({ ...gridState, filter: event.filter });\r\n\r\n\tconst onSearchFilter = () => {\r\n\t\tlet dateFilters = [];\r\n\t\tif (startDate) {\r\n\t\t\tdateFilters.push({ field: \"invoice_date\", operator: \"gte\", value: moment(startDate).format(\"YYYY-MM-DD\") });\r\n\t\t}\r\n\t\tif (endDate) {\r\n\t\t\tdateFilters.push({ field: \"invoice_date\", operator: \"lte\", value: moment(endDate).format(\"YYYY-MM-DD\") });\r\n\t\t}\r\n\t\tlet updatedState = { ...gridState, filter: { logic: \"and\", filters: dateFilters } };\r\n\t\tsetgridState(updatedState);\r\n\t};\r\n\r\n\tconst resetFilters = () => {\r\n\t\tsetgridState({ ...gridState, filter: null });\r\n\t\tsetStartDate(null);\r\n\t\tsetEndDate(null);\r\n\t};\r\n\r\n\tconst getReports = () => {\r\n\t\tsetShowLoader(true);\r\n\t\tcallApi(\"get\", ApiConstants.sales.clientsalesreport, {}, true)\r\n\t\t\t.then((response) => {\r\n\t\t\t\tsetShowLoader(false);\r\n\t\t\t\tif (response && response.status_code === 200) {\r\n\t\t\t\t\tsetreportList(response.payload);\r\n\t\t\t\t\tsetAccordionList(response.payload);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tsetShowLoader(false);\r\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\r\n\t\t\t});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t{showLoader && <Spinner />}\r\n\t\t\t<Row>\r\n\t\t\t\t<Col xl={12}>\r\n\t\t\t\t\t<Card className=\"rounded\">\r\n\t\t\t\t\t\t<Card.Body className=\"p-4\">\r\n\t\t\t\t\t\t\t<Row className=\"mb-3\">\r\n\t\t\t\t\t\t\t\t<Col xs={12} md={4} xl={3}>\r\n\t\t\t\t\t\t\t\t\t<div className=\"date-picker-container\">\r\n\t\t\t\t\t\t\t\t\t\t<DatePicker\r\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"form-control mb-2\"\r\n\t\t\t\t\t\t\t\t\t\t\tplaceholderText=\"Start Date\"\r\n\t\t\t\t\t\t\t\t\t\t\t// minDate={new Date(userObj?.period?.start_period_date?.date)}\r\n\t\t\t\t\t\t\t\t\t\t\t// maxDate={new Date(userObj?.period?.end_period_date?.date)}\r\n\t\t\t\t\t\t\t\t\t\t\tdateFormat=\"dd/MM/yyyy\"\r\n\t\t\t\t\t\t\t\t\t\t\tselected={startDate}\r\n\t\t\t\t\t\t\t\t\t\t\tonSelect={() => setEndDate(null)}\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={setStartDate}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-calendar\"></i>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t<Col xs={12} md={4} xl={3}>\r\n\t\t\t\t\t\t\t\t\t<div className=\"date-picker-container\">\r\n\t\t\t\t\t\t\t\t\t\t<DatePicker\r\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"form-control mb-2\"\r\n\t\t\t\t\t\t\t\t\t\t//  minDate={startDate ? startDate : new Date(userObj?.period?.start_period_date?.date)}\r\n\t\t\t\t\t\t\t\t\t\t//  maxDate={new Date(userObj?.period?.end_period_date?.date)} placeholderText=\"End Date\" dateFormat=\"dd/MM/yyyy\" selected={endDate} onChange={setEndDate}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-calendar\"></i>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t<Col xs={10} md={1} xl={1}>\r\n\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn-icon btn btn-primary search-button\" onClick={onSearchFilter}>\r\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-search\"></i>\r\n\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t<Col xs={2} md={1} xl={1}>\r\n\t\t\t\t\t\t\t\t\t{(startDate || endDate) && (\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"text-muted filter-close-btn\" role=\"button\" onClick={resetFilters}>\r\n\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-x\"></i>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t\t{windowWidth && (\r\n\t\t\t\t\t\t\t\t<Grid data={reportGridData} skip={gridState.skip} pageSize={gridState.take} pageable={pagerSettings} onPageChange={pageChange} filterable={true} filter={gridState.filter} onFilterChange={filterChange}>\r\n\t\t\t\t\t\t\t\t\t<Column field=\"id\" title=\"#\" width=\"60px\" filterable={false} cell={(props) => <td>{props.dataIndex + 1}</td>} />\r\n\t\t\t\t\t\t\t\t\t<Column field=\"invoice_date\" width={setWidth(200)} title=\"Invoice Date\" filterable={false} cell={(props) => <td>{moment(props.dataItem.invoice_date).format(\"DD-MMM-YYYY\")}</td>} />\r\n\t\t\t\t\t\t\t\t\t<Column field=\"invoice_number\" title=\"Invoice Number\" width=\"200\" />\r\n\t\t\t\t\t\t\t\t\t<Column field=\"amount_exclude_vat\" width=\"200\" title=\"Amount Excl VAT\" filterable={false} />\r\n\t\t\t\t\t\t\t\t\t<Column field=\"vat_amount\" width=\"200\" title=\"VAT\" filterable={false} />\r\n\t\t\t\t\t\t\t\t\t<Column field=\"amount\" width=\"200\" title=\"Total\" />\r\n\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t{!windowWidth && (\r\n\t\t\t\t\t\t\t\t\t<Accordion defaultActiveKey=\"0\">\r\n\t\t\t\t\t\t\t\t\t\t{accordionList &&\r\n\t\t\t\t\t\t\t\t\t\t\taccordionList.length > 0 &&\r\n\t\t\t\t\t\t\t\t\t\t\taccordionList.map((row) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Card key={row.id} style={{ marginBottom: 4 }}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Accordion.Toggle as={Card.Header} style={{ backgroundColor: \"#7599b1\" }} eventKey={row.id}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{ display: \"flex\", alignItems: \"center\", color: \"#ffffff\", fontSize: 18 }}>{row.invoice_date}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button variant=\"outline-light\" size=\"sm\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<FaAngleDown />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Accordion.Toggle>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Accordion.Collapse eventKey={row.id}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Card.Body>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{ padding: \"0 16px 0 8px\" }}>Invoice Date:</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span>{moment(row.invoice_date).format(\"DD-MMM-YYYY\")}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{ padding: \"0 16px 0 8px\" }}>Invoice Number:</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span>{row.invoice_number}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{ padding: \"0 16px 0 8px\" }}>Amount Excl VAT:</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span>{row.amount_exclude_vat}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{ padding: \"0 16px 0 8px\" }}>VAT:</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span>{row.vat_amount}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{ padding: \"0 16px 0 8px\" }}>Total:</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span>{row.amount}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Card.Body>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Accordion.Collapse>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Card>\r\n\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t</Accordion>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</Card.Body>\r\n\t\t\t\t\t</Card>\r\n\t\t\t\t</Col>\r\n\t\t\t</Row>\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default SalesReport;\r\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/services/apiService.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/services/toasterService.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/enums/vatOptions.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/usermanagement/clients/PlanHistory.js",["931","932","933","934"],"import React, { useState, useEffect } from \"react\";\nimport { Row, Col, Card } from \"react-bootstrap\";\nimport { Grid, GridColumn as Column } from \"@progress/kendo-react-grid\";\nimport { process } from \"@progress/kendo-data-query\";\nimport { PDFExport } from \"@progress/kendo-react-pdf\";\nimport moment from \"moment\";\n\nimport { callApi } from \"../../../services/apiService\";\nimport { showNotification } from \"../../../services/toasterService\";\nimport { ApiConstants } from \"../../../config/apiConstants\";\nimport Invoice from \"../../../components/Invoice\";\n\nconst PlanHistory = ({ userId, onShowLoader, userData }) => {\n  const [historyData, setHistoryData] = useState([]);\n  const [invoiceData, setInvoiceData] = useState(null);\n  const [gridState, setGridState] = useState({\n    skip: 0,\n    take: 5,\n  });\n  const [gridData, setGridData] = useState(null);\n  const pdfExportComponent = React.useRef(null);\n\n  const pagerSettings = {\n    buttonCount: 5,\n    info: true,\n    type: \"numeric\",\n    pageSizes: true,\n    previousNext: true,\n  };\n\n  useEffect(() => {\n    getPlanHistory();\n  }, []);\n\n  useEffect(() => {\n    loadGridData();\n  }, [historyData, gridState]);\n\n  const loadGridData = () => {\n    let updatedData = process(historyData, gridState);\n    setGridData(updatedData);\n  };\n\n  const pageChange = (event) => {\n    let updatedState = {\n      ...gridState,\n      skip: event.page.skip,\n      take: event.page.take,\n    };\n    setGridState(updatedState);\n  };\n\n  const getPlanHistory = () => {\n    onShowLoader(true);\n    callApi(\"get\", ApiConstants.plans.history, { user_id: userId })\n      .then((response) => {\n        onShowLoader(false);\n        if (response && response.status_code === 200) {\n          setHistoryData(response.payload);\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const downloadInvoice = (event, dataItem) => {\n    event.preventDefault();\n    onShowLoader(true);\n    setInvoiceData(dataItem);\n    setTimeout(() => {\n      if (pdfExportComponent.current) {\n        pdfExportComponent.current.save();\n      }\n      onShowLoader(false);\n    }, 500);\n  };\n\n  return (\n    <React.Fragment>\n      <Row>\n        <Col xl={12}>\n          <Card className=\"rounded mb-0\">\n            <Card.Header>\n              <h5 className=\"text-primary\">Payment History</h5>\n            </Card.Header>\n            <Card.Body className=\"p-4\">\n              <Grid\n                data={gridData}\n                skip={gridState.skip}\n                pageable={true}\n                pageSize={gridState.take}\n                onPageChange={pageChange}>\n                <Column\n                  field=\"id\"\n                  title=\"#\"\n                  width=\"60px\"\n                  filterable={false}\n                  cell={(props) => <td>{props.dataIndex + 1}</td>}\n                />\n                <Column\n                  field=\"plan_name\"\n                  width=\"180\"\n                  title=\"Plan Name\"\n                  cell={(props) => <td>VATZ - {props.dataItem.plan_name}</td>}\n                />\n                <Column field=\"ref\" width=\"140\" title=\"Reference\" />\n                <Column\n                  field=\"payment_date\"\n                  width=\"150\"\n                  title=\"Payment Date\"\n                  cell={(props) => (\n                    <td>\n                      <div>\n                        {moment(props.dataItem.payment_date).format(\n                          \"DD - MMM - YYYY\"\n                        )}\n                      </div>\n                    </td>\n                  )}\n                />\n                <Column\n                  field=\"from\"\n                  width=\"150\"\n                  title=\"From Date\"\n                  cell={(props) => (\n                    <td>\n                      <div>\n                        {moment(props.dataItem.from).format(\"DD - MMM - YYYY\")}\n                      </div>\n                    </td>\n                  )}\n                />\n                <Column\n                  field=\"to\"\n                  width=\"150\"\n                  title=\"To Date\"\n                  cell={(props) => (\n                    <td>\n                      <div>\n                        {moment(props.dataItem.to).format(\"DD - MMM - YYYY\")}\n                      </div>\n                    </td>\n                  )}\n                />\n                <Column\n                  field=\"payment_amount\"\n                  width=\"150\"\n                  title=\"Amount\"\n                  cell={(props) => (\n                    <td>\n                      <div>\n                        {props.dataItem.payment_currency}{\" \"}\n                        {props.dataItem.payment_amount}\n                      </div>\n                    </td>\n                  )}\n                />\n                <Column field=\"payment_type\" width=\"140\" title=\"Payment Type\" />\n                <Column\n                  field=\"payment_date\"\n                  width=\"160\"\n                  title=\"Invoice number\"\n                  cell={(props) => (\n                    <td>\n                      <div>\n                        VATZ-\n                        {moment(props.dataItem.payment_date).format(\"YYYY-MM-\")}\n                        {props.dataItem.id}\n                      </div>\n                    </td>\n                  )}\n                />\n                <Column\n                  field=\"action\"\n                  width=\"120\"\n                  title=\" \"\n                  cell={(props) => (\n                    <td>\n                      <a\n                        href=\"#\"\n                        className=\"text-primary\"\n                        onClick={(e) => downloadInvoice(e, props.dataItem)}>\n                        <i className=\"feather icon-download\" /> Download\n                      </a>\n                    </td>\n                  )}\n                />\n              </Grid>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n      {invoiceData && (\n        <div\n          style={{\n            position: \"absolute\",\n            left: \"-10000px\",\n            top: 0,\n          }}>\n          <PDFExport\n            ref={pdfExportComponent}\n            paperSize=\"A4\"\n            margin={30}\n            fileName={`TaxInvoice`}\n            author=\"VatzApp\">\n            <Invoice data={invoiceData} userData={userData} />\n          </PDFExport>\n        </div>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default PlanHistory;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/config/apiConstants.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/usermanagement/clients/AddPlan.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/usermanagement/clients/form.js",["935","936","937","938","939","940"],"import React, {useState, useEffect} from \"react\";\nimport {Row, Col} from \"react-bootstrap\";\nimport {Formik, Field, Form, ErrorMessage} from \"formik\";\nimport * as Yup from \"yup\";\nimport Select from \"react-select\";\n\nimport {showNotification} from \"../../../services/toasterService\";\nimport {CONFIG} from \"../../../config/constant\";\nimport {callApi, callUploadApi} from \"../../../services/apiService\";\nimport {ApiConstants} from \"../../../config/apiConstants\";\nimport avatar1 from \"../../../assets/images/icons/company.png\";\n\nconst ClientForm = (props) => {\n\tconst [isSubmitted, setIsSubmitted] = useState(false);\n\tconst [selectedCountry, setSelectedCountry] = useState(\"\");\n\tconst [countriesList, setCountriesList] = useState([]);\n\tconst [regionList, setRegionList] = useState([]);\n\tconst [selectedDisplayPic, setSelectedDisplayPic] = useState(null);\n\tconst [previewImg, setPreviewImg] = useState(null);\n\tconst [dpErrors, setDpErrors] = useState(\"\");\n\tconst [userInfo, setuserInfo] = useState(null);\n\n\tconst FILE_SIZE = CONFIG.MAX_UPLOAD_SIZE;\n\tconst SUPPORTED_FORMATS = [\"pdf\", \"jpg\", \"jpeg\", \"png\", \"doc\", \"docx\", \"jfif\", \"gif\"];\n\n\tconst UserFormSchema = Yup.object().shape({\n\t\tname: Yup.string().required(\"Please enter Name\"),\n\t\temail: Yup.string().required(\"Please enter Email \").email(\"Please enter a valid Email\"),\n\t\tbuildingName: Yup.string().required(\"Please enter Building Name\"),\n\t\tregion: Yup.string().required(\"Please select Region\"),\n\t\tplace: Yup.string().required(\"Please enter Place\"),\n\t\tpo_box: Yup.string().required(\"Please enter PO Box\"),\n\t\tcity: Yup.string().required(\"Please enter City\"),\n\t\tcountry: Yup.string().required(\"Please select Country\"),\n\t\twhatsappno: Yup.string()\n\t\t\t.required(\"Please enter Whatsapp No\")\n\t\t\t.matches(/^[0-9]*$/, \"Please enter a valid phone number\"),\n\t\tlandphone: Yup.string().matches(/^[0-9]*$/, \"Please enter a valid phone number\"),\n\t\tmobile: Yup.string().matches(/^[0-9]*$/, \"Please enter a valid mobile number\"),\n\t\ttradeLicenseNumber: Yup.string().required(\"Please enter Trade License Number\"),\n\t\ttradeFile: Yup.mixed()\n\t\t\t.test(\"fileSize\", \"Exceeds maximum file size (Max 50MB)\", (value) => {\n\t\t\t\tif (value) {\n\t\t\t\t\treturn value.size <= FILE_SIZE;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t})\n\t\t\t.test(\"fileFormat\", \"Unsupported Format\", (value) => {\n\t\t\t\tif (value) {\n\t\t\t\t\tlet regex = /(?:\\.([^.]+))?$/;\n\t\t\t\t\tlet ext = regex.exec(value.name)[1];\n\t\t\t\t\treturn SUPPORTED_FORMATS.includes(ext?.toLowerCase());\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}),\n\t\tcontact_person: Yup.string().required(\"Please enter Contact Person name\"),\n\t\tcp_mobile: Yup.string()\n\t\t\t.required(\"Please enter Contact Person number\")\n\t\t\t.matches(/^[0-9]*$/, \"Please enter a valid mobile number\"),\n\t\tftaEmail: Yup.string().email(\"Please enter a valid FTA Email\"),\n\t\tftaPassword: Yup.string(),\n\t\ttrnNumber: Yup.string().required(\"Please enter TRN Number\"),\n\t\ttrnFile: Yup.mixed()\n\t\t\t.test(\"fileSize\", \"Exceeds maximum file size (Max 50MB)\", (value) => {\n\t\t\t\tif (value) {\n\t\t\t\t\treturn value.size <= FILE_SIZE;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t})\n\t\t\t.test(\"fileFormat\", \"Unsupported Format\", (value) => {\n\t\t\t\tif (value) {\n\t\t\t\t\tlet regex = /(?:\\.([^.]+))?$/;\n\t\t\t\t\tlet ext = regex.exec(value.name)[1];\n\t\t\t\t\treturn SUPPORTED_FORMATS.includes(ext?.toLowerCase());\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}),\n\t});\n\n\tuseEffect(() => {\n\t\tgetContries();\n\t}, []);\n\n\tuseEffect(() => {\n\t\tif (props.isEdit && countriesList.length) {\n\t\t\tgetUserData(props?.dataItem?.user_id);\n\t\t}\n\t}, [countriesList]);\n\n\tconst uploadFiles = (data) =>\n\t\tnew Promise((resolve, reject) => {\n\t\t\tlet formData = new FormData();\n\t\t\tformData.append(\"file\", data);\n\n\t\t\treturn callUploadApi(formData)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tif (response.status_code === 201) resolve(response);\n\t\t\t\t\telse {\n\t\t\t\t\t\treject(response);\n\t\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\treject(error);\n\t\t\t\t\tshowNotification(\"Error\", \"File upload failed\", \"error\");\n\t\t\t\t});\n\t\t});\n\n\tconst onSubmit = async (values) => {\n\t\tprops.onShowLoader(true);\n\t\tlet params = {\n\t\t\tuser_id: userInfo?.id,\n\t\t\temail: values.email,\n\t\t\tw_country_code: selectedCountry.phone_code,\n\t\t\twhatsapp_no: values.whatsappno,\n\t\t\tname: values.name,\n\t\t\timage_id: userInfo?.profile_image_id,\n\t\t\tbuilding_name: values.buildingName,\n\t\t\tcountry_id: values.country,\n\t\t\tregion_id: values.region,\n\t\t\tcountry_code: selectedCountry.phone_code,\n\t\t\tmobile: values.mobile,\n\t\t\t// join_date: userInfo?.created_at,\n\t\t\t// salary: 0,\n\t\t\tp_o_box: values.po_box,\n\t\t\tpalce: values.place,\n\t\t\tcity: values.city,\n\t\t\ttrade_license_number: values.tradeLicenseNumber,\n\t\t\ttrn_number: values.trnNumber,\n\t\t\ttrade_license_image_id: userInfo?.client_user?.trade_license_image_id,\n\t\t\tfta_email: values.ftaEmail,\n\t\t\tfta_password: values.ftaPassword,\n\t\t\tl_country_code: selectedCountry.phone_code,\n\t\t\tlandline: values.landphone,\n\t\t\tcontact_person: values.contact_person,\n\t\t\tcp_country_code: selectedCountry.phone_code,\n\t\t\tcp_mobile: values.cp_mobile,\n\t\t\ttran_certificate_id: userInfo?.client_user?.tran_certificate_id,\n\t\t};\n\n\t\tif (values.tradeFile) {\n\t\t\tawait uploadFiles(values.tradeFile)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tparams.trade_license_image_id = response.payload.file_id;\n\t\t\t\t})\n\t\t\t\t.catch((error) => {});\n\t\t}\n\n\t\tif (values.trnFile) {\n\t\t\tawait uploadFiles(values.trnFile)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tparams.tran_certificate_id = response.payload.file_id;\n\t\t\t\t})\n\t\t\t\t.catch((error) => {});\n\t\t}\n\n\t\tif (selectedDisplayPic) {\n\t\t\tawait uploadFiles(selectedDisplayPic)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tparams.image_id = response.payload.file_id;\n\t\t\t\t})\n\t\t\t\t.catch((error) => {});\n\t\t}\n\n\t\tupdateProfile(params);\n\t};\n\n\tconst updateProfile = (params) => {\n\t\tcallApi(\"post\", ApiConstants.client.updatebyadmin, params, true)\n\t\t\t.then((response) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tif (response && response.status_code === 201) {\n\t\t\t\t\tprops.onSuccess();\n\t\t\t\t\tshowNotification(\"Success\", response.message, \"success\");\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\tconst onSelectCountry = (value) => {\n\t\tsetSelectedCountry(value);\n\t\tsetRegionList(\n\t\t\tvalue.regions?.map((i) => {\n\t\t\t\treturn {...i, value: i.id, label: i.name};\n\t\t\t})\n\t\t);\n\t};\n\n\tconst onFileChange = (event) => {\n\t\tlet file = event.target.files[0];\n\t\tif (file) {\n\t\t\tlet regex = /(?:\\.([^.]+))?$/;\n\t\t\tlet ext = regex.exec(file.name)[1];\n\n\t\t\tif (file.size >= FILE_SIZE) {\n\t\t\t\tsetDpErrors(\"Exceeds maximum file size (Max 50MB)\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!SUPPORTED_FORMATS.includes(ext?.toLowerCase())) {\n\t\t\t\tsetDpErrors(\"Unsupported Format\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet reader = new FileReader();\n\t\t\treader.readAsDataURL(file);\n\t\t\treader.onloadend = (e) => {\n\t\t\t\tsetPreviewImg(reader.result);\n\t\t\t\tsetSelectedDisplayPic(file);\n\t\t\t};\n\t\t\tsetDpErrors(\"\");\n\t\t}\n\t};\n\n\tconst getContries = () => {\n\t\tprops.onShowLoader(true);\n\t\tcallApi(\"get\", ApiConstants.lookups.getCountry, {})\n\t\t\t.then((response) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tsetCountriesList(\n\t\t\t\t\t\tresponse.payload?.map((i) => {\n\t\t\t\t\t\t\treturn {...i, value: i.id, label: i.name};\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\tconst getUserData = (user_id) => {\n\t\tprops.onShowLoader(true);\n\t\tcallApi(\"get\", ApiConstants.user.getuser, {user_id}, true)\n\t\t\t.then((response) => {\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tsetuserInfo(response.payload);\n\t\t\t\t\tlet selectedCountry = countriesList.find((i) => i.id === response.payload?.client_user?.country_id);\n\t\t\t\t\tif (selectedCountry) onSelectCountry(selectedCountry);\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t});\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<div className=\"card shadow-none mb-0 rounded\">\n\t\t\t\t<div className=\"card-header\">\n\t\t\t\t\t<h5 className=\"text-primary\">Update Client</h5>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"card-body mx-2\">\n\t\t\t\t\t<Formik\n\t\t\t\t\t\tenableReinitialize={true}\n\t\t\t\t\t\tinitialValues={{\n\t\t\t\t\t\t\temail: userInfo?.email ? userInfo.email : \"\",\n\t\t\t\t\t\t\tname: userInfo?.name ? userInfo.name : \"\",\n\t\t\t\t\t\t\tbuildingName: userInfo?.client_user?.building_name ? userInfo.client_user.building_name : \"\",\n\t\t\t\t\t\t\tplace: userInfo?.client_user?.palce ? userInfo.client_user.palce : \"\",\n\t\t\t\t\t\t\tpo_box: userInfo?.client_user.p_o_box ? userInfo.client_user.p_o_box : \"\",\n\t\t\t\t\t\t\tcity: userInfo?.client_user.city ? userInfo.client_user.city : \"\",\n\t\t\t\t\t\t\tcountry: userInfo?.client_user.country_id ? userInfo.client_user.country_id : \"\",\n\t\t\t\t\t\t\tregion: userInfo?.client_user.region_id ? userInfo.client_user.region_id : \"\",\n\t\t\t\t\t\t\tmobile: userInfo?.client_user.mobile ? userInfo.client_user.mobile : \"\",\n\t\t\t\t\t\t\twhatsappno: userInfo?.whatsapp_no ? userInfo.whatsapp_no : \"\",\n\t\t\t\t\t\t\tlandphone: userInfo?.client_user.landline ? userInfo.client_user.landline : \"\",\n\t\t\t\t\t\t\ttradeLicenseNumber: userInfo?.client_user.trade_license_number ? userInfo.client_user.trade_license_number : \"\",\n\t\t\t\t\t\t\ttradeFile: undefined,\n\t\t\t\t\t\t\ttrnNumber: userInfo?.client_user.trn_number ? userInfo.client_user.trn_number : \"\",\n\t\t\t\t\t\t\ttrnFile: undefined,\n\t\t\t\t\t\t\tcontact_person: userInfo?.client_user.contact_person ? userInfo.client_user.contact_person : \"\",\n\t\t\t\t\t\t\tcp_mobile: userInfo?.client_user.cp_mobile ? userInfo.client_user.cp_mobile : \"\",\n\t\t\t\t\t\t\tftaEmail: userInfo?.client_user.fta_email ? userInfo.client_user.fta_email : \"\",\n\t\t\t\t\t\t\tftaPassword: userInfo?.client_user.fta_password ? userInfo.client_user.fta_password : \"\",\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tvalidationSchema={UserFormSchema}\n\t\t\t\t\t\tonSubmit={(values) => onSubmit(values)}>\n\t\t\t\t\t\t{({errors, handleChange, values, setFieldValue}) => (\n\t\t\t\t\t\t\t<Form autoComplete=\"off\">\n\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t<Col xs={12} xl={6}>\n\t\t\t\t\t\t\t\t\t\t<label>Company Name</label>\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className={`form-control ${errors.name && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"Company Name\" name=\"name\" />\n\t\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"name\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t<Col xs={12} xl={6}>\n\t\t\t\t\t\t\t\t\t\t<label>Email</label>\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className={`form-control ${errors.email && isSubmitted ? \"is-invalid\" : \"\"}`} id=\"user-email\" placeholder=\"Email\" name=\"email\" autoComplete=\"off\" />\n\t\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"email\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t<Col xs={12} xl={6}>\n\t\t\t\t\t\t\t\t\t\t<label>Building Name</label>\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className={`form-control ${errors.buildingName && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"Building Name\" name=\"buildingName\" />\n\t\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"buildingName\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t<Col xs={12} xl={6}>\n\t\t\t\t\t\t\t\t\t\t<label>Place / Street name</label>\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className={`form-control ${errors.place && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"Place / Street name\" name=\"place\" />\n\t\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"place\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t<Col xs={12} xl={6}>\n\t\t\t\t\t\t\t\t\t\t<label>P O Box</label>\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className={`form-control ${errors.po_box && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"P O Box\" name=\"po_box\" />\n\t\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"po_box\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t<Col xs={12} xl={6}>\n\t\t\t\t\t\t\t\t\t\t<label>City</label>\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className={`form-control ${errors.city && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"City\" name=\"city\" />\n\t\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"city\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t<Col xs={12} xl={6}>\n\t\t\t\t\t\t\t\t\t\t<label>Country</label>\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={`w-100 form-control-select ${errors.country && isSubmitted ? \"is-invalid\" : \"\"}`}\n\t\t\t\t\t\t\t\t\t\t\t\tclassNamePrefix=\"select\"\n\t\t\t\t\t\t\t\t\t\t\t\toptions={countriesList}\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={countriesList.find((i) => i.id === values.country)}\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Select Country\"\n\t\t\t\t\t\t\t\t\t\t\t\tisSearchable={false}\n\t\t\t\t\t\t\t\t\t\t\t\tisDisabled\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(value) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tonSelectCountry(value);\n\t\t\t\t\t\t\t\t\t\t\t\t\tlet event = {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttarget: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: \"country\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue: value.id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t\thandleChange(event);\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"country\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t<Col xs={12} xl={6}>\n\t\t\t\t\t\t\t\t\t\t<label>Region</label>\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={`w-100 form-control-select ${errors.region && isSubmitted ? \"is-invalid\" : \"\"}`}\n\t\t\t\t\t\t\t\t\t\t\t\tclassNamePrefix=\"select\"\n\t\t\t\t\t\t\t\t\t\t\t\toptions={regionList}\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Select Region\"\n\t\t\t\t\t\t\t\t\t\t\t\tisSearchable\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={regionList.find((i) => i.id === values?.region)}\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(value) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tlet event = {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttarget: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: \"region\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue: value.id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t\thandleChange(event);\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"region\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t<Col xs={12} xl={6}>\n\t\t\t\t\t\t\t\t\t\t<label>Whatsapp Number</label>\n\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"input-group-prepend bg-light\">\n\t\t\t\t\t\t\t\t\t\t\t\t<span className={`input-group-text ${errors.whatsappno && isSubmitted ? \"border border-danger\" : \"\"}`} id=\"country-code\" style={{fontSize: 14}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{selectedCountry.phone_code}\n\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className={`form-control ${errors.whatsappno && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"Whatsapp Number\" name=\"whatsappno\" />\n\t\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"whatsappno\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t<Col xs={12} xl={6}>\n\t\t\t\t\t\t\t\t\t\t<label>Land Line Number</label>\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"input-group-prepend bg-light\">\n\t\t\t\t\t\t\t\t\t\t\t\t<span className={`input-group-text ${errors.landphone && isSubmitted ? \"border border-danger\" : \"\"}`} id=\"country-code\" style={{fontSize: 14}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{selectedCountry.phone_code}\n\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className={`form-control ${errors.landphone && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"Land Line Number\" name=\"landphone\" />\n\t\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"landphone\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t<Col xs={12} xl={6}>\n\t\t\t\t\t\t\t\t\t\t<label>Mobile Number</label>\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"input-group-prepend bg-light\">\n\t\t\t\t\t\t\t\t\t\t\t\t<span className={`input-group-text ${errors.mobile && isSubmitted ? \"border border-danger\" : \"\"}`} id=\"country-code\" style={{fontSize: 14}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{selectedCountry.phone_code}\n\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className={`form-control ${errors.mobile && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"Mobile Number\" name=\"mobile\" />\n\t\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"mobile\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t<Col xs={12} xl={6}></Col>\n\t\t\t\t\t\t\t\t\t<Col xs={12} xl={6}>\n\t\t\t\t\t\t\t\t\t\t<label>Trade License Number</label>\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className={`form-control ${errors.tradeLicenseNumber && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"Trade License Number\" name=\"tradeLicenseNumber\" />\n\t\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"tradeLicenseNumber\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t<Col xs={12} xl={6}>\n\t\t\t\t\t\t\t\t\t\t<label>Upload Trade License Copy</label>\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group\">\n\t\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\t\tid=\"tradeFile\"\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={`form-control ${errors.tradeFile && isSubmitted ? \"is-invalid\" : \"\"}`}\n\t\t\t\t\t\t\t\t\t\t\t\ttype=\"file\"\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetFieldValue(\"tradeFile\", event.currentTarget.files[0]);\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t{userInfo && userInfo?.client_user?.trade_license_image && (\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"ml-2 mt-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<a target=\"_blank\" rel=\"noreferrer\" href={CONFIG.API_BASE_URL + ApiConstants.file.download + \"?file_name=\" + userInfo?.client_user?.trade_license_image.file_path}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tDownload\n\t\t\t\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"tradeFile\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div style={{fontSize: 10}} className=\"mb-3\">\n\t\t\t\t\t\t\t\t\t\t\tSupported file formats JPEG, PNG, Pdf, DOC, DOCX\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t\t\t\t\t<Col xs={12} xl={6}>\n\t\t\t\t\t\t\t\t\t\t<label>TRN</label>\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className={`form-control ${errors.trnNumber && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"TRN\" name=\"trnNumber\" />\n\t\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"trnNumber\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t<Col xs={12} xl={6}>\n\t\t\t\t\t\t\t\t\t\t<label>Upload TRN Certificate</label>\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group\">\n\t\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\t\tid=\"trnFile\"\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={`form-control ${errors.trnFile && isSubmitted ? \"is-invalid\" : \"\"}`}\n\t\t\t\t\t\t\t\t\t\t\t\ttype=\"file\"\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetFieldValue(\"trnFile\", event.currentTarget.files[0]);\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t{userInfo && userInfo?.client_user?.tran_certificate_image && (\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"ml-2 mt-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<a target=\"_blank\" rel=\"noreferrer\" href={CONFIG.API_BASE_URL + ApiConstants.file.download + \"?file_name=\" + userInfo?.client_user?.tran_certificate_image.file_path}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tDownload\n\t\t\t\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"trnFile\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div style={{fontSize: 10}} className=\"mb-3\">\n\t\t\t\t\t\t\t\t\t\t\tSupported file formats JPEG, PNG, Pdf, DOC, DOCX\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t<Col xs={12} xl={6}>\n\t\t\t\t\t\t\t\t\t\t<label>Contact Person</label>\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className={`form-control ${errors.contact_person && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"Contact Person\" name=\"contact_person\" />\n\t\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"contact_person\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t<Col xs={12} xl={6}>\n\t\t\t\t\t\t\t\t\t\t<label>Contact Number</label>\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"input-group-prepend bg-light\">\n\t\t\t\t\t\t\t\t\t\t\t\t<span className={`input-group-text ${errors.cp_mobile && isSubmitted ? \"border border-danger\" : \"\"}`} id=\"country-code\" style={{fontSize: 14}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{selectedCountry.phone_code}\n\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className={`form-control ${errors.cp_mobile && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"Contact Number\" name=\"cp_mobile\" />\n\t\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"cp_mobile\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t\t\t<label style={{color: \"#096DA9\"}} className=\"mb-3\">\n\t\t\t\t\t\t\t\t\t\t\tFTA Login Details &nbsp;\n\t\t\t\t\t\t\t\t\t\t\t<i className=\"fa fa-info-circle\"></i>\n\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t<Col xs={12} xl={6}>\n\t\t\t\t\t\t\t\t\t\t<label>FTA Email</label>\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className={`form-control ${errors.ftaEmail && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"FTA Email\" name=\"ftaEmail\" />\n\t\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"ftaEmail\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t<Col xs={12} xl={6}>\n\t\t\t\t\t\t\t\t\t\t<label>FTA Password</label>\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t\t<Field type=\"password\" className={`form-control ${errors.ftaPassword && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"FTA Password\" name=\"ftaPassword\" />\n\t\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"ftaPassword\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t</Row>\n\n\t\t\t\t\t\t\t\t<div className=\"mt-3 text-center\">\n\t\t\t\t\t\t\t\t\t<button type=\"submit\" style={{width: 150, fontWeight: \"bold\"}} className=\"btn btn-primary shadow-2 mt-3\" onClick={() => setIsSubmitted(true)}>\n\t\t\t\t\t\t\t\t\t\tUpdate\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</Form>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Formik>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default ClientForm;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/utils/axios.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/usermanagement/suppliers/form.js",["941","942"],"import React, { useState, useEffect } from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport Select from \"react-select\";\n\nimport { callApi } from \"../../../services/apiService\";\nimport { showNotification } from \"../../../services/toasterService\";\nimport { ApiConstants } from \"../../../config/apiConstants\";\n\nconst UserForm = (props) => {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [countriesList, setCountriesList] = useState([]);\n  const [emiratesList, setEmiratesList] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState(\"\");\n  const [selectedEmirate, setSelectedEmirate] = useState(\"\");\n  const [userData, setUserData] = useState(null);\n\n  const UserFormSchema = Yup.object().shape({\n    name: Yup.string().required(\"Please enter Name\"),\n    trn: Yup.string().required(\"Please enter TRN\"),\n    email: Yup.string()\n      .required(\"Please enter Email \")\n      .email(\"Please enter a valid Email\"),\n    building_name: Yup.string().required(\"Please enter Building Name\"),\n    place: Yup.string().required(\"Please enter Place\"),\n    po_box: Yup.string().required(\"Please enter PO Box\"),\n    city: Yup.string().required(\"Please enter City\"),\n    region: Yup.string().required(\"Please select Emirate\"),\n    country: Yup.string().required(\"Please select Country\"),\n    whatsappno: Yup.string()\n      .required(\"Please enter Whatsapp No\")\n      .matches(/^[0-9]*$/, \"Please enter a valid phone number\"),\n  });\n\n  useEffect(() => {\n    getContries();\n  }, []);\n\n  useEffect(() => {\n    if (props.isEdit && countriesList.length) {\n      getUserData(props?.dataItem?.id);\n    }\n  }, [countriesList]);\n\n  const onSubmit = (values) => {\n    props.onShowLoader(true);\n\n    let params = {\n      email: values.email,\n      w_country_code: selectedCountry.phone_code,\n      whatsapp_no: values.whatsappno,\n      name: values.name,\n      trn: values.trn,\n      building_name: values.building_name,\n      country_id: parseInt(values.country),\n      region_id: parseInt(values.region),\n      p_o_box: values.po_box,\n      palce: values.place,\n      city: values.city,\n    };\n\n    props.isEdit\n      ? updateUser({ ...params, user_id: userData?.id })\n      : createUser(params);\n  };\n\n  const createUser = (params) => {\n    callApi(\"post\", ApiConstants.supplier.addsupplier, params)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 201) {\n          props.onSuccess();\n          showNotification(\"Success\", response.message, \"success\");\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const updateUser = (params) => {\n    callApi(\"post\", ApiConstants.supplier.update, params, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 201) {\n          props.onSuccess();\n          showNotification(\"Success\", response.message, \"success\");\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const getContries = () => {\n    props.onShowLoader(true);\n    callApi(\"get\", ApiConstants.lookups.getCountry, {})\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          setCountriesList(\n            response.payload?.map((i) => {\n              return { ...i, value: i.id, label: i.name };\n            })\n          );\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const onSelectCountry = (value) => {\n    setSelectedCountry(value);\n    setSelectedEmirate(\"\");\n    setEmiratesList(\n      value.regions?.map((i) => {\n        return { ...i, value: i.id, label: i.name };\n      })\n    );\n  };\n\n  const getUserData = (user_id) => {\n    props.onShowLoader(true);\n    callApi(\"get\", ApiConstants.supplier.getsupplier, { user_id }, true)\n      .then((response) => {\n        if (response && response.status_code === 200) {\n          setUserData(response.payload);\n          let selectedCountry = countriesList.find(\n            (i) => i.id === response.payload?.supplier_user?.country_id\n          );\n          if (selectedCountry) {\n            onSelectCountry(selectedCountry);\n            let selectedRegion = selectedCountry.regions.find(\n              (i) => i.id === response.payload?.supplier_user?.region_id\n            );\n            setSelectedEmirate({\n              ...selectedRegion,\n              value: selectedRegion.id,\n              label: selectedRegion.name,\n            });\n          }\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n        props.onShowLoader(false);\n      })\n      .catch((error) => {\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n        props.onShowLoader(false);\n      });\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"card shadow-none mb-0 rounded\">\n        <div className=\"card-header\">\n          <h5 className=\"text-primary\">\n            {props.isEdit ? \"Update\" : \"Add\"} Supplier\n          </h5>\n        </div>\n        <div className=\"card-body\">\n          <Formik\n            enableReinitialize={true}\n            initialValues={{\n              name: userData?.name ? userData.name : \"\",\n              trn: userData?.supplier_user?.trn\n                ? userData?.supplier_user.trn\n                : \"\",\n              email: userData?.email ? userData.email : \"\",\n              building_name: userData?.supplier_user?.building_name\n                ? userData?.supplier_user.building_name\n                : \"\",\n              place: userData?.supplier_user?.palce\n                ? userData?.supplier_user.palce\n                : \"\",\n              po_box: userData?.supplier_user?.p_o_box\n                ? userData?.supplier_user.p_o_box\n                : \"\",\n              city: userData?.supplier_user?.city\n                ? userData?.supplier_user.city\n                : \"\",\n              country: userData?.supplier_user?.country_id\n                ? userData?.supplier_user.country_id\n                : \"\",\n              region: userData?.supplier_user?.region_id\n                ? userData?.supplier_user.region_id\n                : \"\",\n              whatsappno: userData?.whatsapp_no ? userData.whatsapp_no : \"\",\n            }}\n            validationSchema={UserFormSchema}\n            onSubmit={(values) => onSubmit(values)}>\n            {({ errors, handleChange, setFieldValue, values }) => (\n              <Form>\n                <Row>\n                  <Col xs={12} xl={6}>\n                    <label>Supplier Name</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.name && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Name\"\n                        name=\"name\"\n                      />\n                      <ErrorMessage name=\"name\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>TRN</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.trn && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"TRN\"\n                        name=\"trn\"\n                      />\n                      <ErrorMessage name=\"trn\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Email</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.email && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Email\"\n                        name=\"email\"\n                      />\n                      <ErrorMessage name=\"email\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Building Name</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.building_name && isSubmitted\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                        placeholder=\"Building Name\"\n                        name=\"building_name\"\n                      />\n                      <ErrorMessage name=\"building_name\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Place / Street name</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.place && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Place / Street name\"\n                        name=\"place\"\n                      />\n                      <ErrorMessage name=\"place\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>P O Box</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.po_box && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"P O Box\"\n                        name=\"po_box\"\n                      />\n                      <ErrorMessage name=\"po_box\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>City</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.city && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"City\"\n                        name=\"city\"\n                      />\n                      <ErrorMessage name=\"city\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Country</label>\n                    <div className=\"input-group mb-3\">\n                      <Select\n                        className={`w-100 form-control-select ${\n                          errors.country && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        classNamePrefix=\"select\"\n                        value={countriesList.find(\n                          (i) => i.id === values.country\n                        )}\n                        options={countriesList}\n                        placeholder=\"Select Country\"\n                        isSearchable={false}\n                        onChange={(value) => {\n                          onSelectCountry(value);\n                          let event = {\n                            target: {\n                              name: \"country\",\n                              value: value.id,\n                            },\n                          };\n                          handleChange(event);\n                          setTimeout(() => {\n                            setFieldValue(\"region\", \"\");\n                          }, 100);\n                        }}\n                      />\n                      <ErrorMessage name=\"country\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Emirate</label>\n                    <div className=\"input-group mb-3\">\n                      <Select\n                        className={`w-100 form-control-select ${\n                          errors.region && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        classNamePrefix=\"select\"\n                        options={emiratesList}\n                        placeholder=\"Select Emirate\"\n                        isSearchable\n                        value={selectedEmirate}\n                        onChange={(value) => {\n                          setSelectedEmirate(value);\n                          let event = {\n                            target: {\n                              name: \"region\",\n                              value: value.id,\n                            },\n                          };\n                          handleChange(event);\n                        }}\n                      />\n                      <ErrorMessage name=\"region\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Whatsapp No</label>\n                    <div className=\"input-group mb-3\">\n                      <div className=\"input-group-prepend bg-light\">\n                        <span\n                          className={`input-group-text ${\n                            errors.whatsappno && isSubmitted\n                              ? \"border border-danger\"\n                              : \"\"\n                          }`}\n                          id=\"country-code\"\n                          style={{ fontSize: 14 }}>\n                          {selectedCountry.phone_code}\n                        </span>\n                      </div>\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.whatsappno && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Whatsapp No\"\n                        name=\"whatsappno\"\n                      />\n                      <ErrorMessage name=\"whatsappno\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                </Row>\n\n                <div className=\"mt-3 text-center\">\n                  <button\n                    type=\"submit\"\n                    style={{ width: 180, fontWeight: \"bold\" }}\n                    className=\"btn btn-primary shadow-2 mt-3\"\n                    onClick={() => setIsSubmitted(true)}>\n                    {props.isEdit ? \"Update\" : \"Create Account\"}\n                  </button>\n                </div>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default UserForm;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/clients-no-entry/widget.js",["943","944","945","946"],"import React, {useState} from \"react\";\nimport {Accordion, Card, ListGroup, Row, Col, Modal} from \"react-bootstrap\";\nimport {Grid, GridColumn as Column} from \"@progress/kendo-react-grid\";\nimport moment from \"moment\";\nimport Select from \"react-select\";\n\nimport {callApi} from \"../../../services/apiService\";\nimport {ApiConstants} from \"../../../config/apiConstants\";\nimport Spinner from \"../../../components/Spinner\";\nimport Preview from \"../../../components/Preview\";\nimport {entryTypeList} from \"../../../enums/entryTypeList\";\nimport {entryTypes} from \"../../../enums/entryTypes\";\nimport {showNotification} from \"../../../services/toasterService\";\nimport SalesForm from \"./forms/salesForm\";\nimport ExpenditureForm from \"./forms/expenditureForm\";\nimport PurchaseForm from \"./forms/purchaseForm\";\n\nconst NoEntriesWidget = (props) => {\n\tconst [showLoader, setShowLoader] = useState(false);\n\tconst [entriesList, setEntriesList] = useState([]);\n\tconst [showPreview, setshowPreview] = useState(false);\n\tconst [selectedEntry, setselectedEntry] = useState(null);\n\tconst [selectedEntryType, setselectedEntryType] = useState(\"\");\n\n\tconst [windowWidth, setWindowWidth] = useState(window.innerWidth > 992);\n\n\tconst getData = React.useCallback(() => {\n\t\tsetShowLoader(true);\n\t\tcallApi(\"get\", ApiConstants.entry.checkernoentrylist, {}, true)\n\t\t\t.then((response) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\t// let temp = response.payload;\n\t\t\t\t\t// console.log(response.payload);\n          let unique = response.payload.filter((value, index, self) => index === self.findIndex((t) => t.id == value.id && t.name == value.name));\n\t\t\t\t\tsetEntriesList(unique);\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t}, [props.row_count]);\n\n\tReact.useEffect(() => {\n\t\tgetData();\n\t\tsetWindowWidth(window.innerWidth > 992);\n\t}, [getData]);\n\n\tconst viewEntry = (entry) => {\n\t\tsetselectedEntry(entry);\n\t\tsetselectedEntryType(entry.entry_type);\n\t\tsetshowPreview(true);\n\t};\n\n\tconst closeEntryModal = () => {\n\t\tsetshowPreview(false);\n\t\tsetselectedEntryType(\"\");\n\t};\n\n\tconst onEntrySubmit = () => {\n\t\tcloseEntryModal();\n\t\tgetData();\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t{showLoader && <Spinner />}\n\t\t\t{windowWidth && (\n\t\t\t\t<Row>\n\t\t\t\t\t<Col xl={12}>\n\t\t\t\t\t\t<Grid data={entriesList} style={{height: 270}}>\n\t\t\t\t\t\t\t<Column field=\"id\" title=\"#\" width=\"40px\" cell={(props) => <td>{props.dataIndex + 1}</td>} />\n\t\t\t\t\t\t\t<Column field=\"name\" title=\"Client Name\"  />\n\t\t\t\t\t\t\t<Column field=\"region\" title=\"Emirate\"  />\n\t\t\t\t\t\t\t<Column field=\"trn_number\" title=\"TRN Number\"  />\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t)}\n\n\t\t\t<div>\n\t\t\t\t{!windowWidth && (\n\t\t\t\t\t<Accordion defaultActiveKey=\"0\">\n\t\t\t\t\t\t{entriesList &&\n\t\t\t\t\t\t\tentriesList.length > 0 &&\n\t\t\t\t\t\t\tentriesList.map((row) => (\n\t\t\t\t\t\t\t\t<Card key={row.id}>\n\t\t\t\t\t\t\t\t\t<Accordion.Toggle style={{backgroundColor: \"#7599b1\"}} as={Card.Header} eventKey={row.id}>\n\t\t\t\t\t\t\t\t\t\tClient: {row.name}\n\t\t\t\t\t\t\t\t\t</Accordion.Toggle>\n\t\t\t\t\t\t\t\t\t<Accordion.Collapse eventKey={row.id}>\n\t\t\t\t\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"action-panel\" style={{dispaly: \"flex\", justifyContent: \"flex-end\", marginBottom: 16}}>\n\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn btn-outline-primary\" title=\"View\" onClick={() => viewEntry(row)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\tView <i className=\"feather icon-eye\"></i>\n\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<ListGroup>\n\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>Invoice Date:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span>{row.invoice_date}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>Invoice Number:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span>{row.invoice_number}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>Amount:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span>{row.amount}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t</ListGroup>\n\t\t\t\t\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t\t\t\t</Accordion.Collapse>\n\t\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t</Accordion>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t<Modal size={selectedEntryType === entryTypes.PURCHASE ? \"xl\" : \"lg\"} show={showPreview} backdrop=\"static\" keyboard={true}>\n\t\t\t\t<Modal.Body className=\"p-0\">\n\t\t\t\t\t<button type=\"button\" className=\"btn-icon btn close-btn\" onClick={closeEntryModal}>\n\t\t\t\t\t\t<i className=\"feather icon-x-circle\"></i>\n\t\t\t\t\t</button>\n\t\t\t\t\t<div className=\"px-4 py-5\">\n\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t<Col className={selectedEntryType === entryTypes.PURCHASE ? \"col-lg-4\" : \"col-lg-6\"}>\n\t\t\t\t\t\t\t\t<Preview source={selectedEntry?.file_path} containerStyles={{backgroundColor: \"#f5f5f5\", padding: 10}} zoom={true} />\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t<Col className={selectedEntryType === entryTypes.PURCHASE ? \"col-lg-8\" : \"col-lg-6\"}>\n\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t<Col className={selectedEntryType === entryTypes.PURCHASE ? \"col-lg-6\" : \"col-lg-12\"}>\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"w-100 form-control-select\"\n\t\t\t\t\t\t\t\t\t\t\t\tclassNamePrefix=\"select\"\n\t\t\t\t\t\t\t\t\t\t\t\tisDisabled\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={entryTypeList.find((i) => i.value === selectedEntry?.entry_type)}\n\t\t\t\t\t\t\t\t\t\t\t\toptions={entryTypeList}\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Entry type\"\n\t\t\t\t\t\t\t\t\t\t\t\tisSearchable={false}\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(data) => setselectedEntryType(data.value)}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t<Col lg={12}>\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group\">\n\t\t\t\t\t\t\t\t\t\t\t{selectedEntryType === entryTypes.SALE && <SalesForm entry={selectedEntry} onSuccess={onEntrySubmit} onShowLoader={setShowLoader} />}\n\t\t\t\t\t\t\t\t\t\t\t{selectedEntryType === entryTypes.EXPENDITURE && <ExpenditureForm entry={selectedEntry} onSuccess={onEntrySubmit} onShowLoader={setShowLoader} />}\n\t\t\t\t\t\t\t\t\t\t\t{selectedEntryType === entryTypes.PURCHASE && <PurchaseForm entry={selectedEntry} onSuccess={onEntrySubmit} onShowLoader={setShowLoader} />}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</div>\n\t\t\t\t</Modal.Body>\n\t\t\t</Modal>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default NoEntriesWidget;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/components/CustomFilters/DropdownFilter.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/enums/entryStatus.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/enums/entryTypeList.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/enums/entryTypes.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/dashboard/checker/charts/BarChart.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/dashboard/checker/charts/ClusteredChart.js",["947"],"import React, { useEffect } from \"react\";\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\n\nimport * as moment from \"moment\";\n\nam4core.useTheme(am4themes_animated);\n\nconst ClusteredChart = (props) => {\n  useEffect(() => {\n    let chart = am4core.create(\"vat-payable-chart\", am4charts.XYChart);\n\n    // Add data\n    chart.data = props.data;\n    // chart.padding(40, 40, 40, 40);\n\n    let categoryAxis = chart.yAxes.push(new am4charts.CategoryAxis());\n    categoryAxis.renderer.grid.template.location = 0;\n    categoryAxis.dataFields.category = \"client_name\";\n    categoryAxis.renderer.minGridDistance = 10;\n    categoryAxis.renderer.inversed = true;\n    categoryAxis.renderer.grid.template.disabled = true;\n\n    let valueAxis = chart.xAxes.push(new am4charts.ValueAxis());\n    valueAxis.renderer.grid.template.strokeOpacity = 0;\n    valueAxis.renderer.baseGrid.disabled = true;\n    valueAxis.min = getMinVal(props.data);\n    valueAxis.max = getMaxVal(props.data);\n    valueAxis.strictMinMax = true;\n    valueAxis.renderer.minGridDistance = 50;\n\n    let series = chart.series.push(new am4charts.ColumnSeries());\n    series.dataFields.categoryY = \"client_name\";\n    series.dataFields.valueX = \"vat_amount\";\n    series.tooltipText = \"{valueX.value}\";\n    series.columns.template.strokeOpacity = 0;\n    series.columns.template.column.cornerRadiusBottomLeft = 15;\n    series.columns.template.column.cornerRadiusBottomRight = 15;\n    series.columns.template.column.cornerRadiusTopLeft = 15;\n    series.columns.template.column.cornerRadiusTopRight = 15;\n    series.columns.template.height = 30;\n    series.columns.template.fill = am4core.color(\"#476678\");\n\n    let labelBullet = series.bullets.push(new am4charts.LabelBullet());\n    labelBullet.label.horizontalCenter = \"middle\";\n    labelBullet.label.fill = am4core.color(\"#fff\");\n    labelBullet.label.adapter.add(\"dx\", (dx, target) => {\n      if (target.dataItem.valueX < 0) {\n        return 50;\n      } else {\n        return -50;\n      }\n    });\n    labelBullet.label.adapter.add(\"text\", (text, target) => {\n      return parseFloat(target.dataItem.valueX).toFixed(2) + \" AED\";\n    });\n  });\n\n  const getMaxVal = (data) => {\n    let max =\n      Math.max.apply(\n        Math,\n        data.map((obj) => {\n          return obj.vat_amount;\n        })\n      ) + 50;\n    return max;\n  };\n\n  const getMinVal = (data) => {\n    let min =\n      Math.min.apply(\n        Math,\n        data.map((obj) => {\n          return obj.vat_amount;\n        })\n      ) - 100;\n    return min;\n  };\n\n  return (\n    <div\n      id=\"vat-payable-chart\"\n      style={{\n        width: \"100%\",\n        height:\n          (props.data?.length ? 30 * props.data?.length + 100 : 100) + \"px\",\n      }}\n    />\n  );\n};\n\nexport default ClusteredChart;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/hooks/useWindowSize.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/checker-rejected-entries/forms/expenditureForm.js",["948","949"],"import React, { useState, useEffect } from \"react\";\nimport { Row, Col, Modal } from \"react-bootstrap\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport DatePicker from \"react-datepicker\";\nimport moment from \"moment\";\nimport Select from \"react-select\";\n\nimport { callApi } from \"../../../../services/apiService\";\nimport { ApiConstants } from \"../../../../config/apiConstants\";\nimport { entryStatus } from \"../../../../enums/entryStatus\";\nimport { showNotification } from \"../../../../services/toasterService\";\n\nconst ExpenditureForm = (props) => {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [invoiceDate, setinvoiceDate] = useState(null);\n  const [expenditureData, setexpenditureData] = useState(null);\n  const [groupsList, setGroupsList] = useState([]);\n  const [subGroupsList, setSubGroupsList] = useState([]);\n  const [itemsList, setItemsList] = useState([]);\n  const [selectedSubgroup, setSelectedSubgroup] = useState(\"\");\n  const [selectedGroupItem, setSelectedGroupItem] = useState(\"\");\n  const [showRecheckInvoice, setshowRecheckInvoice] = useState(false);\n\n  const ExpenditureFormSchema = Yup.object().shape({\n    invoice_date: Yup.mixed().required(\"Please select Date\"),\n    amount: Yup.string()\n      .required(\"Please enter Amount\")\n      .matches(/^[0-9].*$/, \"Please enter a valid Amount\"),\n    comments: Yup.string().required(\"Please enter Comment\"),\n    invoice_number: Yup.string().required(\"Please enter Invoice number\"),\n    invoice_group_id: Yup.string().required(\"Please enter Group\"),\n    invoice_sub_group_id: Yup.string().required(\"Please enter Sub Group\"),\n    invoice_item_id: Yup.string().required(\"Please select Item\"),\n  });\n\n  useEffect(() => {\n    invoiceExpGroups();\n  }, []);\n\n  useEffect(() => {\n    if (groupsList.length) {\n      if (props.entry?.entry_status_id === entryStatus.RECHECK) {\n        getData();\n      }\n    }\n  }, [groupsList]);\n\n  const getData = () => {\n    props.onShowLoader(true);\n    let params = { entry_id: props.entry.id };\n    callApi(\"get\", ApiConstants.expenditure.getData, params, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          setexpenditureData(response.payload);\n          setinvoiceDate(new Date(response.payload.invoice_date));\n          let group = groupsList.find(\n            (i) => i.id === response.payload.invoice_group_id\n          );\n          onChangeGroups(group);\n          let subgroup = group.invoice_sub_groups.find(\n            (i) => i.id === response.payload.invoice_sub_group_id\n          );\n          onChangeSubGroups(subgroup);\n\n          let groupitem = subgroup.invoice_items.find(\n            (i) => i.id === response.payload.invoice_item_id\n          );\n          setSelectedGroupItem({\n            ...groupitem,\n            value: groupitem.id,\n            label: groupitem.name,\n          });\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const checkInvoiceNumberExists = (invoice_number) =>\n    new Promise((resolve, reject) => {\n      callApi(\n        \"get\",\n        ApiConstants.entry.checkinvoicenumberexists +\n          \"?invoice_number=\" +\n          invoice_number,\n        null,\n        true\n      )\n        .then((response) => {\n          if (response && response.status_code === 200) {\n            resolve(response.payload.is_invoice_number_exist);\n          } else {\n            props.onShowLoader(false);\n            showNotification(\"Error\", response.message, \"error\");\n          }\n        })\n        .catch((error) => {\n          props.onShowLoader(false);\n          showNotification(\"Error\", \"Something went wrong\", \"error\");\n        });\n    });\n\n  const onSubmit = async (values) => {\n    props.onShowLoader(true);\n    let isInvoiceExists = false;\n    isInvoiceExists = await checkInvoiceNumberExists(values.invoice_number);\n    if (isInvoiceExists) {\n      props.onShowLoader(false);\n      setshowRecheckInvoice(true);\n      setexpenditureData(values);\n    } else {\n      saveFormData(values);\n    }\n  };\n\n  const saveFormData = (values) => {\n    props.onShowLoader(true);\n    let params = {\n      entry_id: props.entry.id,\n      invoice_date: moment(values.invoice_date).format(\"YYYY-MM-DD\"),\n      amount: parseFloat(values.amount),\n      comments: values.comments,\n      invoice_number: values.invoice_number,\n      invoice_group_id: values.invoice_group_id,\n      invoice_sub_group_id: values.invoice_sub_group_id,\n      invoice_item_id: values.invoice_item_id,\n    };\n    callApi(\"post\", ApiConstants.expenditure.create, params, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 201) {\n          props.onSuccess();\n          showNotification(\"Success\", response.message, \"success\");\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const invoiceExpGroups = () => {\n    props.onShowLoader(true);\n    callApi(\"get\", ApiConstants.lookups.invoiceexpgroups, null)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          let data = response.payload.map((i) => {\n            return { ...i, value: i.id, label: i.name };\n          });\n          setGroupsList(data);\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const onChangeGroups = (value) => {\n    let subGroups = value?.invoice_sub_groups?.map((i) => {\n      return { ...i, value: i.id, label: i.name };\n    });\n    setSubGroupsList(subGroups);\n  };\n\n  const onChangeSubGroups = (value) => {\n    let items = value?.invoice_items?.map((i) => {\n      return { ...i, value: i.id, label: i.name };\n    });\n    setItemsList(items);\n    setSelectedSubgroup({ ...value, value: value.id, label: value.name });\n  };\n\n  return (\n    <React.Fragment>\n      <div>\n        <Formik\n          enableReinitialize={true}\n          initialValues={{\n            invoice_date: expenditureData?.invoice_date\n              ? new Date(expenditureData?.invoice_date)\n              : \"\",\n            amount: expenditureData?.amount ? expenditureData?.amount : \"\",\n            comments: expenditureData?.comments\n              ? expenditureData?.comments\n              : \"\",\n            invoice_number: expenditureData?.invoice_number\n              ? expenditureData?.invoice_number\n              : \"\",\n            invoice_group_id: expenditureData?.invoice_group_id\n              ? expenditureData?.invoice_group_id\n              : \"\",\n            invoice_sub_group_id: expenditureData?.invoice_sub_group_id\n              ? expenditureData?.invoice_sub_group_id\n              : \"\",\n            invoice_item_id: expenditureData?.invoice_item_id\n              ? expenditureData?.invoice_item_id\n              : \"\",\n          }}\n          validationSchema={ExpenditureFormSchema}\n          onSubmit={(values) => onSubmit(values)}>\n          {({ errors, handleChange, setFieldValue, values }) => (\n            <Form>\n              <Row>\n                <Col xs={12}>\n                  <div className=\"date-picker-container mb-3\">\n                    <DatePicker\n                      className={`form-control ${\n                        errors.invoice_date && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholderText=\"Date\"\n                      dateFormat=\"dd/MM/yyyy\"\n                      selected={invoiceDate}\n                      minDate={\n                        new Date(\n                          props?.vatPeriod?.current_vat_period?.start_period_date?.date\n                        )\n                      }\n                      maxDate={\n                        new Date(\n                          props?.vatPeriod?.current_vat_period?.end_period_date?.date\n                        )\n                      }\n                      onChange={(value) => {\n                        setinvoiceDate(value);\n                        let event = {\n                          target: {\n                            name: \"invoice_date\",\n                            value: value,\n                          },\n                        };\n                        handleChange(event);\n                      }}\n                    />\n                    <i className=\"feather icon-calendar\"></i>\n                    <ErrorMessage name=\"invoice_date\">\n                      {(msg) => (\n                        <div className=\"invalid-feedback d-block\">{msg}</div>\n                      )}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      className={`form-control ${\n                        errors.amount && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholder=\"Amount\"\n                      name=\"amount\"\n                    />\n                    <ErrorMessage name=\"amount\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      className={`form-control ${\n                        errors.comments && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholder=\"Comments\"\n                      name=\"comments\"\n                    />\n                    <ErrorMessage name=\"comments\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      className={`form-control ${\n                        errors.invoice_number && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholder=\"Invoice Number\"\n                      name=\"invoice_number\"\n                    />\n                    <ErrorMessage name=\"invoice_number\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Select\n                      className={`w-100 form-control-select ${\n                        errors.invoice_group_id && isSubmitted\n                          ? \"is-invalid\"\n                          : \"\"\n                      }`}\n                      classNamePrefix=\"select\"\n                      options={groupsList}\n                      placeholder=\"Group\"\n                      isSearchable={false}\n                      value={groupsList.find(\n                        (i) => i.value === values?.invoice_group_id\n                      )}\n                      onChange={(value) => {\n                        onChangeGroups(value);\n                        let event = {\n                          target: {\n                            name: \"invoice_group_id\",\n                            value: value.id,\n                          },\n                        };\n                        handleChange(event);\n                        setTimeout(() => {\n                          setFieldValue(\"invoice_sub_group_id\", \"\");\n                          setFieldValue(\"invoice_item_id\", \"\");\n                        }, 100);\n                        setSelectedSubgroup(\"\");\n                        setSelectedGroupItem(\"\");\n                      }}\n                    />\n                    <ErrorMessage name=\"invoice_group_id\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Select\n                      className={`w-100 form-control-select ${\n                        errors.invoice_sub_group_id && isSubmitted\n                          ? \"is-invalid\"\n                          : \"\"\n                      }`}\n                      classNamePrefix=\"select\"\n                      options={subGroupsList}\n                      placeholder=\"Sub Group\"\n                      isSearchable={false}\n                      value={selectedSubgroup}\n                      onChange={(value) => {\n                        onChangeSubGroups(value);\n                        let event = {\n                          target: {\n                            name: \"invoice_sub_group_id\",\n                            value: value.id,\n                          },\n                        };\n                        handleChange(event);\n                        setTimeout(() => {\n                          setFieldValue(\"invoice_item_id\", \"\");\n                        }, 100);\n                        setSelectedGroupItem(\"\");\n                      }}\n                    />\n                    <ErrorMessage name=\"invoice_sub_group_id\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Select\n                      className={`w-100 form-control-select ${\n                        errors.invoice_item_id && isSubmitted\n                          ? \"is-invalid\"\n                          : \"\"\n                      }`}\n                      classNamePrefix=\"select\"\n                      options={itemsList}\n                      placeholder=\"Items\"\n                      isSearchable={false}\n                      value={selectedGroupItem}\n                      onChange={(value) => {\n                        let event = {\n                          target: {\n                            name: \"invoice_item_id\",\n                            value: value.id,\n                          },\n                        };\n                        handleChange(event);\n                        setSelectedGroupItem(value);\n                      }}\n                    />\n                    <ErrorMessage name=\"invoice_item_id\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n              </Row>\n\n              <div className=\"text-center\">\n                <button\n                  type=\"submit\"\n                  style={{ width: 180, fontWeight: \"bold\" }}\n                  className=\"btn btn-primary shadow-2 mt-3\"\n                  onClick={() => setIsSubmitted(true)}>\n                  Submit\n                </button>\n              </div>\n            </Form>\n          )}\n        </Formik>\n      </div>\n      <Modal\n        size=\"md\"\n        show={showRecheckInvoice}\n        backdrop=\"static\"\n        keyboard={true}\n        backdropClassName=\"nested-modal\">\n        <Modal.Header>\n          <h5 className=\"card-title\">Warning!</h5>\n        </Modal.Header>\n        <Modal.Body>\n          <div>\n            The Invoice ID is already used. Do you want to proceed with this?\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <div>\n            <button\n              className=\"btn btn-outline-warning\"\n              onClick={() => setshowRecheckInvoice(false)}>\n              No\n            </button>\n            <button\n              className=\"btn btn-warning\"\n              onClick={() => {\n                setshowRecheckInvoice(false);\n                saveFormData(expenditureData);\n              }}>\n              Yes\n            </button>\n          </div>\n        </Modal.Footer>\n      </Modal>\n    </React.Fragment>\n  );\n};\n\nexport default ExpenditureForm;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/checker-rejected-entries/forms/salesForm.js",["950"],"import React, { useState, useEffect } from \"react\";\nimport { Row, Col, Modal } from \"react-bootstrap\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport moment from \"moment\";\nimport DatePicker from \"react-datepicker\";\n\nimport { callApi } from \"../../../../services/apiService\";\nimport { ApiConstants } from \"../../../../config/apiConstants\";\nimport { entryStatus } from \"../../../../enums/entryStatus\";\nimport { showNotification } from \"../../../../services/toasterService\";\n\nconst SalesForm = (props) => {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [invoiceDate, setinvoiceDate] = useState(null);\n  const [salesData, setsalesData] = useState(null);\n  const [showRecheckInvoice, setshowRecheckInvoice] = useState(false);\n\n  const SalesFormSchema = Yup.object().shape({\n    invoice_date: Yup.mixed().required(\"Please select Date\"),\n    amount: Yup.string()\n      .required(\"Please enter Amount\")\n      .matches(/^[0-9].*$/, \"Please enter a valid Amount\"),\n    comments: Yup.string().required(\"Please enter Comments\"),\n    invoice_number: Yup.string().required(\"Please enter Invoice number\"),\n    amount_exclude_vat: Yup.string(),\n    vat_amount: Yup.string(),\n  });\n\n  useEffect(() => {\n    if (props.entry?.entry_status_id === entryStatus.RECHECK) {\n      getData();\n    }\n  }, []);\n\n  const getData = () => {\n    props.onShowLoader(true);\n    let params = { entry_id: props.entry.id };\n    callApi(\"get\", ApiConstants.sales.getData, params, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          setsalesData(response.payload);\n          setinvoiceDate(new Date(response.payload.invoice_date));\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const checkInvoiceNumberExists = (invoice_number) =>\n    new Promise((resolve, reject) => {\n      callApi(\n        \"get\",\n        ApiConstants.entry.checkinvoicenumberexists +\n          \"?invoice_number=\" +\n          invoice_number,\n        null,\n        true\n      )\n        .then((response) => {\n          if (response && response.status_code === 200) {\n            resolve(response.payload.is_invoice_number_exist);\n          } else {\n            props.onShowLoader(false);\n            showNotification(\"Error\", response.message, \"error\");\n          }\n        })\n        .catch((error) => {\n          props.onShowLoader(false);\n          showNotification(\"Error\", \"Something went wrong\", \"error\");\n        });\n    });\n\n  const onSubmit = async (values) => {\n    props.onShowLoader(true);\n    let isInvoiceExists = false;\n    isInvoiceExists = await checkInvoiceNumberExists(values.invoice_number);\n    if (isInvoiceExists) {\n      props.onShowLoader(false);\n      setshowRecheckInvoice(true);\n      setsalesData(values);\n    } else {\n      saveFormData(values);\n    }\n  };\n\n  const saveFormData = (values) => {\n    props.onShowLoader(true);\n    let params = {\n      entry_id: props.entry.id,\n      invoice_date: moment(values.invoice_date).format(\"YYYY-MM-DD\"),\n      amount: parseFloat(values.amount),\n      amount_exclude_vat: parseFloat(values.amount_exclude_vat),\n      vat_amount: parseFloat(values.vat_amount),\n      comments: values.comments,\n      invoice_number: values.invoice_number,\n    };\n    callApi(\"post\", ApiConstants.sales.create, params, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 201) {\n          props.onSuccess();\n          showNotification(\"Success\", response.message, \"success\");\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const calculateAmtExclVat = (amount) => {\n    if (isNaN(amount)) return 0;\n    else\n      return ((amount * 100) / (100 + props.entry.vat_percentage)).toFixed(2);\n  };\n\n  const calculateVatAmt = (amount, amt_excl_vat) => {\n    if (isNaN(amount)) return 0;\n    else return (amount - amt_excl_vat).toFixed(2);\n  };\n\n  return (\n    <React.Fragment>\n      <div>\n        <Formik\n          enableReinitialize={true}\n          initialValues={{\n            invoice_date: salesData?.invoice_date\n              ? new Date(salesData?.invoice_date)\n              : \"\",\n            amount: salesData?.amount ? salesData?.amount : \"\",\n            comments: salesData?.comments ? salesData?.comments : \"\",\n            invoice_number: salesData?.invoice_number\n              ? salesData?.invoice_number\n              : \"\",\n            amount_exclude_vat: salesData?.amount_exclude_vat\n              ? salesData?.amount_exclude_vat\n              : \"\",\n            vat_amount: salesData?.vat_amount ? salesData?.vat_amount : \"\",\n          }}\n          validationSchema={SalesFormSchema}\n          onSubmit={(values) => onSubmit(values)}>\n          {({ errors, handleChange, setFieldValue }) => (\n            <Form>\n              <Row>\n                <Col xs={12}>\n                  <div className=\"date-picker-container mb-3\">\n                    <DatePicker\n                      className={`form-control ${\n                        errors.invoice_date && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholderText=\"Date\"\n                      dateFormat=\"dd/MM/yyyy\"\n                      selected={invoiceDate}\n                      minDate={\n                        new Date(\n                          props?.vatPeriod?.current_vat_period?.start_period_date?.date\n                        )\n                      }\n                      maxDate={\n                        new Date(\n                          props?.vatPeriod?.current_vat_period?.end_period_date?.date\n                        )\n                      }\n                      onChange={(value) => {\n                        setinvoiceDate(value);\n                        let event = {\n                          target: {\n                            name: \"invoice_date\",\n                            value: value,\n                          },\n                        };\n                        handleChange(event);\n                      }}\n                    />\n                    <i className=\"feather icon-calendar\"></i>\n                    <ErrorMessage name=\"invoice_date\">\n                      {(msg) => (\n                        <div className=\"invalid-feedback d-block\">{msg}</div>\n                      )}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      className={`form-control ${\n                        errors.amount && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholder=\"Amount\"\n                      name=\"amount\"\n                      onChange={(e) => {\n                        let value = e.target.value;\n                        let amt_excl_vat = calculateAmtExclVat(value);\n                        let vat_amt = calculateVatAmt(value, amt_excl_vat);\n                        setFieldValue(\"amount_exclude_vat\", amt_excl_vat);\n                        setFieldValue(\"vat_amount\", vat_amt);\n                        let event = {\n                          target: {\n                            name: \"amount\",\n                            value: value,\n                          },\n                        };\n                        handleChange(event);\n                      }}\n                    />\n                    <ErrorMessage name=\"amount\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      className={`form-control ${\n                        errors.comments && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholder=\"Comments\"\n                      name=\"comments\"\n                    />\n                    <ErrorMessage name=\"comments\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      className={`form-control ${\n                        errors.invoice_number && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholder=\"Invoice Number\"\n                      name=\"invoice_number\"\n                    />\n                    <ErrorMessage name=\"invoice_number\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      className={`form-control ${\n                        errors.amount_exclude_vat && isSubmitted\n                          ? \"is-invalid\"\n                          : \"\"\n                      }`}\n                      disabled\n                      placeholder=\"Amount Exclude Vat\"\n                      name=\"amount_exclude_vat\"\n                    />\n                    <ErrorMessage name=\"amount_exclude_vat\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      className={`form-control ${\n                        errors.vat_amount && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      disabled\n                      placeholder=\"Vat Amount\"\n                      name=\"vat_amount\"\n                    />\n                    <ErrorMessage name=\"vat_amount\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n              </Row>\n\n              <div className=\"mt-3 text-center\">\n                <button\n                  type=\"submit\"\n                  style={{ width: 180, fontWeight: \"bold\" }}\n                  className=\"btn btn-primary shadow-2 mt-3\"\n                  onClick={() => setIsSubmitted(true)}>\n                  Submit\n                </button>\n              </div>\n            </Form>\n          )}\n        </Formik>\n      </div>\n      <Modal\n        size=\"md\"\n        show={showRecheckInvoice}\n        backdrop=\"static\"\n        keyboard={true}\n        backdropClassName=\"nested-modal\">\n        <Modal.Header>\n          <h5 className=\"card-title\">Warning!</h5>\n        </Modal.Header>\n        <Modal.Body>\n          <div>\n            The Invoice ID is already used. Do you want to proceed with this?\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <div>\n            <button\n              className=\"btn btn-outline-warning\"\n              onClick={() => setshowRecheckInvoice(false)}>\n              No\n            </button>\n            <button\n              className=\"btn btn-warning\"\n              onClick={() => {\n                setshowRecheckInvoice(false);\n                saveFormData(salesData);\n              }}>\n              Yes\n            </button>\n          </div>\n        </Modal.Footer>\n      </Modal>\n    </React.Fragment>\n  );\n};\n\nexport default SalesForm;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/checker-rejected-entries/forms/purchaseForm.js",["951","952","953","954"],"import React, { useState, useEffect } from \"react\";\nimport { Row, Col, Table, Modal } from \"react-bootstrap\";\nimport {\n  Formik,\n  useFormikContext,\n  Field,\n  Form,\n  ErrorMessage,\n  FieldArray,\n} from \"formik\";\nimport * as Yup from \"yup\";\nimport DatePicker from \"react-datepicker\";\nimport moment from \"moment\";\nimport Select from \"react-select\";\n\nimport { callApi } from \"../../../../services/apiService\";\nimport { ApiConstants } from \"../../../../config/apiConstants\";\nimport { entryStatus } from \"../../../../enums/entryStatus\";\nimport { showNotification } from \"../../../../services/toasterService\";\n\nconst PurchaseForm = (props) => {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [invoiceDate, setinvoiceDate] = useState(null);\n  const [purchaseData, setPurchaseData] = useState(null);\n  const [groupsList, setGroupsList] = useState([]);\n  const [suppliersList, setSuppliersList] = useState([]);\n  const [showRecheckInvoice, setshowRecheckInvoice] = useState(false);\n\n  const PurchaseFormSchema = Yup.object().shape({\n    supplier_id: Yup.mixed().required(\"Please select Supplier\"),\n    trn: Yup.string(),\n    invoice_number: Yup.string().required(\"Please enter Invoice number\"),\n    invoice_date: Yup.mixed().required(\"Please select Date\"),\n    invoice_details: Yup.array().of(\n      Yup.object().shape({\n        invoice_group_id: Yup.string().required(\"Please select Group\"),\n        invoice_sub_group_id: Yup.string().required(\"Please select Sub Group\"),\n        invoice_item_id: Yup.string().required(\"Please select Item\"),\n        unit_price: Yup.string().required(\"Please enter Unit Price\"),\n        quantity: Yup.string().required(\"Please enter Quantity\"),\n        amount: Yup.string().required(\"Please enter Amount\"),\n      })\n    ),\n    subtotal: Yup.string(),\n    discount: Yup.string(),\n    vatamount: Yup.string(),\n    totalamount: Yup.string(),\n  });\n\n  useEffect(() => {\n    getSuppliers();\n    invoicePurchaseGroups();\n  }, []);\n\n  useEffect(() => {\n    if (groupsList.length) {\n      if (props.entry?.entry_status_id === entryStatus.RECHECK) {\n        getData();\n      }\n    }\n  }, [groupsList]);\n\n  const getData = () => {\n    props.onShowLoader(true);\n    let params = { entry_id: props.entry.id };\n    callApi(\"get\", ApiConstants.purchase.getData, params, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          setPurchaseData(response.payload);\n          setinvoiceDate(new Date(response.payload?.header?.invoice_date));\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const checkInvoiceNumberExists = (invoice_number) =>\n    new Promise((resolve, reject) => {\n      callApi(\n        \"get\",\n        ApiConstants.entry.checkinvoicenumberexists +\n          \"?invoice_number=\" +\n          invoice_number,\n        null,\n        true\n      )\n        .then((response) => {\n          if (response && response.status_code === 200) {\n            resolve(response.payload.is_invoice_number_exist);\n          } else {\n            props.onShowLoader(false);\n            showNotification(\"Error\", response.message, \"error\");\n          }\n        })\n        .catch((error) => {\n          props.onShowLoader(false);\n          showNotification(\"Error\", \"Something went wrong\", \"error\");\n        });\n    });\n\n  const onSubmit = async (values) => {\n    props.onShowLoader(true);\n    let isInvoiceExists = false;\n    isInvoiceExists = await checkInvoiceNumberExists(values.invoice_number);\n    if (isInvoiceExists) {\n      props.onShowLoader(false);\n      setshowRecheckInvoice(true);\n      setPurchaseData(values);\n    } else {\n      saveFormData(values);\n    }\n  };\n\n  const saveFormData = (values) => {\n    props.onShowLoader(true);\n    let params = {\n      entry_id: props.entry.id,\n      invoice_date: moment(values.invoice_date).format(\"YYYY-MM-DD\"),\n      invoice_number: values.invoice_number,\n      supplier_id: values.supplier_id,\n      sub_total: values.subtotal,\n      discount: values.discount ? parseInt(values.discount) : 0,\n      vat_amount: values.vatamount,\n      total_amount: values.totalamount,\n      purchase_details: values.invoice_details.map((i) => {\n        return {\n          invoice_group_id: i.invoice_group_id,\n          invoice_sub_group_id: i.invoice_sub_group_id,\n          invoice_item_id: i.invoice_item_id,\n          price: parseInt(i.unit_price),\n          qty: parseInt(i.quantity),\n          amount: i.amount,\n        };\n      }),\n    };\n    callApi(\"post\", ApiConstants.purchase.create, params, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 201) {\n          props.onSuccess();\n          showNotification(\"Success\", response.message, \"success\");\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const invoicePurchaseGroups = () => {\n    props.onShowLoader(true);\n    callApi(\"get\", ApiConstants.lookups.invoicepurchasegroups, null, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          let data = response.payload.map((i) => {\n            return { ...i, value: i.id, label: i.name };\n          });\n          setGroupsList(data);\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const getSuppliers = () => {\n    props.onShowLoader(true);\n    callApi(\"get\", ApiConstants.lookups.getSuppliers, null)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          let suppliers = response.payload.map((i) => {\n            return { ...i, value: i.id, label: i.name };\n          });\n          setSuppliersList(suppliers);\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const getSubGroups = (groupId) => {\n    let selectedGroup = groupsList.find((i) => i.id === groupId);\n    let subGroups = selectedGroup\n      ? selectedGroup.invoice_sub_groups.map((i) => {\n          return { ...i, value: i.id, label: i.name };\n        })\n      : [];\n    return subGroups;\n  };\n\n  const getSelectedSubGroup = (groupId, selectedId) => {\n    let selectedGroup = groupsList.find((i) => i.id === groupId);\n    let subGroups = selectedGroup\n      ? selectedGroup.invoice_sub_groups.map((i) => {\n          return { ...i, value: i.id, label: i.name };\n        })\n      : [];\n\n    let selectedSubGroup = null;\n    if (subGroups && selectedId) {\n      selectedSubGroup = subGroups.find((i) => i.id === selectedId);\n    }\n    return selectedSubGroup;\n  };\n\n  const getSubItems = (groupId, subgroupId) => {\n    let selectedGroup = groupsList.find((i) => i.id === groupId);\n    let subGroups = selectedGroup ? selectedGroup.invoice_sub_groups : [];\n    let selectedSubGroup = subGroups.find((i) => i.id === subgroupId);\n    let subItems = selectedSubGroup\n      ? selectedSubGroup.invoice_items.map((i) => {\n          return { ...i, value: i.id, label: i.name };\n        })\n      : [];\n    return subItems;\n  };\n\n  const getSelectedSubItem = (groupId, subgroupId, selectedId) => {\n    let selectedGroup = groupsList.find((i) => i.id === groupId);\n    let subGroups = selectedGroup ? selectedGroup.invoice_sub_groups : [];\n    let selectedSubGroup = subGroups.find((i) => i.id === subgroupId);\n    let subItems = selectedSubGroup\n      ? selectedSubGroup.invoice_items.map((i) => {\n          return { ...i, value: i.id, label: i.name };\n        })\n      : [];\n\n    let selectedSubItem = null;\n    if (subItems && selectedId) {\n      selectedSubItem = subItems.find((i) => i.id === selectedId);\n    }\n    return selectedSubItem;\n  };\n\n  const calculateTotal = (\n    values,\n    setFieldValue,\n    index,\n    fieldValue,\n    fieldType\n  ) => {\n    let amount = 0;\n    if (fieldType === \"unit_price\")\n      amount = values.invoice_details[index].quantity * fieldValue;\n    if (fieldType === \"quantity\")\n      amount = values.invoice_details[index].unit_price * fieldValue;\n\n    setFieldValue(`invoice_details.${index}.amount`, amount);\n    values.invoice_details[index].amount = amount;\n\n    let subtotal = values.invoice_details.reduce((sum, item) => {\n      return sum + item.amount;\n    }, 0);\n    setFieldValue(\"subtotal\", subtotal);\n    values.subtotal = subtotal;\n\n    let discountAmt = values.discount ? values.discount : 0;\n    let vatamount =\n      ((values.subtotal - discountAmt) * props.entry.vat_percentage) / 100;\n    setFieldValue(\"vatamount\", vatamount);\n\n    let totalamount = values.subtotal - discountAmt + vatamount;\n    setFieldValue(\"totalamount\", totalamount);\n  };\n\n  const refreshTotal = (values, setFieldValue) => {\n    let subtotal = values.invoice_details.reduce((sum, item) => {\n      return sum + item.amount;\n    }, 0);\n    values.subtotal = subtotal;\n\n    let discountAmt = values.discount ? values.discount : 0;\n    let vatamount =\n      ((values.subtotal - discountAmt) * props.entry.vat_percentage) / 100;\n\n    let totalamount = values.subtotal - discountAmt + vatamount;\n    setTimeout(() => {\n      setFieldValue(\"subtotal\", subtotal);\n      setFieldValue(\"vatamount\", vatamount);\n      setFieldValue(\"totalamount\", totalamount);\n    }, 100);\n  };\n\n  const handleKeypress = (e) => {\n    const characterCode = e.key;\n    const actionKeys = [\"Backspace\", \"Tab\", \"ArrowLeft\", \"ArrowRight\", \".\"];\n    if (actionKeys.includes(characterCode)) return;\n\n    const characterNumber = Number(characterCode);\n    if (characterNumber >= 0 && characterNumber <= 9) {\n      if (e.currentTarget.value && e.currentTarget.value.length) {\n        return;\n      } else if (characterNumber === 0) {\n        e.preventDefault();\n      }\n    } else {\n      e.preventDefault();\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <div>\n        <Formik\n          enableReinitialize={true}\n          initialValues={{\n            supplier_id: purchaseData?.header?.supplier_id\n              ? purchaseData.header.supplier_id\n              : \"\",\n            trn: purchaseData?.header?.supplier_trn\n              ? purchaseData.header.supplier_trn\n              : \"\",\n            invoice_number: purchaseData?.header?.invoice_number\n              ? purchaseData.header.invoice_number\n              : \"\",\n            invoice_date: purchaseData?.header?.invoice_date\n              ? new Date(purchaseData?.header?.invoice_date)\n              : \"\",\n            invoice_details: purchaseData?.details\n              ? purchaseData.details.map((i) => {\n                  return {\n                    invoice_group_id: i.invoice_group_id,\n                    invoice_sub_group_id: i.invoice_sub_group_id,\n                    invoice_item_id: i.invoice_item_id,\n                    unit_price: i.price,\n                    quantity: i.qty,\n                    amount: i.amount,\n                  };\n                })\n              : [\n                  {\n                    invoice_group_id: \"\",\n                    invoice_sub_group_id: \"\",\n                    invoice_item_id: \"\",\n                    unit_price: \"\",\n                    quantity: \"\",\n                    amount: \"\",\n                  },\n                ],\n            subtotal: purchaseData?.header?.sub_total\n              ? purchaseData.header.sub_total\n              : \"\",\n            discount: purchaseData?.header?.discount\n              ? purchaseData.header.discount\n              : \"0\",\n            vatamount: purchaseData?.header?.vat_amount\n              ? purchaseData.header.vat_amount\n              : \"\",\n            totalamount: purchaseData?.header?.total_amount\n              ? purchaseData.header.total_amount\n              : \"\",\n          }}\n          validationSchema={PurchaseFormSchema}\n          onSubmit={(values) => onSubmit(values)}>\n          {({ errors, handleChange, setFieldValue, values, validateForm }) => (\n            <Form>\n              <Row>\n                <Col lg={6} xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Select\n                      className={`w-100 form-control-select ${\n                        errors.supplier_id && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      classNamePrefix=\"select\"\n                      options={suppliersList}\n                      value={suppliersList.find(\n                        (i) => i.value === values?.supplier_id\n                      )}\n                      placeholder=\"Supplier\"\n                      isSearchable={false}\n                      onChange={(value) => {\n                        let event = {\n                          target: {\n                            name: \"supplier_id\",\n                            value: value.id,\n                          },\n                        };\n                        handleChange(event);\n                        setTimeout(() => {\n                          setFieldValue(\"trn\", value.trn);\n                        }, 100);\n                      }}\n                    />\n                    <ErrorMessage name=\"supplier_id\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n                <Col lg={6} xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      disabled\n                      className={`form-control ${\n                        errors.trn && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholder=\"TRN\"\n                      name=\"trn\"\n                    />\n                    <ErrorMessage name=\"trn\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n                <Col lg={6} xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      className={`form-control ${\n                        errors.invoice_number && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholder=\"Invoice Number\"\n                      name=\"invoice_number\"\n                    />\n                    <ErrorMessage name=\"invoice_number\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n                <Col lg={6} xs={12}>\n                  <div className=\"date-picker-container mb-3\">\n                    <DatePicker\n                      className={`form-control ${\n                        errors.invoice_date && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholderText=\"Date\"\n                      dateFormat=\"dd/MM/yyyy\"\n                      selected={invoiceDate}\n                      minDate={\n                        new Date(\n                          props?.vatPeriod?.current_vat_period?.start_period_date?.date\n                        )\n                      }\n                      maxDate={\n                        new Date(\n                          props?.vatPeriod?.current_vat_period?.end_period_date?.date\n                        )\n                      }\n                      onChange={(value) => {\n                        setinvoiceDate(value);\n                        let event = {\n                          target: {\n                            name: \"invoice_date\",\n                            value: value,\n                          },\n                        };\n                        handleChange(event);\n                      }}\n                    />\n                    <i className=\"feather icon-calendar\"></i>\n                    <ErrorMessage name=\"invoice_date\">\n                      {(msg) => (\n                        <div className=\"invalid-feedback d-block\">{msg}</div>\n                      )}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col lg={12} xs={12} className=\"overflow-auto\">\n                  <Table className=\"purchase-grid\">\n                    <thead>\n                      <tr>\n                        <th>#</th>\n                        <th width=\"120\">Group</th>\n                        <th width=\"120\">Sub Group</th>\n                        <th width=\"120\">Item Name</th>\n                        <th>Unit Price</th>\n                        <th>Quantity</th>\n                        <th>Amount</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <FieldArray\n                        name=\"invoice_details\"\n                        render={(arrayHelpers) => (\n                          <React.Fragment>\n                            {values.invoice_details.map((item, index) => (\n                              <tr key={index}>\n                                <td scope=\"row\">{index + 1}</td>\n                                <td>\n                                  <Select\n                                    className={`w-100 form-control-select ${\n                                      errors.invoice_details &&\n                                      errors.invoice_details[index] &&\n                                      errors.invoice_details[index]\n                                        .invoice_group_id &&\n                                      isSubmitted\n                                        ? \"is-invalid\"\n                                        : \"\"\n                                    }`}\n                                    classNamePrefix=\"select\"\n                                    options={groupsList}\n                                    value={groupsList.find(\n                                      (i) =>\n                                        i.value ===\n                                        values?.invoice_details[index]\n                                          .invoice_group_id\n                                    )}\n                                    placeholder=\"Select\"\n                                    isSearchable={false}\n                                    onChange={(value) => {\n                                      let event = {\n                                        target: {\n                                          name: `invoice_details.${index}.invoice_group_id`,\n                                          value: value.id,\n                                        },\n                                      };\n                                      handleChange(event);\n                                      setTimeout(() => {\n                                        setFieldValue(\n                                          `invoice_details.${index}.invoice_sub_group_id`,\n                                          \"\"\n                                        );\n                                        setFieldValue(\n                                          `invoice_details.${index}.invoice_item_id`,\n                                          \"\"\n                                        );\n                                      }, 100);\n                                    }}\n                                  />\n                                </td>\n                                <td>\n                                  <Select\n                                    className={`w-100 form-control-select ${\n                                      errors.invoice_details &&\n                                      errors.invoice_details[index] &&\n                                      errors.invoice_details[index]\n                                        .invoice_sub_group_id &&\n                                      isSubmitted\n                                        ? \"is-invalid\"\n                                        : \"\"\n                                    }`}\n                                    classNamePrefix=\"select\"\n                                    options={getSubGroups(\n                                      values.invoice_details[index]\n                                        .invoice_group_id\n                                    )}\n                                    value={getSelectedSubGroup(\n                                      values.invoice_details[index]\n                                        .invoice_group_id,\n                                      values.invoice_details[index]\n                                        .invoice_sub_group_id\n                                    )}\n                                    placeholder=\"Select\"\n                                    isSearchable={false}\n                                    onChange={(value) => {\n                                      let event = {\n                                        target: {\n                                          name: `invoice_details.${index}.invoice_sub_group_id`,\n                                          value: value.id,\n                                        },\n                                      };\n                                      handleChange(event);\n                                      setTimeout(() => {\n                                        setFieldValue(\n                                          `invoice_details.${index}.invoice_item_id`,\n                                          \"\"\n                                        );\n                                      }, 100);\n                                    }}\n                                  />\n                                </td>\n                                <td>\n                                  <Select\n                                    className={`w-100 form-control-select ${\n                                      errors.invoice_details &&\n                                      errors.invoice_details[index] &&\n                                      errors.invoice_details[index]\n                                        .invoice_item_id &&\n                                      isSubmitted\n                                        ? \"is-invalid\"\n                                        : \"\"\n                                    }`}\n                                    classNamePrefix=\"select\"\n                                    options={getSubItems(\n                                      values.invoice_details[index]\n                                        .invoice_group_id,\n                                      values.invoice_details[index]\n                                        .invoice_sub_group_id\n                                    )}\n                                    value={getSelectedSubItem(\n                                      values.invoice_details[index]\n                                        .invoice_group_id,\n                                      values.invoice_details[index]\n                                        .invoice_sub_group_id,\n                                      values.invoice_details[index]\n                                        .invoice_item_id\n                                    )}\n                                    placeholder=\"Select\"\n                                    isSearchable={false}\n                                    onChange={(value) => {\n                                      let event = {\n                                        target: {\n                                          name: `invoice_details.${index}.invoice_item_id`,\n                                          value: value.id,\n                                        },\n                                      };\n                                      handleChange(event);\n                                    }}\n                                  />\n                                </td>\n                                <td>\n                                  <Field\n                                    type=\"number\"\n                                    onKeyDown={handleKeypress}\n                                    min=\"1\"\n                                    step=\"1\"\n                                    className={`grid-input ${\n                                      errors.invoice_details &&\n                                      errors.invoice_details[index] &&\n                                      errors.invoice_details[index]\n                                        .unit_price &&\n                                      isSubmitted\n                                        ? \"is-invalid\"\n                                        : \"\"\n                                    }`}\n                                    name={`invoice_details.${index}.unit_price`}\n                                    value={\n                                      values.invoice_details[index].unit_price\n                                    }\n                                    onChange={(e) => {\n                                      handleChange(e);\n                                      setTimeout(() => {\n                                        calculateTotal(\n                                          values,\n                                          setFieldValue,\n                                          index,\n                                          e.target.value,\n                                          \"unit_price\"\n                                        );\n                                      }, 100);\n                                    }}\n                                  />\n                                </td>\n                                <td>\n                                  <Field\n                                    type=\"number\"\n                                    onKeyDown={handleKeypress}\n                                    min=\"1\"\n                                    step=\"1\"\n                                    className={`grid-input ${\n                                      errors.invoice_details &&\n                                      errors.invoice_details[index] &&\n                                      errors.invoice_details[index].quantity &&\n                                      isSubmitted\n                                        ? \"is-invalid\"\n                                        : \"\"\n                                    }`}\n                                    name={`invoice_details.${index}.quantity`}\n                                    value={\n                                      values.invoice_details[index].quantity\n                                    }\n                                    onChange={(e) => {\n                                      handleChange(e);\n\n                                      setTimeout(() => {\n                                        calculateTotal(\n                                          values,\n                                          setFieldValue,\n                                          index,\n                                          e.target.value,\n                                          \"quantity\"\n                                        );\n                                      }, 100);\n                                    }}\n                                  />\n                                </td>\n                                <td>\n                                  <Field\n                                    type=\"text\"\n                                    className={`grid-input ${\n                                      errors.invoice_details &&\n                                      errors.invoice_details[index] &&\n                                      errors.invoice_details[index].amount &&\n                                      isSubmitted\n                                        ? \"is-invalid\"\n                                        : \"\"\n                                    }`}\n                                    disabled\n                                    name={`invoice_details.${index}.amount`}\n                                  />\n                                  {values.invoice_details.length !== 1 && (\n                                    <span\n                                      className=\"insert-row-btn text-primary mr-2\"\n                                      onClick={() => {\n                                        arrayHelpers.remove(index);\n                                        let updatedValues = JSON.parse(\n                                          JSON.stringify(values)\n                                        );\n                                        updatedValues.invoice_details.splice(\n                                          index,\n                                          1\n                                        );\n                                        refreshTotal(\n                                          updatedValues,\n                                          setFieldValue\n                                        );\n                                      }}>\n                                      <i className=\"feather icon-minus-circle\" />\n                                    </span>\n                                  )}\n                                  {index + 1 ===\n                                    values.invoice_details.length && (\n                                    <span\n                                      className=\"insert-row-btn text-primary\"\n                                      onClick={() => {\n                                        arrayHelpers.push({\n                                          invoice_group_id: \"\",\n                                          invoice_sub_group_id: \"\",\n                                          invoice_item_id: \"\",\n                                          unit_price: \"\",\n                                          quantity: \"\",\n                                          amount: \"\",\n                                        });\n                                      }}>\n                                      <i className=\"feather icon-plus-circle\" />\n                                    </span>\n                                  )}\n                                </td>\n                              </tr>\n                            ))}\n                          </React.Fragment>\n                        )}\n                      />\n                      <tr>\n                        <td colSpan=\"6\">\n                          <div className=\"text-right\">\n                            <label className=\"mr-3\">Sub Total</label>\n                          </div>\n                        </td>\n                        <td>\n                          <Field\n                            type=\"text\"\n                            className=\"grid-input\"\n                            disabled\n                            name=\"subtotal\"\n                          />\n                        </td>\n                      </tr>\n                      <tr>\n                        <td colSpan=\"6\">\n                          <div className=\"text-right\">\n                            <label className=\"mr-3\">Discount Rounded</label>\n                          </div>\n                        </td>\n                        <td>\n                          <Field\n                            type=\"number\"\n                            onKeyDown={handleKeypress}\n                            min=\"0\"\n                            step=\"1\"\n                            className=\"grid-input\"\n                            name=\"discount\"\n                            value={values.discount}\n                            onChange={(e) => {\n                              handleChange(e);\n                              let discountAmt = e.target.value\n                                ? e.target.value\n                                : 0;\n                              let vatamount =\n                                ((values.subtotal - discountAmt) *\n                                  props.entry.vat_percentage) /\n                                100;\n                              setFieldValue(\"vatamount\", vatamount);\n\n                              let totalamount =\n                                values.subtotal - discountAmt + vatamount;\n                              setFieldValue(\"totalamount\", totalamount);\n                            }}\n                          />\n                        </td>\n                      </tr>\n                      <tr>\n                        <td colSpan=\"6\">\n                          <div className=\"text-right\">\n                            <label className=\"mr-3\">VAT Amount</label>\n                          </div>\n                        </td>\n                        <td>\n                          <Field\n                            type=\"text\"\n                            disabled\n                            className=\"grid-input\"\n                            name=\"vatamount\"\n                          />\n                        </td>\n                      </tr>\n                      <tr>\n                        <td colSpan=\"6\">\n                          <div className=\"text-right\">\n                            <label className=\"mr-3\">Total</label>\n                          </div>\n                        </td>\n                        <td>\n                          <Field\n                            type=\"text\"\n                            disabled\n                            className=\"grid-input\"\n                            name=\"totalamount\"\n                          />\n                        </td>\n                      </tr>\n                    </tbody>\n                  </Table>\n                </Col>\n              </Row>\n\n              <div className=\"text-center\">\n                <button\n                  type=\"submit\"\n                  style={{ width: 180, fontWeight: \"bold\" }}\n                  className=\"btn btn-primary shadow-2 mt-3\"\n                  onClick={() => setIsSubmitted(true)}>\n                  Submit\n                </button>\n              </div>\n            </Form>\n          )}\n        </Formik>\n      </div>\n      <Modal\n        size=\"md\"\n        show={showRecheckInvoice}\n        backdrop=\"static\"\n        keyboard={true}\n        backdropClassName=\"nested-modal\">\n        <Modal.Header>\n          <h5 className=\"card-title\">Warning!</h5>\n        </Modal.Header>\n        <Modal.Body>\n          <div>\n            The Invoice ID is already used. Do you want to proceed with this?\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <div>\n            <button\n              className=\"btn btn-outline-warning\"\n              onClick={() => setshowRecheckInvoice(false)}>\n              No\n            </button>\n            <button\n              className=\"btn btn-warning\"\n              onClick={() => {\n                setshowRecheckInvoice(false);\n                saveFormData(purchaseData);\n              }}>\n              Yes\n            </button>\n          </div>\n        </Modal.Footer>\n      </Modal>\n    </React.Fragment>\n  );\n};\n\nexport default PurchaseForm;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/enums/paymentTypes.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/components/Report/index.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/pending-entries/forms/purchaseForm.js",["955","956","957"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport { Row, Col, Table, Modal } from \"react-bootstrap\";\r\nimport { Formik, Field, Form, ErrorMessage, FieldArray } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport moment from \"moment\";\r\nimport Select from \"react-select\";\r\n\r\nimport { callApi } from \"../../../../services/apiService\";\r\nimport { ApiConstants } from \"../../../../config/apiConstants\";\r\nimport { entryStatus } from \"../../../../enums/entryStatus\";\r\nimport { showNotification } from \"../../../../services/toasterService\";\r\nimport UserForm from \"./form\";\r\n\r\nconst PurchaseForm = (props) => {\r\n\tconst [isSubmitted, setIsSubmitted] = useState(false);\r\n\tconst [invoiceDate, setinvoiceDate] = useState(null);\r\n\tconst [purchaseData, setPurchaseData] = useState(null);\r\n\tconst [groupsList, setGroupsList] = useState([]);\r\n\tconst [suppliersList, setSuppliersList] = useState([]);\r\n\tconst [showRecheckInvoice, setshowRecheckInvoice] = useState(false);\r\n\tconst [showStatusConfirm, setStatusConfirm] = React.useState(false);\r\n\tconst [validatorAction, setvalidatorAction] = React.useState(\"\");\r\n\tconst [enableRecheck, setenableRecheck] = useState(false);\r\n\tconst actionComment = useRef(null);\r\n\r\n\t// REJECT ACTION\r\n\tconst entryAction = () => {\r\n\t\t// props.onShowLoader(true);\r\n\t\tlet params = {\r\n\t\t\tentry_id: props.entry.id,\r\n\t\t\tstatus_id: validatorAction,\r\n\t\t\tcomment: actionComment.current.value,\r\n\t\t};\r\n\t\t// console.log(params);\r\n\t\tcallApi(\"post\", ApiConstants.entry.setcheckerstatus, params, true)\r\n\t\t\t.then((response) => {\r\n\t\t\t\tprops.onShowLoader(false);\r\n\t\t\t\tif (response && response.status_code === 200) {\r\n\t\t\t\t\tprops.onSuccess();\r\n\t\t\t\t\tshowNotification(\"Success\", response.message, \"success\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tprops.onShowLoader(false);\r\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\r\n\t\t\t});\r\n\t};\r\n\t// REJECT ACTION\r\n\tconst [isEdit, setIsEdit] = useState(false);\r\n\tconst [selectedItem, setSelectedItem] = useState(null);\r\n\tconst [showSupplierForm, setSupplierForm] = useState(false);\r\n\tconst PurchaseFormSchema = Yup.object().shape({\r\n\t\tsupplier_id: Yup.mixed().required(\"Please select Supplier\"),\r\n\t\ttrn: Yup.string(),\r\n\t\tinvoice_number: Yup.string().required(\"Please enter Invoice number\"),\r\n\t\tinvoice_date: Yup.mixed().required(\"Please select Date\"),\r\n\t\tinvoice_details: Yup.array().of(\r\n\t\t\tYup.object().shape({\r\n\t\t\t\tinvoice_group_id: Yup.string().required(\"Please select Group\"),\r\n\t\t\t\tinvoice_sub_group_id: Yup.string().required(\"Please select Sub Group\"),\r\n\t\t\t\tinvoice_item_id: Yup.string().required(\"Please select Item\"),\r\n\t\t\t\tunit_price: Yup.string().required(\"Please enter Unit Price\"),\r\n\t\t\t\tquantity: Yup.string().required(\"Please enter Quantity\"),\r\n\t\t\t\tamount: Yup.string().required(\"Please enter Amount\"),\r\n\t\t\t})\r\n\t\t),\r\n\t\tsubtotal: Yup.string(),\r\n\t\tdiscount: Yup.string(),\r\n\t\tvatamount: Yup.string(),\r\n\t\ttotalamount: Yup.string(),\r\n\t});\r\n\r\n\tuseEffect(() => {\r\n\t\tgetSuppliers();\r\n\t\tinvoicePurchaseGroups();\r\n\t}, []);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (groupsList.length) {\r\n\t\t\tif (props.entry?.entry_status_id === entryStatus.RECHECK) {\r\n\t\t\t\tcallApi(\"get\", ApiConstants.purchase.getData, { entry_id: props.entry.id }, true)\r\n\t\t\t\t\t.then((response) => {\r\n\t\t\t\t\t\tprops.onShowLoader(false);\r\n\t\t\t\t\t\tif (response && response.status_code === 200) {\r\n\t\t\t\t\t\t\t// console.log(response.payload);\r\n\t\t\t\t\t\t\tsetPurchaseData(response.payload);\r\n\t\t\t\t\t\t\tsetinvoiceDate(new Date(response.payload?.header?.invoice_date));\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.catch((error) => {\r\n\t\t\t\t\t\tprops.onShowLoader(false);\r\n\t\t\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}, [groupsList, props]);\r\n\tconst onAddUser = () => {\r\n\t\t// closeModal();\r\n\t\t// getUsers();\r\n\t};\r\n\r\n\tconst checkInvoiceNumberExists = (invoice_number) =>\r\n\t\tnew Promise((resolve, reject) => {\r\n\t\t\tcallApi(\"get\", ApiConstants.entry.checkinvoicenumberexists + \"?invoice_number=\" + invoice_number, null, true)\r\n\t\t\t\t.then((response) => {\r\n\t\t\t\t\tif (response && response.status_code === 200) {\r\n\t\t\t\t\t\tresolve(response.payload.is_invoice_number_exist);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tprops.onShowLoader(false);\r\n\t\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.catch((error) => {\r\n\t\t\t\t\tprops.onShowLoader(false);\r\n\t\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\r\n\t\t\t\t});\r\n\t\t});\r\n\r\n\tconst saveFormData = (values) => {\r\n\t\t// props.onShowLoader(true);\r\n\r\n\t\tconst params = {\r\n\t\t\tentry_id: props.entry.id,\r\n\t\t\tinvoice_date: moment(values.invoice_date).format(\"YYYY-MM-DD\"),\r\n\t\t\tinvoice_number: values.invoice_number,\r\n\t\t\tsupplier_id: values.supplier_id,\r\n\t\t\tsub_total: values.subtotal,\r\n\t\t\tdiscount: values.discount ? values.discount : 0,\r\n\t\t\tvat_amount: values.vatamount,\r\n\t\t\ttotal_amount: values.totalamount,\r\n\t\t\tpurchase_details: values.invoice_details.map((i) => ({\r\n\t\t\t\tinvoice_group_id: i.invoice_group_id,\r\n\t\t\t\tinvoice_sub_group_id: i.invoice_sub_group_id,\r\n\t\t\t\tinvoice_item_id: i.invoice_item_id,\r\n\t\t\t\tprice: i.unit_price,\r\n\t\t\t\tqty: i.quantity,\r\n\t\t\t\tamount: i.amount,\r\n\t\t\t\tvat_percentage: i.vat_percentage,\r\n\t\t\t})),\r\n\t\t};\r\n\t\tcallApi(\"post\", ApiConstants.purchase.create, params, true)\r\n\t\t\t.then((response) => {\r\n\t\t\t\tprops.onShowLoader(false);\r\n\t\t\t\tif (response && response.status_code === 201) {\r\n\t\t\t\t\tprops.onSuccess();\r\n\t\t\t\t\tshowNotification(\"Success\", response.message, \"success\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.log(response);\r\n\t\t\t\t\t// showNotification(\"Error\", response.message, \"error\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tprops.onShowLoader(false);\r\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\r\n\t\t\t});\r\n\t};\r\n\tconst onSubmit = async (values) => {\r\n\t\t// console.log(values);\r\n\t\tprops.onShowLoader(true);\r\n\t\tlet isInvoiceExists = false;\r\n\t\tisInvoiceExists = await checkInvoiceNumberExists(values.invoice_number);\r\n\t\tif (isInvoiceExists) {\r\n\t\t\tprops.onShowLoader(false);\r\n\t\t\tsetshowRecheckInvoice(true);\r\n\t\t\tsetPurchaseData(values);\r\n\t\t} else {\r\n\t\t\tsaveFormData(values);\r\n\t\t}\r\n\t};\r\n\r\n\tconst invoicePurchaseGroups = () => {\r\n\t\tprops.onShowLoader(true);\r\n\t\tcallApi(\"get\", ApiConstants.lookups.invoicepurchasegroups, null, true)\r\n\t\t\t.then((response) => {\r\n\t\t\t\tprops.onShowLoader(false);\r\n\t\t\t\tif (response && response.status_code === 200) {\r\n\t\t\t\t\tlet data = response.payload.map((i) => {\r\n\t\t\t\t\t\treturn { ...i, value: i.id, label: i.name };\r\n\t\t\t\t\t});\r\n\t\t\t\t\tsetGroupsList(data);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tprops.onShowLoader(false);\r\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\r\n\t\t\t});\r\n\t};\r\n\r\n\tconst getSuppliers = () => {\r\n\t\tprops.onShowLoader(true);\r\n\t\tcallApi(\"get\", ApiConstants.lookups.getSuppliers, null)\r\n\t\t\t.then((response) => {\r\n\t\t\t\tprops.onShowLoader(false);\r\n\t\t\t\tif (response && response.status_code === 200) {\r\n\t\t\t\t\tlet suppliers = response.payload.map((i) => {\r\n\t\t\t\t\t\treturn { ...i, value: i.id, label: i.name };\r\n\t\t\t\t\t});\r\n\t\t\t\t\tsetSuppliersList(suppliers);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tprops.onShowLoader(false);\r\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\r\n\t\t\t});\r\n\t};\r\n\r\n\tconst getSubGroups = (groupId) => {\r\n\t\tlet selectedGroup = groupsList.find((i) => i.id === groupId);\r\n\t\tlet subGroups = selectedGroup\r\n\t\t\t? selectedGroup.invoice_sub_groups.map((i) => {\r\n\t\t\t\treturn { ...i, value: i.id, label: i.name };\r\n\t\t\t})\r\n\t\t\t: [];\r\n\t\treturn subGroups;\r\n\t};\r\n\r\n\tconst getSelectedSubGroup = (groupId, selectedId) => {\r\n\t\tlet selectedGroup = groupsList.find((i) => i.id === groupId);\r\n\t\tlet subGroups = selectedGroup\r\n\t\t\t? selectedGroup.invoice_sub_groups.map((i) => {\r\n\t\t\t\treturn { ...i, value: i.id, label: i.name };\r\n\t\t\t})\r\n\t\t\t: [];\r\n\r\n\t\tlet selectedSubGroup = null;\r\n\t\tif (subGroups && selectedId) {\r\n\t\t\tselectedSubGroup = subGroups.find((i) => i.id === selectedId);\r\n\t\t}\r\n\t\treturn selectedSubGroup;\r\n\t};\r\n\r\n\tconst getSubItems = (groupId, subgroupId) => {\r\n\t\tlet selectedGroup = groupsList.find((i) => i.id === groupId);\r\n\t\tlet subGroups = selectedGroup ? selectedGroup.invoice_sub_groups : [];\r\n\t\tlet selectedSubGroup = subGroups.find((i) => i.id === subgroupId);\r\n\t\tlet subItems = selectedSubGroup\r\n\t\t\t? selectedSubGroup.invoice_items.map((i) => {\r\n\t\t\t\treturn { ...i, value: i.id, label: i.name };\r\n\t\t\t})\r\n\t\t\t: [];\r\n\t\treturn subItems;\r\n\t};\r\n\r\n\tconst getSelectedSubItem = (groupId, subgroupId, selectedId) => {\r\n\t\tlet selectedGroup = groupsList.find((i) => i.id === groupId);\r\n\t\tlet subGroups = selectedGroup ? selectedGroup.invoice_sub_groups : [];\r\n\t\tlet selectedSubGroup = subGroups.find((i) => i.id === subgroupId);\r\n\t\tlet subItems = selectedSubGroup\r\n\t\t\t? selectedSubGroup.invoice_items.map((i) => {\r\n\t\t\t\treturn { ...i, value: i.id, label: i.name };\r\n\t\t\t})\r\n\t\t\t: [];\r\n\r\n\t\tlet selectedSubItem = null;\r\n\t\tif (subItems && selectedId) {\r\n\t\t\tselectedSubItem = subItems.find((i) => i.id === selectedId);\r\n\t\t}\r\n\t\treturn selectedSubItem;\r\n\t};\r\n\r\n\tconst calculateTotal = (values, setFieldValue, index, fieldValue, fieldType) => {\r\n\t\tlet amount = 0;\r\n\t\tlet vatamount = values.vatamount || 0;\r\n\t\tlet vat_percentage = values.invoice_details[index].vat_percentage || 0;\r\n\t\tif (fieldType === \"unit_price\") {\r\n\t\t\tvatamount = values.invoice_details[index].quantity * fieldValue * (vat_percentage / 100);\r\n\t\t\tamount = values.invoice_details[index].quantity * fieldValue;\r\n\t\t}\r\n\t\tif (fieldType === \"quantity\") {\r\n\t\t\tvatamount = values.invoice_details[index].unit_price * fieldValue * (vat_percentage / 100);\r\n\t\t\tamount = values.invoice_details[index].unit_price * fieldValue;\r\n\t\t}\r\n\t\tif (fieldType === \"vat_percentage\") {\r\n\t\t\tconsole.log(values.invoice_details[index].unit_price, values.invoice_details[index].quantity, fieldValue)\r\n\t\t\tvatamount = values.invoice_details[index].unit_price * values.invoice_details[index].quantity * (fieldValue / 100);\r\n\t\t\tamount = values.invoice_details[index].unit_price * values.invoice_details[index].quantity;\r\n\t\t}\r\n\t\tsetFieldValue(`invoice_details.${index}.amount`, amount);\r\n\t\tvalues.invoice_details[index].amount = amount;\r\n\t\tlet subtotal = values.invoice_details.reduce((sum, item) => {\r\n\t\t\treturn sum + item.amount;\r\n\t\t}, 0);\r\n\t\tsetFieldValue(\"subtotal\", subtotal);\r\n\t\tvalues.subtotal = subtotal;\r\n\r\n\t\t// setFieldValue(`invoice_details.${index}.vatamount`, vatamount);\r\n\t\t// console.log(values.invoice_details);\r\n\t\tvalues.invoice_details[index].vatamount = vatamount;\r\n\t\tlet totalVatAmount = values.invoice_details.reduce((sum, item) => {\r\n\t\t\tif (item.vatamount) {\r\n\t\t\t\treturn sum + item.vatamount;\r\n\t\t\t}\r\n\t\t\treturn sum;\r\n\t\t}, 0);\r\n\t\tsetFieldValue(\"vatamount\", totalVatAmount);\r\n\t\tlet discountAmt = values.discount ? values.discount : 0;\r\n\t\t// console.log(values.subtotal + totalVatAmount, discountAmt);\r\n\t\tlet totalamount = values.subtotal + totalVatAmount;\r\n\t\ttotalamount = totalamount - discountAmt;\r\n\t\tsetFieldValue(\"totalamount\", totalamount);\r\n\t};\r\n\r\n\tconst refreshTotal = (values, setFieldValue) => {\r\n\t\tlet subtotal = values.invoice_details.reduce((sum, item) => {\r\n\t\t\treturn sum + item.quantity * item.unit_price;\r\n\t\t}, 0);\r\n\t\tvalues.subtotal = subtotal;\r\n\r\n\t\tlet discountAmt = values.discount ? values.discount : 0;\r\n\t\t// let vatamount = ((values.subtotal - discountAmt) * props.entry.vat_percentage) / 100;\r\n\r\n\t\tlet totalamount = values.subtotal - discountAmt;\r\n\t\tsetTimeout(() => {\r\n\t\t\tsetFieldValue(\"subtotal\", subtotal);\r\n\t\t\t// setFieldValue(\"vatamount\", vatamount);\r\n\t\t\tsetFieldValue(\"totalamount\", totalamount);\r\n\t\t}, 100);\r\n\t};\r\n\r\n\tconst handleKeypress = (e) => {\r\n\t\tconst characterCode = e.key;\r\n\t\tconst actionKeys = [\"Backspace\", \"Tab\", \"ArrowLeft\", \"ArrowRight\", \".\"];\r\n\t\tif (actionKeys.includes(characterCode)) return;\r\n\r\n\t\tconst characterNumber = Number(characterCode);\r\n\t\t// console.log({characterCode, characterNumber});\r\n\t\tif (characterNumber >= 0 && characterNumber <= 9) {\r\n\t\t\tif (e.currentTarget.value && e.currentTarget.value.length) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\te.preventDefault();\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<div>\r\n\t\t\t\t{showSupplierForm && <UserForm onSuccess={onAddUser} getSuppliers={getSuppliers} setSupplierForm={setSupplierForm} setSelectBox={() => props.setHideSelectBox(false)} isEdit={isEdit} dataItem={selectedItem} {...props} />}\r\n\t\t\t\t{!showSupplierForm && (\r\n\t\t\t\t\t<Formik\r\n\t\t\t\t\t\tenableReinitialize={true}\r\n\t\t\t\t\t\tinitialValues={{\r\n\t\t\t\t\t\t\tsupplier_id: purchaseData?.header?.supplier_id ? purchaseData.header.supplier_id : \"\",\r\n\t\t\t\t\t\t\ttrn: purchaseData?.header?.supplier_trn ? purchaseData.header.supplier_trn : \"\",\r\n\t\t\t\t\t\t\tinvoice_number: purchaseData?.header?.invoice_number ? purchaseData.header.invoice_number : \"\",\r\n\t\t\t\t\t\t\tinvoice_date: purchaseData?.header?.invoice_date ? new Date(purchaseData?.header?.invoice_date) : \"\",\r\n\t\t\t\t\t\t\tinvoice_details: purchaseData?.details\r\n\t\t\t\t\t\t\t\t? purchaseData.details.map((i) => {\r\n\t\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\t\tinvoice_group_id: i.invoice_group_id,\r\n\t\t\t\t\t\t\t\t\t\tinvoice_sub_group_id: i.invoice_sub_group_id,\r\n\t\t\t\t\t\t\t\t\t\tinvoice_item_id: i.invoice_item_id,\r\n\t\t\t\t\t\t\t\t\t\tunit_price: i.price,\r\n\t\t\t\t\t\t\t\t\t\tquantity: i.qty,\r\n\t\t\t\t\t\t\t\t\t\tvat_percentage: i.vat_percentage,\r\n\t\t\t\t\t\t\t\t\t\tamount: i.amount,\r\n\t\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t: [\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tinvoice_group_id: \"\",\r\n\t\t\t\t\t\t\t\t\t\tinvoice_sub_group_id: \"\",\r\n\t\t\t\t\t\t\t\t\t\tinvoice_item_id: \"\",\r\n\t\t\t\t\t\t\t\t\t\tunit_price: 0,\r\n\t\t\t\t\t\t\t\t\t\tquantity: 0,\r\n\t\t\t\t\t\t\t\t\t\tvat_percentage: 5,\r\n\t\t\t\t\t\t\t\t\t\tamount: 0,\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\tsubtotal: purchaseData?.header?.sub_total ? purchaseData.header.sub_total : \"\",\r\n\t\t\t\t\t\t\tdiscount: purchaseData?.header?.discount ? purchaseData.header.discount : \"0\",\r\n\t\t\t\t\t\t\tvatamount: purchaseData?.header?.vat_amount ? purchaseData.header.vat_amount : \"\",\r\n\t\t\t\t\t\t\ttotalamount: purchaseData?.header?.total_amount ? purchaseData.header.total_amount : \"\",\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\tvalidationSchema={PurchaseFormSchema}\r\n\t\t\t\t\t\tonSubmit={(values) => {\r\n\t\t\t\t\t\t\t// console.log(values);\r\n\t\t\t\t\t\t\tonSubmit(values);\r\n\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t{({ errors, handleChange, setFieldValue, values }) => (\r\n\t\t\t\t\t\t\t<Form>\r\n\t\t\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t\t\t<Col xl={6} xs={12}>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"d-flex mb-3\">\r\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"w-100\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={`form-control-select ${errors.supplier_id && isSubmitted ? \"is-invalid\" : \"\"}`}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// classNamePrefix=\"select\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\toptions={suppliersList}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={suppliersList.find((i) => i.value === values?.supplier_id)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Supplier\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tisSearchable={true}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(value) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet event = {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttarget: {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: \"supplier_id\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue: value.id,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleChange(event);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetFieldValue(\"trn\", value.trn);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}, 100);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"supplier_id\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"btn btn-primary shadow-2 mx-3 mb-3\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tprops.setHideSelectBox(true);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetSupplierForm(true);\r\n\t\t\t\t\t\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t\t\t\t\t\tAdd\r\n\t\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t\t<Col xl={6} xs={12}>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\r\n\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" disabled className={`form-control ${errors.trn && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"TRN\" name=\"trn\" />\r\n\t\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"trn\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t\t<Col xl={6} xs={12}>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\r\n\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className={`form-control ${errors.invoice_number && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"Invoice Number\" name=\"invoice_number\" />\r\n\t\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"invoice_number\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t\t<Col xl={6} xs={12}>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"date-picker-container mb-3\">\r\n\t\t\t\t\t\t\t\t\t\t\t<DatePicker\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={`form-control ${errors.invoice_date && isSubmitted ? \"is-invalid\" : \"\"}`}\r\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholderText=\"Date\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tdateFormat=\"dd/MM/yyyy\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tselected={invoiceDate}\r\n\t\t\t\t\t\t\t\t\t\t\t\tminDate={new Date(props?.vatPeriod?.current_vat_period?.start_period_date?.date)}\r\n\t\t\t\t\t\t\t\t\t\t\t\tmaxDate={new Date(props?.vatPeriod?.current_vat_period?.end_period_date?.date)}\r\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(value) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetinvoiceDate(value);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tlet event = {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttarget: {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: \"invoice_date\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue: value,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t\t\t\t\t\thandleChange(event);\r\n\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-calendar\"></i>\r\n\t\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"invoice_date\">{(msg) => <div className=\"invalid-feedback d-block\">{msg}</div>}</ErrorMessage>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</Col>\r\n\r\n\t\t\t\t\t\t\t\t\t<Col xs={12} className=\"overflow-auto\">\r\n\t\t\t\t\t\t\t\t\t\t<Table className=\"purchase-grid\">\r\n\t\t\t\t\t\t\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<th>#</th>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<th width=\"120\">Group</th>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<th width=\"120\">Sub Group</th>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<th width=\"120\">Item Name</th>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<th>Unit Price</th>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<th>Quantity</th>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<th>VAT{\"(%)\"}</th>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<th>Amount</th>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t\t\t\t</thead>\r\n\t\t\t\t\t\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<FieldArray\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tname=\"invoice_details\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\trender={(arrayHelpers) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<React.Fragment>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{values.invoice_details.map((item, index) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<tr key={index}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<th scope=\"row\">{index + 1}</th>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={`w-100 form-control-select ${errors.invoice_details && errors.invoice_details[index] && errors.invoice_details[index].invoice_group_id && isSubmitted ? \"is-invalid\" : \"\"}`}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassNamePrefix=\"select\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toptions={groupsList}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={groupsList.find((i) => i.value === values?.invoice_details[index].invoice_group_id)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Select\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tisSearchable={false}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(value) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet event = {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttarget: {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: `invoice_details.${index}.invoice_group_id`,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue: value.id,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleChange(event);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetFieldValue(`invoice_details.${index}.invoice_sub_group_id`, \"\");\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetFieldValue(`invoice_details.${index}.invoice_item_id`, \"\");\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}, 100);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={`w-100 form-control-select ${errors.invoice_details && errors.invoice_details[index] && errors.invoice_details[index].invoice_sub_group_id && isSubmitted ? \"is-invalid\" : \"\"}`}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassNamePrefix=\"select\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toptions={getSubGroups(values.invoice_details[index].invoice_group_id)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={getSelectedSubGroup(values.invoice_details[index].invoice_group_id, values.invoice_details[index].invoice_sub_group_id)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Select\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tisSearchable={false}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(value) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet event = {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttarget: {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: `invoice_details.${index}.invoice_sub_group_id`,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue: value.id,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleChange(event);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetFieldValue(`invoice_details.${index}.invoice_item_id`, \"\");\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}, 100);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={`w-100 form-control-select ${errors.invoice_details && errors.invoice_details[index] && errors.invoice_details[index].invoice_item_id && isSubmitted ? \"is-invalid\" : \"\"}`}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassNamePrefix=\"select\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toptions={getSubItems(values.invoice_details[index].invoice_group_id, values.invoice_details[index].invoice_sub_group_id)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={getSelectedSubItem(values.invoice_details[index].invoice_group_id, values.invoice_details[index].invoice_sub_group_id, values.invoice_details[index].invoice_item_id)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Select\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tisSearchable={false}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(value) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet event = {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttarget: {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: `invoice_details.${index}.invoice_item_id`,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue: value.id,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleChange(event);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Field\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// type=\"number\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// onKeyDown={handleKeypress}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// min=\"-100000\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// step=\".002\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={`grid-input ${errors.invoice_details && errors.invoice_details[index] && errors.invoice_details[index].unit_price && isSubmitted ? \"is-invalid\" : \"\"}`}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname={`invoice_details.${index}.unit_price`}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={values.invoice_details[index].unit_price}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleChange(e);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcalculateTotal(values, setFieldValue, index, Number(e.target.value), \"unit_price\");\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}, 100);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Field\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"number\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonKeyDown={handleKeypress}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={`grid-input ${errors.invoice_details && errors.invoice_details[index] && errors.invoice_details[index].quantity && isSubmitted ? \"is-invalid\" : \"\"}`}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname={`invoice_details.${index}.quantity`}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={values.invoice_details[index].quantity}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleChange(e);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcalculateTotal(values, setFieldValue, index, Number(e.target.value), \"quantity\");\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}, 100);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Field\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonKeyDown={handleKeypress}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={`grid-input ${errors.invoice_details && errors.invoice_details[index] && errors.invoice_details[index].vat_percentage && isSubmitted ? \"is-invalid\" : \"\"}`}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname={`invoice_details.${index}.vat_percentage`}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={values.invoice_details[index].vat_percentage}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleChange(e);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcalculateTotal(values, setFieldValue, index, Number(e.target.value), \"vat_percentage\");\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}, 100);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className={`grid-input ${errors.invoice_details && errors.invoice_details[index] && errors.invoice_details[index].amount && isSubmitted ? \"is-invalid\" : \"\"}`} disabled name={`invoice_details.${index}.amount`} />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{values.invoice_details.length !== 1 && (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"insert-row-btn text-primary mr-2\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tarrayHelpers.remove(index);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet updatedValues = JSON.parse(JSON.stringify(values));\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdatedValues.invoice_details.splice(index, 1);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trefreshTotal(updatedValues, setFieldValue);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-minus-circle\" />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{index + 1 === values.invoice_details.length && (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"insert-row-btn text-primary\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tarrayHelpers.push({\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tinvoice_group_id: \"\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tinvoice_sub_group_id: \"\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tinvoice_item_id: \"\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tunit_price: 0,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tquantity: 0,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvat_percentage: 5,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tamount: 0,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-plus-circle\" />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</React.Fragment>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td colSpan=\"6\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"text-right\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label className=\"mr-3\">Sub Total</label>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className=\"grid-input\" name=\"subtotal\" />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td colSpan=\"6\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"text-right\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label className=\"mr-3\">Discount Rounded</label>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Field\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"grid-input\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname=\"discount\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={values.discount}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleChange(e);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet discountAmt = e.target.value ? e.target.value : 0;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// let vatamount = ((values.subtotal - discountAmt) * props.entry.vat_percentage) / 100;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// setFieldValue(\"vatamount\", vatamount);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet totalamount = values.subtotal + values.vatamount - discountAmt;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetFieldValue(\"totalamount\", totalamount);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td colSpan=\"6\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"text-right\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label className=\"mr-3\">VAT Amount</label>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Field\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"grid-input\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname=\"vatamount\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleChange(e);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetFieldValue(\"vatamount\", e.target.value);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetFieldValue(\"totalamount\", Number(values.subtotal) + Number(e.target.value));\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td colSpan=\"6\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"text-right\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label className=\"mr-3\">Total</label>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className=\"grid-input\" name=\"totalamount\" />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t\t\t\t\t\t</Table>\r\n\t\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t</Row>\r\n\r\n\t\t\t\t\t\t\t\t<div className=\"mt-4\">\r\n\t\t\t\t\t\t\t\t\t<div className=\"checkbox d-flex p-0\">\r\n\t\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" name=\"checkbox-fill-1\" id=\"checkbox-fill-a1\" onChange={() => setenableRecheck(!enableRecheck)} />\r\n\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"checkbox-fill-a1\" className=\"cr\">\r\n\t\t\t\t\t\t\t\t\t\t\tEnable Reject Entry\r\n\t\t\t\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"text-center\">\r\n\t\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\t\t\t\t\tdisabled={!enableRecheck}\r\n\t\t\t\t\t\t\t\t\t\tstyle={{ width: 100, fontWeight: \"bold\" }}\r\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn btn-danger shadow-2 mt-3 mr-3\"\r\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\t\t\tsetStatusConfirm(true);\r\n\t\t\t\t\t\t\t\t\t\t\tsetvalidatorAction(entryStatus.REJECTED);\r\n\t\t\t\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t\t\t\tReject\r\n\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t{props.entry?.entry_status_id === entryStatus.RECHECK ? <button style={{ width: 180, fontWeight: \"bold\" }} className=\"btn btn-primary shadow-2 mt-3\" onClick={() => { setIsSubmitted(true); }}>\r\n\t\t\t\t\t\t\t\t\t\tUpdate\r\n\t\t\t\t\t\t\t\t\t</button> : <button type=\"submit\" style={{ width: 180, fontWeight: \"bold\" }} className=\"btn btn-primary shadow-2 mt-3\" onClick={() => setIsSubmitted(true)}>\r\n\t\t\t\t\t\t\t\t\t\tSubmit\r\n\t\t\t\t\t\t\t\t\t</button>}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</Form>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</Formik>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t\t<Modal size=\"md\" show={showRecheckInvoice} backdrop=\"static\" keyboard={true} backdropClassName=\"nested-modal\">\r\n\t\t\t\t<Modal.Header>\r\n\t\t\t\t\t<h5 className=\"card-title\">Warning!</h5>\r\n\t\t\t\t</Modal.Header>\r\n\t\t\t\t<Modal.Body>\r\n\t\t\t\t\t<div>The Invoice ID is already used. Do you want to proceed with this?</div>\r\n\t\t\t\t</Modal.Body>\r\n\t\t\t\t<Modal.Footer>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<button className=\"btn btn-outline-warning\" onClick={() => setshowRecheckInvoice(false)}>\r\n\t\t\t\t\t\t\tNo\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tclassName=\"btn btn-warning\"\r\n\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\tsetshowRecheckInvoice(false);\r\n\t\t\t\t\t\t\t\tsaveFormData(purchaseData);\r\n\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\tYes\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Modal.Footer>\r\n\t\t\t</Modal>\r\n\t\t\t<Modal size=\"md\" show={showStatusConfirm} backdrop=\"static\" keyboard={true} backdropClassName=\"nested-modal\">\r\n\t\t\t\t<Modal.Header>\r\n\t\t\t\t\t<h5 className=\"card-title\">{validatorAction === entryStatus.APPROVED ? \"Approve\" : validatorAction === entryStatus.RECHECK ? \"Recheck\" : \"Reject\"} Entry</h5>\r\n\t\t\t\t</Modal.Header>\r\n\t\t\t\t<Modal.Body>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<span>Are you sure you want to {validatorAction === entryStatus.APPROVED ? \"Approve\" : validatorAction === entryStatus.RECHECK ? \"Recheck\" : \"Reject\"} the Entry?</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"mt-4\">\r\n\t\t\t\t\t\t<textarea ref={actionComment} className=\"form-control\" placeholder=\"Comment\"></textarea>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Modal.Body>\r\n\t\t\t\t<Modal.Footer>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<button className=\"btn btn-outline-primary\" onClick={() => setStatusConfirm(false)}>\r\n\t\t\t\t\t\t\tCancel\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tclassName={`btn ${validatorAction === entryStatus.APPROVED ? \"btn-primary\" : validatorAction === entryStatus.RECHECK ? \"btn-warning\" : \"btn-danger\"}`}\r\n\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\tsetStatusConfirm(false);\r\n\t\t\t\t\t\t\t\tentryAction();\r\n\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t{validatorAction === entryStatus.APPROVED ? \"Approve\" : validatorAction === entryStatus.RECHECK ? \"Recheck\" : \"Reject\"}\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Modal.Footer>\r\n\t\t\t</Modal>\r\n\t\t</React.Fragment >\r\n\t);\r\n};\r\n\r\nexport default PurchaseForm;\r\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/clients-no-entry/forms/expenditureForm.js",["958","959"],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/clients-no-entry/forms/purchaseForm.js",["960","961","962"],"import React, { useState, useEffect } from \"react\";\nimport { Row, Col, Table, Modal } from \"react-bootstrap\";\nimport { Formik, Field, Form, ErrorMessage, FieldArray } from \"formik\";\nimport * as Yup from \"yup\";\nimport DatePicker from \"react-datepicker\";\nimport moment from \"moment\";\nimport Select from \"react-select\";\n\nimport { callApi } from \"../../../../services/apiService\";\nimport { ApiConstants } from \"../../../../config/apiConstants\";\nimport { entryStatus } from \"../../../../enums/entryStatus\";\nimport { showNotification } from \"../../../../services/toasterService\";\n\nconst PurchaseForm = (props) => {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [invoiceDate, setinvoiceDate] = useState(null);\n  const [purchaseData, setPurchaseData] = useState(null);\n  const [groupsList, setGroupsList] = useState([]);\n  const [suppliersList, setSuppliersList] = useState([]);\n  const [showRecheckInvoice, setshowRecheckInvoice] = useState(false);\n\n  const PurchaseFormSchema = Yup.object().shape({\n    supplier_id: Yup.mixed().required(\"Please select Supplier\"),\n    trn: Yup.string(),\n    invoice_number: Yup.string().required(\"Please enter Invoice number\"),\n    invoice_date: Yup.mixed().required(\"Please select Date\"),\n    invoice_details: Yup.array().of(\n      Yup.object().shape({\n        invoice_group_id: Yup.string().required(\"Please select Group\"),\n        invoice_sub_group_id: Yup.string().required(\"Please select Sub Group\"),\n        invoice_item_id: Yup.string().required(\"Please select Item\"),\n        unit_price: Yup.string().required(\"Please enter Unit Price\"),\n        quantity: Yup.string().required(\"Please enter Quantity\"),\n        amount: Yup.string().required(\"Please enter Amount\"),\n      })\n    ),\n    subtotal: Yup.string(),\n    discount: Yup.string(),\n    vatamount: Yup.string(),\n    totalamount: Yup.string(),\n  });\n\n  useEffect(() => {\n    getSuppliers();\n    invoicePurchaseGroups();\n  }, []);\n\n  useEffect(() => {\n    if (groupsList.length) {\n      if (props.entry?.entry_status_id === entryStatus.RECHECK) {\n        getData();\n      }\n    }\n  }, [groupsList]);\n\n  const getData = () => {\n    props.onShowLoader(true);\n    let params = { entry_id: props.entry.id };\n    callApi(\"get\", ApiConstants.purchase.getData, params, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          setPurchaseData(response.payload);\n          setinvoiceDate(new Date(response.payload?.header?.invoice_date));\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const checkInvoiceNumberExists = (invoice_number) =>\n    new Promise((resolve, reject) => {\n      callApi(\n        \"get\",\n        ApiConstants.entry.checkinvoicenumberexists +\n          \"?invoice_number=\" +\n          invoice_number,\n        null,\n        true\n      )\n        .then((response) => {\n          if (response && response.status_code === 200) {\n            resolve(response.payload.is_invoice_number_exist);\n          } else {\n            props.onShowLoader(false);\n            showNotification(\"Error\", response.message, \"error\");\n          }\n        })\n        .catch((error) => {\n          props.onShowLoader(false);\n          showNotification(\"Error\", \"Something went wrong\", \"error\");\n        });\n    });\n\n  const onSubmit = async (values) => {\n    props.onShowLoader(true);\n    let isInvoiceExists = false;\n    isInvoiceExists = await checkInvoiceNumberExists(values.invoice_number);\n    if (isInvoiceExists) {\n      props.onShowLoader(false);\n      setshowRecheckInvoice(true);\n      setPurchaseData(values);\n    } else {\n      saveFormData(values);\n    }\n  };\n\n  const saveFormData = (values) => {\n    props.onShowLoader(true);\n    let params = {\n      entry_id: props.entry.id,\n      invoice_date: moment(values.invoice_date).format(\"YYYY-MM-DD\"),\n      invoice_number: values.invoice_number,\n      supplier_id: values.supplier_id,\n      sub_total: values.subtotal,\n      discount: values.discount ? parseInt(values.discount) : 0,\n      vat_amount: values.vatamount,\n      total_amount: values.totalamount,\n      purchase_details: values.invoice_details.map((i) => {\n        return {\n          invoice_group_id: i.invoice_group_id,\n          invoice_sub_group_id: i.invoice_sub_group_id,\n          invoice_item_id: i.invoice_item_id,\n          price: parseInt(i.unit_price),\n          qty: parseInt(i.quantity),\n          amount: i.amount,\n        };\n      }),\n    };\n    callApi(\"post\", ApiConstants.purchase.create, params, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 201) {\n          props.onSuccess();\n          showNotification(\"Success\", response.message, \"success\");\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const invoicePurchaseGroups = () => {\n    props.onShowLoader(true);\n    callApi(\"get\", ApiConstants.lookups.invoicepurchasegroups, null, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          let data = response.payload.map((i) => {\n            return { ...i, value: i.id, label: i.name };\n          });\n          setGroupsList(data);\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const getSuppliers = () => {\n    props.onShowLoader(true);\n    callApi(\"get\", ApiConstants.lookups.getSuppliers, null)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          let suppliers = response.payload.map((i) => {\n            return { ...i, value: i.id, label: i.name };\n          });\n          setSuppliersList(suppliers);\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const getSubGroups = (groupId) => {\n    let selectedGroup = groupsList.find((i) => i.id === groupId);\n    let subGroups = selectedGroup\n      ? selectedGroup.invoice_sub_groups.map((i) => {\n          return { ...i, value: i.id, label: i.name };\n        })\n      : [];\n    return subGroups;\n  };\n\n  const getSelectedSubGroup = (groupId, selectedId) => {\n    let selectedGroup = groupsList.find((i) => i.id === groupId);\n    let subGroups = selectedGroup\n      ? selectedGroup.invoice_sub_groups.map((i) => {\n          return { ...i, value: i.id, label: i.name };\n        })\n      : [];\n\n    let selectedSubGroup = null;\n    if (subGroups && selectedId) {\n      selectedSubGroup = subGroups.find((i) => i.id === selectedId);\n    }\n    return selectedSubGroup;\n  };\n\n  const getSubItems = (groupId, subgroupId) => {\n    let selectedGroup = groupsList.find((i) => i.id === groupId);\n    let subGroups = selectedGroup ? selectedGroup.invoice_sub_groups : [];\n    let selectedSubGroup = subGroups.find((i) => i.id === subgroupId);\n    let subItems = selectedSubGroup\n      ? selectedSubGroup.invoice_items.map((i) => {\n          return { ...i, value: i.id, label: i.name };\n        })\n      : [];\n    return subItems;\n  };\n\n  const getSelectedSubItem = (groupId, subgroupId, selectedId) => {\n    let selectedGroup = groupsList.find((i) => i.id === groupId);\n    let subGroups = selectedGroup ? selectedGroup.invoice_sub_groups : [];\n    let selectedSubGroup = subGroups.find((i) => i.id === subgroupId);\n    let subItems = selectedSubGroup\n      ? selectedSubGroup.invoice_items.map((i) => {\n          return { ...i, value: i.id, label: i.name };\n        })\n      : [];\n\n    let selectedSubItem = null;\n    if (subItems && selectedId) {\n      selectedSubItem = subItems.find((i) => i.id === selectedId);\n    }\n    return selectedSubItem;\n  };\n\n  const calculateTotal = (\n    values,\n    setFieldValue,\n    index,\n    fieldValue,\n    fieldType\n  ) => {\n    let amount = 0;\n    if (fieldType === \"unit_price\")\n      amount = values.invoice_details[index].quantity * fieldValue;\n    if (fieldType === \"quantity\")\n      amount = values.invoice_details[index].unit_price * fieldValue;\n\n    setFieldValue(`invoice_details.${index}.amount`, amount);\n    values.invoice_details[index].amount = amount;\n\n    let subtotal = values.invoice_details.reduce((sum, item) => {\n      return sum + item.amount;\n    }, 0);\n    setFieldValue(\"subtotal\", subtotal);\n    values.subtotal = subtotal;\n\n    let discountAmt = values.discount ? values.discount : 0;\n    let vatamount =\n      ((values.subtotal - discountAmt) * props.entry.vat_percentage) / 100;\n    setFieldValue(\"vatamount\", vatamount);\n\n    let totalamount = values.subtotal - discountAmt + vatamount;\n    setFieldValue(\"totalamount\", totalamount);\n  };\n\n  const refreshTotal = (values, setFieldValue) => {\n    let subtotal = values.invoice_details.reduce((sum, item) => {\n      return sum + item.amount;\n    }, 0);\n    values.subtotal = subtotal;\n\n    let discountAmt = values.discount ? values.discount : 0;\n    let vatamount =\n      ((values.subtotal - discountAmt) * props.entry.vat_percentage) / 100;\n\n    let totalamount = values.subtotal - discountAmt + vatamount;\n    setTimeout(() => {\n      setFieldValue(\"subtotal\", subtotal);\n      setFieldValue(\"vatamount\", vatamount);\n      setFieldValue(\"totalamount\", totalamount);\n    }, 100);\n  };\n\n  const handleKeypress = (e) => {\n    const characterCode = e.key;\n    const actionKeys = [\"Backspace\", \"Tab\", \"ArrowLeft\", \"ArrowRight\", \".\"];\n    if (actionKeys.includes(characterCode)) return;\n\n    const characterNumber = Number(characterCode);\n    if (characterNumber >= 0 && characterNumber <= 9) {\n      if (e.currentTarget.value && e.currentTarget.value.length) {\n        return;\n      } else if (characterNumber === 0) {\n        e.preventDefault();\n      }\n    } else {\n      e.preventDefault();\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <div>\n        <Formik\n          enableReinitialize={true}\n          initialValues={{\n            supplier_id: purchaseData?.header?.supplier_id\n              ? purchaseData.header.supplier_id\n              : \"\",\n            trn: purchaseData?.header?.supplier_trn\n              ? purchaseData.header.supplier_trn\n              : \"\",\n            invoice_number: purchaseData?.header?.invoice_number\n              ? purchaseData.header.invoice_number\n              : \"\",\n            invoice_date: purchaseData?.header?.invoice_date\n              ? new Date(purchaseData?.header?.invoice_date)\n              : \"\",\n            invoice_details: purchaseData?.details\n              ? purchaseData.details.map((i) => {\n                  return {\n                    invoice_group_id: i.invoice_group_id,\n                    invoice_sub_group_id: i.invoice_sub_group_id,\n                    invoice_item_id: i.invoice_item_id,\n                    unit_price: i.price,\n                    quantity: i.qty,\n                    amount: i.amount,\n                  };\n                })\n              : [\n                  {\n                    invoice_group_id: \"\",\n                    invoice_sub_group_id: \"\",\n                    invoice_item_id: \"\",\n                    unit_price: \"\",\n                    quantity: \"\",\n                    amount: \"\",\n                  },\n                ],\n            subtotal: purchaseData?.header?.sub_total\n              ? purchaseData.header.sub_total\n              : \"\",\n            discount: purchaseData?.header?.discount\n              ? purchaseData.header.discount\n              : \"0\",\n            vatamount: purchaseData?.header?.vat_amount\n              ? purchaseData.header.vat_amount\n              : \"\",\n            totalamount: purchaseData?.header?.total_amount\n              ? purchaseData.header.total_amount\n              : \"\",\n          }}\n          validationSchema={PurchaseFormSchema}\n          onSubmit={(values) => onSubmit(values)}>\n          {({ errors, handleChange, setFieldValue, values, validateForm }) => (\n            <Form>\n              <Row>\n                <Col xl={6} xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Select\n                      className={`w-100 form-control-select ${\n                        errors.supplier_id && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      classNamePrefix=\"select\"\n                      options={suppliersList}\n                      value={suppliersList.find(\n                        (i) => i.value === values?.supplier_id\n                      )}\n                      placeholder=\"Supplier\"\n                      isSearchable={false}\n                      onChange={(value) => {\n                        let event = {\n                          target: {\n                            name: \"supplier_id\",\n                            value: value.id,\n                          },\n                        };\n                        handleChange(event);\n                        setTimeout(() => {\n                          setFieldValue(\"trn\", value.trn);\n                        }, 100);\n                      }}\n                    />\n                    <ErrorMessage name=\"supplier_id\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n                <Col xl={6} xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      disabled\n                      className={`form-control ${\n                        errors.trn && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholder=\"TRN\"\n                      name=\"trn\"\n                    />\n                    <ErrorMessage name=\"trn\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n                <Col xl={6} xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      className={`form-control ${\n                        errors.invoice_number && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholder=\"Invoice Number\"\n                      name=\"invoice_number\"\n                    />\n                    <ErrorMessage name=\"invoice_number\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n                <Col xl={6} xs={12}>\n                  <div className=\"date-picker-container mb-3\">\n                    <DatePicker\n                      className={`form-control ${\n                        errors.invoice_date && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholderText=\"Date\"\n                      dateFormat=\"dd/MM/yyyy\"\n                      selected={invoiceDate}\n                      minDate={\n                        new Date(\n                          props?.vatPeriod?.current_vat_period?.start_period_date?.date\n                        )\n                      }\n                      maxDate={\n                        new Date(\n                          props?.vatPeriod?.current_vat_period?.end_period_date?.date\n                        )\n                      }\n                      onChange={(value) => {\n                        setinvoiceDate(value);\n                        let event = {\n                          target: {\n                            name: \"invoice_date\",\n                            value: value,\n                          },\n                        };\n                        handleChange(event);\n                      }}\n                    />\n                    <i className=\"feather icon-calendar\"></i>\n                    <ErrorMessage name=\"invoice_date\">\n                      {(msg) => (\n                        <div className=\"invalid-feedback d-block\">{msg}</div>\n                      )}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12} className=\"overflow-auto\">\n                  <Table className=\"purchase-grid\">\n                    <thead>\n                      <tr>\n                        <th>#</th>\n                        <th width=\"120\">Group</th>\n                        <th width=\"120\">Sub Group</th>\n                        <th width=\"120\">Item Name</th>\n                        <th>Unit Price</th>\n                        <th>Quantity</th>\n                        <th>Amount</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <FieldArray\n                        name=\"invoice_details\"\n                        render={(arrayHelpers) => (\n                          <React.Fragment>\n                            {values.invoice_details.map((item, index) => (\n                              <tr key={index}>\n                                <td scope=\"row\">{index + 1}</td>\n                                <td>\n                                  <Select\n                                    className={`w-100 form-control-select ${\n                                      errors.invoice_details &&\n                                      errors.invoice_details[index] &&\n                                      errors.invoice_details[index]\n                                        .invoice_group_id &&\n                                      isSubmitted\n                                        ? \"is-invalid\"\n                                        : \"\"\n                                    }`}\n                                    classNamePrefix=\"select\"\n                                    options={groupsList}\n                                    value={groupsList.find(\n                                      (i) =>\n                                        i.value ===\n                                        values?.invoice_details[index]\n                                          .invoice_group_id\n                                    )}\n                                    placeholder=\"Select\"\n                                    isSearchable={false}\n                                    onChange={(value) => {\n                                      let event = {\n                                        target: {\n                                          name: `invoice_details.${index}.invoice_group_id`,\n                                          value: value.id,\n                                        },\n                                      };\n                                      handleChange(event);\n                                      setTimeout(() => {\n                                        setFieldValue(\n                                          `invoice_details.${index}.invoice_sub_group_id`,\n                                          \"\"\n                                        );\n                                        setFieldValue(\n                                          `invoice_details.${index}.invoice_item_id`,\n                                          \"\"\n                                        );\n                                      }, 100);\n                                    }}\n                                  />\n                                </td>\n                                <td>\n                                  <Select\n                                    className={`w-100 form-control-select ${\n                                      errors.invoice_details &&\n                                      errors.invoice_details[index] &&\n                                      errors.invoice_details[index]\n                                        .invoice_sub_group_id &&\n                                      isSubmitted\n                                        ? \"is-invalid\"\n                                        : \"\"\n                                    }`}\n                                    classNamePrefix=\"select\"\n                                    options={getSubGroups(\n                                      values.invoice_details[index]\n                                        .invoice_group_id\n                                    )}\n                                    value={getSelectedSubGroup(\n                                      values.invoice_details[index]\n                                        .invoice_group_id,\n                                      values.invoice_details[index]\n                                        .invoice_sub_group_id\n                                    )}\n                                    placeholder=\"Select\"\n                                    isSearchable={false}\n                                    onChange={(value) => {\n                                      let event = {\n                                        target: {\n                                          name: `invoice_details.${index}.invoice_sub_group_id`,\n                                          value: value.id,\n                                        },\n                                      };\n                                      handleChange(event);\n                                      setTimeout(() => {\n                                        setFieldValue(\n                                          `invoice_details.${index}.invoice_item_id`,\n                                          \"\"\n                                        );\n                                      }, 100);\n                                    }}\n                                  />\n                                </td>\n                                <td>\n                                  <Select\n                                    className={`w-100 form-control-select ${\n                                      errors.invoice_details &&\n                                      errors.invoice_details[index] &&\n                                      errors.invoice_details[index]\n                                        .invoice_item_id &&\n                                      isSubmitted\n                                        ? \"is-invalid\"\n                                        : \"\"\n                                    }`}\n                                    classNamePrefix=\"select\"\n                                    options={getSubItems(\n                                      values.invoice_details[index]\n                                        .invoice_group_id,\n                                      values.invoice_details[index]\n                                        .invoice_sub_group_id\n                                    )}\n                                    value={getSelectedSubItem(\n                                      values.invoice_details[index]\n                                        .invoice_group_id,\n                                      values.invoice_details[index]\n                                        .invoice_sub_group_id,\n                                      values.invoice_details[index]\n                                        .invoice_item_id\n                                    )}\n                                    placeholder=\"Select\"\n                                    isSearchable={false}\n                                    onChange={(value) => {\n                                      let event = {\n                                        target: {\n                                          name: `invoice_details.${index}.invoice_item_id`,\n                                          value: value.id,\n                                        },\n                                      };\n                                      handleChange(event);\n                                    }}\n                                  />\n                                </td>\n                                <td>\n                                  <Field\n                                    type=\"number\"\n                                    onKeyDown={handleKeypress}\n                                    min=\"1\"\n                                    step=\"1\"\n                                    className={`grid-input ${\n                                      errors.invoice_details &&\n                                      errors.invoice_details[index] &&\n                                      errors.invoice_details[index]\n                                        .unit_price &&\n                                      isSubmitted\n                                        ? \"is-invalid\"\n                                        : \"\"\n                                    }`}\n                                    name={`invoice_details.${index}.unit_price`}\n                                    value={\n                                      values.invoice_details[index].unit_price\n                                    }\n                                    onChange={(e) => {\n                                      handleChange(e);\n                                      setTimeout(() => {\n                                        calculateTotal(\n                                          values,\n                                          setFieldValue,\n                                          index,\n                                          e.target.value,\n                                          \"unit_price\"\n                                        );\n                                      }, 100);\n                                    }}\n                                  />\n                                </td>\n                                <td>\n                                  <Field\n                                    type=\"number\"\n                                    onKeyDown={handleKeypress}\n                                    min=\"1\"\n                                    step=\"1\"\n                                    className={`grid-input ${\n                                      errors.invoice_details &&\n                                      errors.invoice_details[index] &&\n                                      errors.invoice_details[index].quantity &&\n                                      isSubmitted\n                                        ? \"is-invalid\"\n                                        : \"\"\n                                    }`}\n                                    name={`invoice_details.${index}.quantity`}\n                                    value={\n                                      values.invoice_details[index].quantity\n                                    }\n                                    onChange={(e) => {\n                                      handleChange(e);\n\n                                      setTimeout(() => {\n                                        calculateTotal(\n                                          values,\n                                          setFieldValue,\n                                          index,\n                                          e.target.value,\n                                          \"quantity\"\n                                        );\n                                      }, 100);\n                                    }}\n                                  />\n                                </td>\n                                <td>\n                                  <Field\n                                    type=\"text\"\n                                    className={`grid-input ${\n                                      errors.invoice_details &&\n                                      errors.invoice_details[index] &&\n                                      errors.invoice_details[index].amount &&\n                                      isSubmitted\n                                        ? \"is-invalid\"\n                                        : \"\"\n                                    }`}\n                                    disabled\n                                    name={`invoice_details.${index}.amount`}\n                                  />\n                                  {values.invoice_details.length !== 1 && (\n                                    <span\n                                      className=\"insert-row-btn text-primary mr-2\"\n                                      onClick={() => {\n                                        arrayHelpers.remove(index);\n                                        let updatedValues = JSON.parse(\n                                          JSON.stringify(values)\n                                        );\n                                        updatedValues.invoice_details.splice(\n                                          index,\n                                          1\n                                        );\n                                        refreshTotal(\n                                          updatedValues,\n                                          setFieldValue\n                                        );\n                                      }}>\n                                      <i className=\"feather icon-minus-circle\" />\n                                    </span>\n                                  )}\n                                  {index + 1 ===\n                                    values.invoice_details.length && (\n                                    <span\n                                      className=\"insert-row-btn text-primary\"\n                                      onClick={() => {\n                                        arrayHelpers.push({\n                                          invoice_group_id: \"\",\n                                          invoice_sub_group_id: \"\",\n                                          invoice_item_id: \"\",\n                                          unit_price: \"\",\n                                          quantity: \"\",\n                                          amount: \"\",\n                                        });\n                                      }}>\n                                      <i className=\"feather icon-plus-circle\" />\n                                    </span>\n                                  )}\n                                </td>\n                              </tr>\n                            ))}\n                          </React.Fragment>\n                        )}\n                      />\n                      <tr>\n                        <td colSpan=\"6\">\n                          <div className=\"text-right\">\n                            <label className=\"mr-3\">Sub Total</label>\n                          </div>\n                        </td>\n                        <td>\n                          <Field\n                            type=\"text\"\n                            className=\"grid-input\"\n                            disabled\n                            name=\"subtotal\"\n                          />\n                        </td>\n                      </tr>\n                      <tr>\n                        <td colSpan=\"6\">\n                          <div className=\"text-right\">\n                            <label className=\"mr-3\">Discount Rounded</label>\n                          </div>\n                        </td>\n                        <td>\n                          <Field\n                            type=\"number\"\n                            onKeyDown={handleKeypress}\n                            min=\"0\"\n                            step=\"1\"\n                            className=\"grid-input\"\n                            name=\"discount\"\n                            value={values.discount}\n                            onChange={(e) => {\n                              handleChange(e);\n                              let discountAmt = e.target.value\n                                ? e.target.value\n                                : 0;\n                              let vatamount =\n                                ((values.subtotal - discountAmt) *\n                                  props.entry.vat_percentage) /\n                                100;\n                              setFieldValue(\"vatamount\", vatamount);\n\n                              let totalamount =\n                                values.subtotal - discountAmt + vatamount;\n                              setFieldValue(\"totalamount\", totalamount);\n                            }}\n                          />\n                        </td>\n                      </tr>\n                      <tr>\n                        <td colSpan=\"6\">\n                          <div className=\"text-right\">\n                            <label className=\"mr-3\">VAT Amount</label>\n                          </div>\n                        </td>\n                        <td>\n                          <Field\n                            type=\"text\"\n                            disabled\n                            className=\"grid-input\"\n                            name=\"vatamount\"\n                          />\n                        </td>\n                      </tr>\n                      <tr>\n                        <td colSpan=\"6\">\n                          <div className=\"text-right\">\n                            <label className=\"mr-3\">Total</label>\n                          </div>\n                        </td>\n                        <td>\n                          <Field\n                            type=\"text\"\n                            disabled\n                            className=\"grid-input\"\n                            name=\"totalamount\"\n                          />\n                        </td>\n                      </tr>\n                    </tbody>\n                  </Table>\n                </Col>\n              </Row>\n\n              <div className=\"text-center\">\n                <button\n                  type=\"submit\"\n                  style={{ width: 180, fontWeight: \"bold\" }}\n                  className=\"btn btn-primary shadow-2 mt-3\"\n                  onClick={() => setIsSubmitted(true)}>\n                  Submit\n                </button>\n              </div>\n            </Form>\n          )}\n        </Formik>\n      </div>\n      <Modal\n        size=\"md\"\n        show={showRecheckInvoice}\n        backdrop=\"static\"\n        keyboard={true}\n        backdropClassName=\"nested-modal\">\n        <Modal.Header>\n          <h5 className=\"card-title\">Warning!</h5>\n        </Modal.Header>\n        <Modal.Body>\n          <div>\n            The Invoice ID is already used. Do you want to proceed with this?\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <div>\n            <button\n              className=\"btn btn-outline-warning\"\n              onClick={() => setshowRecheckInvoice(false)}>\n              No\n            </button>\n            <button\n              className=\"btn btn-warning\"\n              onClick={() => {\n                setshowRecheckInvoice(false);\n                saveFormData(purchaseData);\n              }}>\n              Yes\n            </button>\n          </div>\n        </Modal.Footer>\n      </Modal>\n    </React.Fragment>\n  );\n};\n\nexport default PurchaseForm;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/components/Invoice/index.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/clients-no-entry/forms/salesForm.js",["963"],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/components/Preview/index.js",["964"],"import React, {useState, useEffect} from \"react\";\nimport ReactImageZoom from \"react-image-zoom\";\n\nimport {CONFIG} from \"../../config/constant\";\nimport {ApiConstants} from \"../../config/apiConstants\";\nimport FileIcon from \"../FileIcon\";\n\nconst Preview = (props) => {\n\tconst [previewImg, setpreviewImg] = useState(\"\");\n\tconst [previewAvailable, setpreviewAvailable] = useState(true);\n\n\tlet zoomOptions = {\n\t\tzoomWidth: 350,\n\t\timg: \"\",\n\t\tzoomPosition: \"original\",\n\t};\n\n\tuseEffect(() => {\n\t\tgetFilePath();\n\t}, []);\n\n\tconst getFilePath = () => {\n\t\tlet filePath = CONFIG.API_BASE_URL + ApiConstants.file.view + \"?file_name=\" + props.source;\n\t\tsetpreviewAvailable(checkFileType(props.source));\n\n\t\tsetTimeout(() => {\n\t\t\tsetpreviewImg(filePath);\n\t\t}, 200);\n\t};\n\n\tconst getExtension = (filename) => {\n\t\tlet regex = /(?:\\.([^.]+))?$/;\n\t\tlet ext = regex.exec(filename)[1];\n\t\treturn ext;\n\t};\n\n\tconst checkFileType = (filename) => {\n\t\tlet SUPPORTED_FORMATS = [\"jpg\", \"jpeg\", \"png\"];\n\t\tlet ext = getExtension(filename);\n\t\treturn SUPPORTED_FORMATS.includes(ext?.toLowerCase());\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<div className=\"preview-container\" style={props.containerStyles}>\n\t\t\t\t{previewImg && (\n\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t{previewAvailable ? (\n\t\t\t\t\t\t\t<React.Fragment>{props.zoom ? <ReactImageZoom {...{...zoomOptions, img: previewImg}} /> : <img src={previewImg} alt=\"Preview\" style={props.styles} />}</React.Fragment>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<FileIcon source={props.source} style={{width: 150}} />\n\t\t\t\t\t\t\t\t<div className=\"mt-4 text-center\">\n\t\t\t\t\t\t\t\t\t<a className=\"text-primary\" target=\"_blank\" rel=\"noreferrer\" href={CONFIG.API_BASE_URL + ApiConstants.file.download + \"?file_name=\" + props.source}>\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-download\" /> Download\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</React.Fragment>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default Preview;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/pending-entries/forms/form.js",["965","966"],"import React, {useState, useEffect} from \"react\";\nimport {Row, Col} from \"react-bootstrap\";\nimport {Formik, Field, Form, ErrorMessage} from \"formik\";\nimport * as Yup from \"yup\";\nimport Select from \"react-select\";\n\nimport {callApi} from \"../../../../services/apiService\";\n\nimport {showNotification} from \"../../../../services/toasterService\";\nimport {ApiConstants} from \"../../../../config/apiConstants\";\n\nconst UserForm = (props) => {\n\tconst [isSubmitted, setIsSubmitted] = useState(false);\n\tconst [countriesList, setCountriesList] = useState([]);\n\tconst [emiratesList, setEmiratesList] = useState([]);\n\tconst [selectedCountry, setSelectedCountry] = useState(\"\");\n\tconst [selectedEmirate, setSelectedEmirate] = useState(\"\");\n\tconst [userData, setUserData] = useState(null);\n\n\tconst UserFormSchema = Yup.object().shape({\n\t\tname: Yup.string().required(\"Please enter Name\"),\n\t\ttrn: Yup.string().required(\"Please enter TRN\"),\n\t\temail: Yup.string().required(\"Please enter Email\").email(\"Please enter a valid Email\"),\n\t\tcountry: Yup.string().required(\"Please select Country\"),\n\t\twhatsappno: Yup.string()\n\t\t\t.required(\"Please enter Whatsapp No\")\n\t\t\t.matches(/^[0-9]*$/, \"Please enter a valid phone number\"),\n\t\tbuilding_name: Yup.string(),\n\t\tplace: Yup.string(),\n\t\tpo_box: Yup.string(),\n\t\tcity: Yup.string(),\n\t\tregion: Yup.string(),\n\t});\n\n\tuseEffect(() => {\n\t\tgetContries();\n\t}, []);\n\n\tuseEffect(() => {\n\t\tif (props.isEdit && countriesList.length) {\n\t\t\tgetUserData(props?.dataItem?.id);\n\t\t}\n\t}, [countriesList]);\n\n\tconst onSubmit = (values) => {\n\t\tprops.onShowLoader(true);\n\n\t\tlet params = {\n\t\t\temail: values.email,\n\t\t\tw_country_code: selectedCountry.phone_code,\n\t\t\twhatsapp_no: values.whatsappno,\n\t\t\tname: values.name,\n\t\t\ttrn: values.trn,\n\t\t\tbuilding_name: values.building_name,\n\t\t\tcountry_id: parseInt(values.country),\n\t\t\tregion_id: parseInt(values.region),\n\t\t\tp_o_box: values.po_box,\n\t\t\tpalce: values.place,\n\t\t\tcity: values.city,\n\t\t};\n\n\t\tprops.isEdit ? updateUser({...params, user_id: userData?.id}) : createUser(params);\n\t};\n\n\tconst createUser = (params) => {\n\t\tcallApi(\"post\", ApiConstants.supplier.addsupplier, params)\n\t\t\t.then((response) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tif (response && response.status_code === 201) {\n\t\t\t\t\t// props.onSuccess();\n\t\t\t\t\tprops.getSuppliers();\n\t\t\t\t\tshowNotification(\"Success\", response.message, \"success\");\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\tconst updateUser = (params) => {\n\t\tcallApi(\"post\", ApiConstants.supplier.update, params, true)\n\t\t\t.then((response) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tif (response && response.status_code === 201) {\n\t\t\t\t\tprops.onSuccess();\n\t\t\t\t\tshowNotification(\"Success\", response.message, \"success\");\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\tconst getContries = () => {\n\t\tprops.onShowLoader(true);\n\t\tcallApi(\"get\", ApiConstants.lookups.getCountry, {})\n\t\t\t.then((response) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tsetCountriesList(\n\t\t\t\t\t\tresponse.payload?.map((i) => {\n\t\t\t\t\t\t\treturn {...i, value: i.id, label: i.name};\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\tconst onSelectCountry = (value) => {\n\t\tsetSelectedCountry(value);\n\t\tsetSelectedEmirate(\"\");\n\t\tsetEmiratesList(\n\t\t\tvalue.regions?.map((i) => {\n\t\t\t\treturn {...i, value: i.id, label: i.name};\n\t\t\t})\n\t\t);\n\t};\n\n\tconst getUserData = (user_id) => {\n\t\tprops.onShowLoader(true);\n\t\tcallApi(\"get\", ApiConstants.supplier.getsupplier, {user_id}, true)\n\t\t\t.then((response) => {\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tsetUserData(response.payload);\n\t\t\t\t\tlet selectedCountry = countriesList.find((i) => i.id === response.payload?.supplier_user?.country_id);\n\t\t\t\t\tif (selectedCountry) {\n\t\t\t\t\t\tonSelectCountry(selectedCountry);\n\t\t\t\t\t\tlet selectedRegion = selectedCountry.regions.find((i) => i.id === response.payload?.supplier_user?.region_id);\n\t\t\t\t\t\tsetSelectedEmirate({\n\t\t\t\t\t\t\t...selectedRegion,\n\t\t\t\t\t\t\tvalue: selectedRegion.id,\n\t\t\t\t\t\t\tlabel: selectedRegion.name,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t});\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<div className=\"card shadow-none mb-0 rounded\">\n\t\t\t\t{/* <div className=\"card-header\">\n          <h5 className=\"text-primary\">\n            {props.isEdit ? \"Update\" : \"Add\"} Supplier\n          </h5>\n        </div> */}\n\t\t\t\t<div className=\"card-body\">\n\t\t\t\t\t<Formik\n\t\t\t\t\t\tenableReinitialize={true}\n\t\t\t\t\t\tinitialValues={{\n\t\t\t\t\t\t\tname: userData?.name ? userData.name : \"\",\n\t\t\t\t\t\t\ttrn: userData?.supplier_user?.trn ? userData?.supplier_user.trn : \"\",\n\t\t\t\t\t\t\temail: userData?.email ? userData.email : \"\",\n\t\t\t\t\t\t\tbuilding_name: userData?.supplier_user?.building_name ? userData?.supplier_user.building_name : \"\",\n\t\t\t\t\t\t\tplace: userData?.supplier_user?.palce ? userData?.supplier_user.palce : \"\",\n\t\t\t\t\t\t\tpo_box: userData?.supplier_user?.p_o_box ? userData?.supplier_user.p_o_box : \"\",\n\t\t\t\t\t\t\tcity: userData?.supplier_user?.city ? userData?.supplier_user.city : \"\",\n\t\t\t\t\t\t\tcountry: userData?.supplier_user?.country_id ? userData?.supplier_user.country_id : \"\",\n\t\t\t\t\t\t\tregion: userData?.supplier_user?.region_id ? userData?.supplier_user.region_id : \"\",\n\t\t\t\t\t\t\twhatsappno: userData?.whatsapp_no ? userData.whatsapp_no : \"\",\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tvalidationSchema={UserFormSchema}\n\t\t\t\t\t\tonSubmit={(values) => onSubmit(values)}>\n\t\t\t\t\t\t{({errors, handleChange, setFieldValue, values}) => (\n\t\t\t\t\t\t\t<Form>\n\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t<Col xs={12} xl={6}>\n\t\t\t\t\t\t\t\t\t\t<label>Supplier Name</label>\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className={`form-control ${errors.name && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"Name\" name=\"name\" />\n\t\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"name\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t<Col xs={12} xl={6}>\n\t\t\t\t\t\t\t\t\t\t<label>TRN</label>\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className={`form-control ${errors.trn && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"TRN\" name=\"trn\" />\n\t\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"trn\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t<Col xs={12} xl={6}>\n\t\t\t\t\t\t\t\t\t\t<label>Email</label>\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className={`form-control ${errors.email && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"Email\" name=\"email\" />\n\t\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"email\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t<Col xs={12} xl={6}>\n\t\t\t\t\t\t\t\t\t\t<label>Building Name</label>\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className={`form-control ${errors.building_name && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"Building Name\" name=\"building_name\" />\n\t\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"building_name\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t<Col xs={12} xl={6}>\n\t\t\t\t\t\t\t\t\t\t<label>Place / Street name</label>\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className={`form-control ${errors.place && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"Place / Street name\" name=\"place\" />\n\t\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"place\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t<Col xs={12} xl={6}>\n\t\t\t\t\t\t\t\t\t\t<label>P O Box</label>\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className={`form-control ${errors.po_box && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"P O Box\" name=\"po_box\" />\n\t\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"po_box\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t<Col xs={12} xl={6}>\n\t\t\t\t\t\t\t\t\t\t<label>City</label>\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className={`form-control ${errors.city && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"City\" name=\"city\" />\n\t\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"city\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t<Col xs={12} xl={6}>\n\t\t\t\t\t\t\t\t\t\t<label>Country</label>\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={`w-100 form-control-select ${errors.country && isSubmitted ? \"is-invalid\" : \"\"}`}\n\t\t\t\t\t\t\t\t\t\t\t\tclassNamePrefix=\"select\"\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={countriesList.find((i) => i.id === values.country)}\n\t\t\t\t\t\t\t\t\t\t\t\toptions={countriesList}\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Select Country\"\n\t\t\t\t\t\t\t\t\t\t\t\tisSearchable={false}\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(value) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tonSelectCountry(value);\n\t\t\t\t\t\t\t\t\t\t\t\t\tlet event = {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttarget: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: \"country\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue: value.id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t\thandleChange(event);\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetFieldValue(\"region\", \"\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t}, 100);\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"country\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t<Col xs={12} xl={6}>\n\t\t\t\t\t\t\t\t\t\t<label>Emirate</label>\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={`w-100 form-control-select ${errors.region && isSubmitted ? \"is-invalid\" : \"\"}`}\n\t\t\t\t\t\t\t\t\t\t\t\tclassNamePrefix=\"select\"\n\t\t\t\t\t\t\t\t\t\t\t\toptions={emiratesList}\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Select Emirate\"\n\t\t\t\t\t\t\t\t\t\t\t\tisSearchable\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={selectedEmirate}\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(value) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetSelectedEmirate(value);\n\t\t\t\t\t\t\t\t\t\t\t\t\tlet event = {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttarget: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: \"region\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue: value.id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t\thandleChange(event);\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"region\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t<Col xs={12} xl={6}>\n\t\t\t\t\t\t\t\t\t\t<label>Whatsapp No</label>\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"input-group-prepend bg-light\">\n\t\t\t\t\t\t\t\t\t\t\t\t<span className={`input-group-text ${errors.whatsappno && isSubmitted ? \"border border-danger\" : \"\"}`} id=\"country-code\" style={{fontSize: 14}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{selectedCountry.phone_code}\n\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className={`form-control ${errors.whatsappno && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"Whatsapp No\" name=\"whatsappno\" />\n\t\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"whatsappno\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t</Row>\n\n\t\t\t\t\t\t\t\t<div className=\"mt-3 text-center\">\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t// type=\"submit\"\n\t\t\t\t\t\t\t\t\t\tstyle={{width: 180, fontWeight: \"bold\", marginRight: 20}}\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn btn-primary shadow-2 mt-3\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t// setIsSubmitted(true);\n\t\t\t\t\t\t\t\t\t\t\tprops.setSelectBox();\n\t\t\t\t\t\t\t\t\t\t\tprops.setSupplierForm(false);\n\t\t\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\t\tBack\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\t\t\t\tstyle={{width: 180, fontWeight: \"bold\"}}\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn btn-primary shadow-2 mt-3\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tsetIsSubmitted(true);\n\t\t\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\t\t{props.isEdit ? \"Update\" : \"Create Account\"}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</Form>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Formik>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default UserForm;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/components/FileIcon/index.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/pending-entries/forms/salesForm.js",["967"],"import React, {useState, useEffect, useRef} from \"react\";\r\nimport {Row, Col, Modal} from \"react-bootstrap\";\r\nimport {Formik, Field, Form, ErrorMessage} from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport moment from \"moment\";\r\nimport DatePicker from \"react-datepicker\";\r\n\r\nimport {callApi} from \"../../../../services/apiService\";\r\nimport {ApiConstants} from \"../../../../config/apiConstants\";\r\nimport {entryStatus} from \"../../../../enums/entryStatus\";\r\nimport {showNotification} from \"../../../../services/toasterService\";\r\n\r\nconst SalesForm = (props) => {\r\n\tconst [isSubmitted, setIsSubmitted] = useState(false);\r\n\tconst [invoiceDate, setinvoiceDate] = useState(null);\r\n\tconst [salesData, setsalesData] = useState(null);\r\n\tconst [showRecheckInvoice, setshowRecheckInvoice] = useState(false);\r\n\tconst [showStatusConfirm, setStatusConfirm] = React.useState(false);\r\n\tconst [validatorAction, setvalidatorAction] = React.useState(\"\");\r\n\tconst [enableRecheck, setenableRecheck] = useState(false);\r\n\tconst actionComment = useRef(null);\r\n\r\n\tconst SalesFormSchema = Yup.object().shape({\r\n\t\tinvoice_date: Yup.mixed().required(\"Please select Date\"),\r\n\t\tamount: Yup.string()\r\n\t\t\t.required(\"Please enter Amount\")\r\n\t\t\t.matches(/((\\+|-)?([0-9]+)(\\.[0-9]+)?)|((\\+|-)?\\.?[0-9]+)/, \"Please enter a valid int Amount\"),\r\n\t\tcomments: Yup.string().required(\"Please enter Comments\"),\r\n\t\tinvoice_number: Yup.string().required(\"Please enter Invoice number\"),\r\n\t\tamount_exclude_vat: Yup.string(),\r\n\t\tvat_amount: Yup.string(),\r\n\t});\r\n\r\n\tuseEffect(() => {\r\n\t\tif (props.entry?.entry_status_id === entryStatus.RECHECK) {\r\n\t\t\tgetData();\r\n\t\t}\r\n\t}, []);\r\n\t// REJECT ACTION\r\n\tconst entryAction = () => {\r\n\t\t// props.onShowLoader(true);\r\n\t\tlet params = {\r\n\t\t\tentry_id: props.entry.id,\r\n\t\t\tstatus_id: validatorAction,\r\n\t\t\tcomment: actionComment.current.value,\r\n\t\t};\r\n\t\tconsole.log(params);\r\n\t\tcallApi(\"post\", ApiConstants.entry.setcheckerstatus, params, true)\r\n\t\t\t.then((response) => {\r\n\t\t\t\tconsole.log(response);\r\n\t\t\t\tprops.onShowLoader(false);\r\n\t\t\t\tif (response && response.status_code === 200) {\r\n\t\t\t\t\tprops.onSuccess();\r\n\t\t\t\t\tshowNotification(\"Success\", response.message, \"success\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t\tprops.onShowLoader(false);\r\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\r\n\t\t\t});\r\n\t};\r\n\t// REJECT ACTION\r\n\r\n\tconst getData = () => {\r\n\t\tprops.onShowLoader(true);\r\n\t\tlet params = {entry_id: props.entry.id};\r\n\t\tcallApi(\"get\", ApiConstants.sales.getData, params, true)\r\n\t\t\t.then((response) => {\r\n\t\t\t\tprops.onShowLoader(false);\r\n\t\t\t\tif (response && response.status_code === 200) {\r\n\t\t\t\t\tsetsalesData(response.payload);\r\n\t\t\t\t\tsetinvoiceDate(new Date(response.payload.invoice_date));\r\n\t\t\t\t} else {\r\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tprops.onShowLoader(false);\r\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\r\n\t\t\t});\r\n\t};\r\n\r\n\tconst checkInvoiceNumberExists = (invoice_number) =>\r\n\t\tnew Promise((resolve, reject) => {\r\n\t\t\tcallApi(\"get\", ApiConstants.entry.checkinvoicenumberexists + \"?invoice_number=\" + invoice_number, null, true)\r\n\t\t\t\t.then((response) => {\r\n\t\t\t\t\tif (response && response.status_code === 200) {\r\n\t\t\t\t\t\tresolve(response.payload.is_invoice_number_exist);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tprops.onShowLoader(false);\r\n\t\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.catch((error) => {\r\n\t\t\t\t\tprops.onShowLoader(false);\r\n\t\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\r\n\t\t\t\t});\r\n\t\t});\r\n\tconst onSubmit = async (values) => {\r\n\t\tprops.onShowLoader(true);\r\n\t\tlet isInvoiceExists = false;\r\n\t\tisInvoiceExists = await checkInvoiceNumberExists(values.invoice_number);\r\n\t\tif (isInvoiceExists) {\r\n\t\t\tprops.onShowLoader(false);\r\n\t\t\tsetshowRecheckInvoice(true);\r\n\t\t\tsetsalesData(values);\r\n\t\t} else {\r\n\t\t\tsaveFormData(values);\r\n\t\t}\r\n\t};\r\n\tconst saveFormData = (values) => {\r\n\t\tprops.onShowLoader(true);\r\n\t\tlet params = {\r\n\t\t\tentry_id: props.entry.id,\r\n\t\t\tinvoice_date: moment(values.invoice_date).format(\"YYYY-MM-DD\"),\r\n\t\t\tamount: parseFloat(values.amount),\r\n\t\t\tamount_exclude_vat: parseFloat(values.amount_exclude_vat),\r\n\t\t\tvat_amount: parseFloat(values.vat_amount),\r\n\t\t\tcomments: values.comments,\r\n\t\t\tinvoice_number: values.invoice_number,\r\n\t\t};\r\n\t\tcallApi(\"post\", ApiConstants.sales.create, params, true)\r\n\t\t\t.then((response) => {\r\n\t\t\t\tprops.onShowLoader(false);\r\n\t\t\t\tif (response && response.status_code === 201) {\r\n\t\t\t\t\tprops.onSuccess();\r\n\t\t\t\t\tshowNotification(\"Success\", response.message, \"success\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tprops.onShowLoader(false);\r\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\r\n\t\t\t});\r\n\t};\r\n\r\n\tconst calculateAmtExclVat = (amount) => {\r\n\t\tif (isNaN(amount)) return 0;\r\n\t\telse return ((amount * 100) / (100 + props.entry.vat_percentage)).toFixed(2);\r\n\t};\r\n\r\n\tconst calculateVatAmt = (amount, amt_excl_vat) => {\r\n\t\tif (isNaN(amount)) return 0;\r\n\t\telse return (amount - amt_excl_vat).toFixed(2);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<div>\r\n\t\t\t\t<Formik\r\n\t\t\t\t\tenableReinitialize={true}\r\n\t\t\t\t\tinitialValues={{\r\n\t\t\t\t\t\tinvoice_date: salesData?.invoice_date ? new Date(salesData?.invoice_date) : \"\",\r\n\t\t\t\t\t\tamount: salesData?.amount ? salesData?.amount : \"\",\r\n\t\t\t\t\t\tcomments: salesData?.comments ? salesData?.comments : \"\",\r\n\t\t\t\t\t\tinvoice_number: salesData?.invoice_number ? salesData?.invoice_number : \"\",\r\n\t\t\t\t\t\tamount_exclude_vat: salesData?.amount_exclude_vat ? salesData?.amount_exclude_vat : \"\",\r\n\t\t\t\t\t\tvat_amount: salesData?.vat_amount ? salesData?.vat_amount : \"\",\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tvalidationSchema={SalesFormSchema}\r\n\t\t\t\t\tonSubmit={(values) => onSubmit(values)}>\r\n\t\t\t\t\t{({errors, handleChange, setFieldValue}) => (\r\n\t\t\t\t\t\t<Form>\r\n\t\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t\t<Col xs={12}>\r\n\t\t\t\t\t\t\t\t\t<div className=\"date-picker-container mb-3\">\r\n\t\t\t\t\t\t\t\t\t\t<DatePicker\r\n\t\t\t\t\t\t\t\t\t\t\tclassName={`form-control ${errors.invoice_date && isSubmitted ? \"is-invalid\" : \"\"}`}\r\n\t\t\t\t\t\t\t\t\t\t\tplaceholderText=\"Date\"\r\n\t\t\t\t\t\t\t\t\t\t\tdateFormat=\"dd/MM/yyyy\"\r\n\t\t\t\t\t\t\t\t\t\t\tselected={invoiceDate}\r\n\t\t\t\t\t\t\t\t\t\t\tminDate={new Date(props?.vatPeriod?.current_vat_period?.start_period_date?.date)}\r\n\t\t\t\t\t\t\t\t\t\t\tmaxDate={new Date(props?.vatPeriod?.current_vat_period?.end_period_date?.date)}\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={(value) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\tsetinvoiceDate(value);\r\n\t\t\t\t\t\t\t\t\t\t\t\tlet event = {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttarget: {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: \"invoice_date\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue: value,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t\t\t\t\thandleChange(event);\r\n\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-calendar\"></i>\r\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"invoice_date\">{(msg) => <div className=\"invalid-feedback d-block\">{msg}</div>}</ErrorMessage>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t<Col xs={12}>\r\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\r\n\t\t\t\t\t\t\t\t\t\t<Field\r\n\t\t\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\t\t\tclassName={`form-control ${errors.amount && isSubmitted ? \"is-invalid\" : \"\"}`}\r\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Amount\"\r\n\t\t\t\t\t\t\t\t\t\t\tname=\"amount\"\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\tlet value = e.target.value;\r\n\t\t\t\t\t\t\t\t\t\t\t\tlet amt_excl_vat = calculateAmtExclVat(value);\r\n\t\t\t\t\t\t\t\t\t\t\t\tlet vat_amt = calculateVatAmt(value, amt_excl_vat);\r\n\t\t\t\t\t\t\t\t\t\t\t\tsetFieldValue(\"amount_exclude_vat\", amt_excl_vat);\r\n\t\t\t\t\t\t\t\t\t\t\t\tsetFieldValue(\"vat_amount\", vat_amt);\r\n\t\t\t\t\t\t\t\t\t\t\t\tlet event = {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttarget: {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: \"amount\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue: value,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t\t\t\t\thandleChange(event);\r\n\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"amount\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t<Col xs={12}>\r\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\r\n\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className={`form-control ${errors.comments && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"Comments\" name=\"comments\" />\r\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"comments\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t<Col xs={12}>\r\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\r\n\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className={`form-control ${errors.invoice_number && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"Invoice Number\" name=\"invoice_number\" />\r\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"invoice_number\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t<Col xs={12}>\r\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\r\n\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className={`form-control ${errors.amount_exclude_vat && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"Amount Exclude Vat\" name=\"amount_exclude_vat\" />\r\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"amount_exclude_vat\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t<Col xs={12}>\r\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\r\n\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className={`form-control ${errors.vat_amount && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"Vat Amount\" name=\"vat_amount\" />\r\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"vat_amount\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t\t<div className=\"mt-4\">\r\n\t\t\t\t\t\t\t\t<div className=\"checkbox d-flex p-0\">\r\n\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" name=\"checkbox-fill-1\" id=\"checkbox-fill-a1\" onChange={() => setenableRecheck(!enableRecheck)} />\r\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"checkbox-fill-a1\" className=\"cr\">\r\n\t\t\t\t\t\t\t\t\t\tEnable Reject Entry\r\n\t\t\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"mt-3 text-center\">\r\n\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\t\t\t\tdisabled={!enableRecheck}\r\n\t\t\t\t\t\t\t\t\tstyle={{width: 100, fontWeight: \"bold\"}}\r\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-danger shadow-2 mt-3 mr-3\"\r\n\t\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\t\tsetStatusConfirm(true);\r\n\t\t\t\t\t\t\t\t\t\tsetvalidatorAction(entryStatus.REJECTED);\r\n\t\t\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t\t\tReject\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t<button type=\"submit\" style={{width: 180, fontWeight: \"bold\"}} className=\"btn btn-primary shadow-2 mt-3\" onClick={() => setIsSubmitted(true)}>\r\n\t\t\t\t\t\t\t\t\tSubmit\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</Form>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</Formik>\r\n\t\t\t</div>\r\n\t\t\t<Modal size=\"md\" show={showRecheckInvoice} backdrop=\"static\" keyboard={true} backdropClassName=\"nested-modal\">\r\n\t\t\t\t<Modal.Header>\r\n\t\t\t\t\t<h5 className=\"card-title\">Warning!</h5>\r\n\t\t\t\t</Modal.Header>\r\n\t\t\t\t<Modal.Body>\r\n\t\t\t\t\t<div>The Invoice ID is already used. Do you want to proceed with this?</div>\r\n\t\t\t\t</Modal.Body>\r\n\t\t\t\t<Modal.Footer>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<button className=\"btn btn-outline-warning\" onClick={() => setshowRecheckInvoice(false)}>\r\n\t\t\t\t\t\t\tNo\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tclassName=\"btn btn-warning\"\r\n\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\tsetshowRecheckInvoice(false);\r\n\t\t\t\t\t\t\t\tsaveFormData(salesData);\r\n\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\tYes\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Modal.Footer>\r\n\t\t\t</Modal>\r\n\t\t\t<Modal size=\"md\" show={showStatusConfirm} backdrop=\"static\" keyboard={true} backdropClassName=\"nested-modal\">\r\n\t\t\t\t<Modal.Header>\r\n\t\t\t\t\t<h5 className=\"card-title\">{validatorAction === entryStatus.APPROVED ? \"Approve\" : validatorAction === entryStatus.RECHECK ? \"Recheck\" : \"Reject\"} Entry</h5>\r\n\t\t\t\t</Modal.Header>\r\n\t\t\t\t<Modal.Body>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<span>Are you sure you want to {validatorAction === entryStatus.APPROVED ? \"Approve\" : validatorAction === entryStatus.RECHECK ? \"Recheck\" : \"Reject\"} the Entry?</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"mt-4\">\r\n\t\t\t\t\t\t<textarea ref={actionComment} className=\"form-control\" placeholder=\"Comment\"></textarea>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Modal.Body>\r\n\t\t\t\t<Modal.Footer>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<button className=\"btn btn-outline-primary\" onClick={() => setStatusConfirm(false)}>\r\n\t\t\t\t\t\t\tCancel\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tclassName={`btn ${validatorAction === entryStatus.APPROVED ? \"btn-primary\" : validatorAction === entryStatus.RECHECK ? \"btn-warning\" : \"btn-danger\"}`}\r\n\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\tsetStatusConfirm(false);\r\n\t\t\t\t\t\t\t\tentryAction();\r\n\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t{validatorAction === entryStatus.APPROVED ? \"Approve\" : validatorAction === entryStatus.RECHECK ? \"Recheck\" : \"Reject\"}\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Modal.Footer>\r\n\t\t\t</Modal>\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default SalesForm;\r\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/pending-entries/forms/expenditureForm.js",["968","969"],"import React, { useState, useEffect,useRef } from \"react\";\r\nimport { Row, Col, Modal } from \"react-bootstrap\";\r\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport moment from \"moment\";\r\nimport Select from \"react-select\";\r\n\r\nimport { callApi } from \"../../../../services/apiService\";\r\nimport { ApiConstants } from \"../../../../config/apiConstants\";\r\nimport { entryStatus } from \"../../../../enums/entryStatus\";\r\nimport { showNotification } from \"../../../../services/toasterService\";\r\n\r\nconst ExpenditureForm = (props) => {\r\n\tconst [isSubmitted, setIsSubmitted] = useState(false);\r\n\tconst [invoiceDate, setinvoiceDate] = useState(null);\r\n\tconst [expenditureData, setexpenditureData] = useState(null);\r\n\tconst [groupsList, setGroupsList] = useState([]);\r\n\tconst [subGroupsList, setSubGroupsList] = useState([]);\r\n\tconst [itemsList, setItemsList] = useState([]);\r\n\tconst [selectedSubgroup, setSelectedSubgroup] = useState(\"\");\r\n\tconst [selectedGroupItem, setSelectedGroupItem] = useState(\"\");\r\n\tconst [showRecheckInvoice, setshowRecheckInvoice] = useState(false);\r\n\r\n\tconst [showStatusConfirm, setStatusConfirm] = React.useState(false);\r\n\tconst [validatorAction, setvalidatorAction] = React.useState(\"\");\r\n\tconst [enableRecheck, setenableRecheck] = useState(false);\r\n\tconst actionComment = useRef(null);\r\n\r\n\t// REJECT ACTION\r\n\tconst entryAction = () => {\r\n\t\t// props.onShowLoader(true);\r\n\t\tlet params = {\r\n\t\t\tentry_id: props.entry.id,\r\n\t\t\tstatus_id: validatorAction,\r\n\t\t\tcomment: actionComment.current.value,\r\n\t\t};\r\n\t\tconsole.log(params);\r\n\t\tcallApi(\"post\", ApiConstants.entry.setcheckerstatus, params, true)\r\n\t\t\t.then((response) => {\r\n\t\t\t\tprops.onShowLoader(false);\r\n\t\t\t\tif (response && response.status_code === 200) {\r\n\t\t\t\t\tprops.onSuccess();\r\n\t\t\t\t\tshowNotification(\"Success\", response.message, \"success\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tprops.onShowLoader(false);\r\n\t\t\t\tshowNotification(\"Error\", `Something went wrong`, \"error\");\r\n\t\t\t});\r\n\t};\r\n\t// REJECT ACTION\r\n\r\n\tconst ExpenditureFormSchema = Yup.object().shape({\r\n\t\tinvoice_date: Yup.mixed().required(\"Please select Date\"),\r\n\t\tamount: Yup.string()\r\n\t\t\t.required(\"Please enter Amount\")\r\n\t\t\t.matches(/((\\+|-)?([0-9]+)(\\.[0-9]+)?)|((\\+|-)?\\.?[0-9]+)/, \"Please enter a valid Amount\"),\r\n\t\tcomments: Yup.string().required(\"Please enter Comment\"),\r\n\t\tvat_amount: Yup.number(),\r\n\t\tinvoice_number: Yup.string().required(\"Please enter Invoice number\"),\r\n\t\tinvoice_group_id: Yup.string().required(\"Please enter Group\"),\r\n\t\tinvoice_sub_group_id: Yup.string().required(\"Please enter Sub Group\"),\r\n\t\tinvoice_item_id: Yup.string().required(\"Please select Item\"),\r\n\t});\r\n\r\n\tuseEffect(() => {\r\n\t\tinvoiceExpGroups();\r\n\t}, []);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (groupsList.length) {\r\n\t\t\tif (props.entry?.entry_status_id === entryStatus.RECHECK) {\r\n\t\t\t\tgetData();\r\n\t\t\t}\r\n\t\t}\r\n\t}, [groupsList]);\r\n\r\n\tconst getData = () => {\r\n\t\tprops.onShowLoader(true);\r\n\t\tlet params = {entry_id: props.entry.id};\r\n\t\tcallApi(\"get\", ApiConstants.expenditure.getData, params, true)\r\n\t\t\t.then((response) => {\r\n\t\t\t\tprops.onShowLoader(false);\r\n\t\t\t\tif (response && response.status_code === 200) {\r\n\t\t\t\t\tsetexpenditureData(response.payload);\r\n\t\t\t\t\tsetinvoiceDate(new Date(response.payload.invoice_date));\r\n\t\t\t\t\tlet group = groupsList.find((i) => i.id === response.payload.invoice_group_id);\r\n\t\t\t\t\tonChangeGroups(group);\r\n\t\t\t\t\tlet subgroup = group.invoice_sub_groups.find((i) => i.id === response.payload.invoice_sub_group_id);\r\n\t\t\t\t\tonChangeSubGroups(subgroup);\r\n\r\n\t\t\t\t\tlet groupitem = subgroup.invoice_items.find((i) => i.id === response.payload.invoice_item_id);\r\n\t\t\t\t\tsetSelectedGroupItem({\r\n\t\t\t\t\t\t...groupitem,\r\n\t\t\t\t\t\tvalue: groupitem.id,\r\n\t\t\t\t\t\tlabel: groupitem.name,\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tprops.onShowLoader(false);\r\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\r\n\t\t\t});\r\n\t};\r\n\r\n\tconst checkInvoiceNumberExists = (invoice_number) =>\r\n\t\tnew Promise((resolve, reject) => {\r\n\t\t\tcallApi(\"get\", ApiConstants.entry.checkinvoicenumberexists + \"?invoice_number=\" + invoice_number, null, true)\r\n\t\t\t\t.then((response) => {\r\n\t\t\t\t\tif (response && response.status_code === 200) {\r\n\t\t\t\t\t\tresolve(response.payload.is_invoice_number_exist);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tprops.onShowLoader(false);\r\n\t\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.catch((error) => {\r\n\t\t\t\t\tprops.onShowLoader(false);\r\n\t\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\r\n\t\t\t\t});\r\n\t\t});\r\n\r\n\tconst onSubmit = async (values) => {\r\n\t\tprops.onShowLoader(true);\r\n\t\tlet isInvoiceExists = false;\r\n\t\tisInvoiceExists = await checkInvoiceNumberExists(values.invoice_number);\r\n\t\tif (isInvoiceExists) {\r\n\t\t\tprops.onShowLoader(false);\r\n\t\t\tsetshowRecheckInvoice(true);\r\n\t\t\tsetexpenditureData(values);\r\n\t\t} else {\r\n\t\t\tsaveFormData(values);\r\n\t\t}\r\n\t};\r\n\r\n\tconst saveFormData = (values) => {\r\n\t\tprops.onShowLoader(true);\r\n\t\tlet params = {\r\n\t\t\tentry_id: props.entry.id,\r\n\t\t\tinvoice_date: moment(values.invoice_date).format(\"YYYY-MM-DD\"),\r\n\t\t\tamount: parseFloat(values.amount),\r\n\t\t\tcomments: values.comments,\r\n\t\t\tvat_amount: values.vat_amount,\r\n\t\t\tinvoice_number: values.invoice_number,\r\n\t\t\tinvoice_group_id: values.invoice_group_id,\r\n\t\t\tinvoice_sub_group_id: values.invoice_sub_group_id,\r\n\t\t\tinvoice_item_id: values.invoice_item_id,\r\n\t\t};\r\n\t\tcallApi(\"post\", ApiConstants.expenditure.create, params, true)\r\n\t\t\t.then((response) => {\r\n\t\t\t\tprops.onShowLoader(false);\r\n\t\t\t\tif (response && response.status_code === 201) {\r\n\t\t\t\t\tprops.onSuccess();\r\n\t\t\t\t\tshowNotification(\"Success\", response.message, \"success\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tprops.onShowLoader(false);\r\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\r\n\t\t\t});\r\n\t};\r\n\r\n\tconst invoiceExpGroups = () => {\r\n\t\tprops.onShowLoader(true);\r\n\t\tcallApi(\"get\", ApiConstants.lookups.invoiceexpgroups, null)\r\n\t\t\t.then((response) => {\r\n\t\t\t\tprops.onShowLoader(false);\r\n\t\t\t\tif (response && response.status_code === 200) {\r\n\t\t\t\t\tlet data = response.payload.map((i) => {\r\n\t\t\t\t\t\treturn {...i, value: i.id, label: i.name};\r\n\t\t\t\t\t});\r\n\t\t\t\t\tsetGroupsList(data);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tprops.onShowLoader(false);\r\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\r\n\t\t\t});\r\n\t};\r\n\r\n\tconst onChangeGroups = (value) => {\r\n\t\tlet subGroups = value?.invoice_sub_groups?.map((i) => {\r\n\t\t\treturn {...i, value: i.id, label: i.name};\r\n\t\t});\r\n\t\tsetSubGroupsList(subGroups);\r\n\t};\r\n\r\n\tconst onChangeSubGroups = (value) => {\r\n\t\tlet items = value?.invoice_items?.map((i) => {\r\n\t\t\treturn {...i, value: i.id, label: i.name};\r\n\t\t});\r\n\t\tsetItemsList(items);\r\n\t\tsetSelectedSubgroup({...value, value: value.id, label: value.name});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<div>\r\n\t\t\t\t<Formik\r\n\t\t\t\t\tenableReinitialize={true}\r\n\t\t\t\t\tinitialValues={{\r\n\t\t\t\t\t\tinvoice_date: expenditureData?.invoice_date ? new Date(expenditureData?.invoice_date) : \"\",\r\n\t\t\t\t\t\tamount: expenditureData?.amount ? expenditureData?.amount : \"\",\r\n\t\t\t\t\t\tcomments: expenditureData?.comments ? expenditureData?.comments : \"\",\r\n\t\t\t\t\t\tvat_amount: expenditureData?.vat_amount ? expenditureData?.vat_amount : \"\",\r\n\t\t\t\t\t\tinvoice_number: expenditureData?.invoice_number ? expenditureData?.invoice_number : \"\",\r\n\t\t\t\t\t\tinvoice_group_id: expenditureData?.invoice_group_id ? expenditureData?.invoice_group_id : \"\",\r\n\t\t\t\t\t\tinvoice_sub_group_id: expenditureData?.invoice_sub_group_id ? expenditureData?.invoice_sub_group_id : \"\",\r\n\t\t\t\t\t\tinvoice_item_id: expenditureData?.invoice_item_id ? expenditureData?.invoice_item_id : \"\",\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tvalidationSchema={ExpenditureFormSchema}\r\n\t\t\t\t\tonSubmit={(values) => onSubmit(values)}>\r\n\t\t\t\t\t{({errors, handleChange, setFieldValue, values}) => (\r\n\t\t\t\t\t\t<Form>\r\n\t\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t\t<Col xs={12}>\r\n\t\t\t\t\t\t\t\t\t<div className=\"date-picker-container mb-3\">\r\n\t\t\t\t\t\t\t\t\t\t<DatePicker\r\n\t\t\t\t\t\t\t\t\t\t\tclassName={`form-control ${errors.invoice_date && isSubmitted ? \"is-invalid\" : \"\"}`}\r\n\t\t\t\t\t\t\t\t\t\t\tplaceholderText=\"Date\"\r\n\t\t\t\t\t\t\t\t\t\t\tdateFormat=\"dd/MM/yyyy\"\r\n\t\t\t\t\t\t\t\t\t\t\tselected={invoiceDate}\r\n\t\t\t\t\t\t\t\t\t\t\tminDate={new Date(props?.vatPeriod?.current_vat_period?.start_period_date?.date)}\r\n\t\t\t\t\t\t\t\t\t\t\tmaxDate={new Date(props?.vatPeriod?.current_vat_period?.end_period_date?.date)}\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={(value) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\tsetinvoiceDate(value);\r\n\t\t\t\t\t\t\t\t\t\t\t\tlet event = {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttarget: {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: \"invoice_date\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue: value,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t\t\t\t\thandleChange(event);\r\n\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-calendar\"></i>\r\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"invoice_date\">{(msg) => <div className=\"invalid-feedback d-block\">{msg}</div>}</ErrorMessage>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\r\n\t\t\t\t\t\t\t\t<Col xs={12}>\r\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\r\n\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className={`form-control ${errors.amount && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"Amount\" name=\"amount\" />\r\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"amount\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\r\n\t\t\t\t\t\t\t\t<Col xs={12}>\r\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\r\n\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className={`form-control ${errors.comments && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"Comments\" name=\"comments\" />\r\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"comments\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t<Col xs={12}>\r\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\r\n\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className={`form-control ${errors.vat_amount && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"VAT Amount\" name=\"vat_amount\" />\r\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"vat_amount\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\r\n\t\t\t\t\t\t\t\t<Col xs={12}>\r\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\r\n\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className={`form-control ${errors.invoice_number && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"Invoice Number\" name=\"invoice_number\" />\r\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"invoice_number\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t<Col xs={12}>\r\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\r\n\t\t\t\t\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\t\t\t\t\tclassName={`w-100 form-control-select ${errors.invoice_group_id && isSubmitted ? \"is-invalid\" : \"\"}`}\r\n\t\t\t\t\t\t\t\t\t\t\tclassNamePrefix=\"select\"\r\n\t\t\t\t\t\t\t\t\t\t\toptions={groupsList}\r\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Group\"\r\n\t\t\t\t\t\t\t\t\t\t\tisSearchable={false}\r\n\t\t\t\t\t\t\t\t\t\t\tvalue={groupsList.find((i) => i.value === values?.invoice_group_id)}\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={(value) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\tonChangeGroups(value);\r\n\t\t\t\t\t\t\t\t\t\t\t\tlet event = {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttarget: {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: \"invoice_group_id\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue: value.id,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t\t\t\t\thandleChange(event);\r\n\t\t\t\t\t\t\t\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetFieldValue(\"invoice_sub_group_id\", \"\");\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetFieldValue(\"invoice_item_id\", \"\");\r\n\t\t\t\t\t\t\t\t\t\t\t\t}, 100);\r\n\t\t\t\t\t\t\t\t\t\t\t\tsetSelectedSubgroup(\"\");\r\n\t\t\t\t\t\t\t\t\t\t\t\tsetSelectedGroupItem(\"\");\r\n\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"invoice_group_id\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t<Col xs={12}>\r\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\r\n\t\t\t\t\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\t\t\t\t\tclassName={`w-100 form-control-select ${errors.invoice_sub_group_id && isSubmitted ? \"is-invalid\" : \"\"}`}\r\n\t\t\t\t\t\t\t\t\t\t\tclassNamePrefix=\"select\"\r\n\t\t\t\t\t\t\t\t\t\t\toptions={subGroupsList}\r\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Sub Group\"\r\n\t\t\t\t\t\t\t\t\t\t\tisSearchable={false}\r\n\t\t\t\t\t\t\t\t\t\t\tvalue={selectedSubgroup}\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={(value) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\tonChangeSubGroups(value);\r\n\t\t\t\t\t\t\t\t\t\t\t\tlet event = {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttarget: {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: \"invoice_sub_group_id\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue: value.id,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t\t\t\t\thandleChange(event);\r\n\t\t\t\t\t\t\t\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetFieldValue(\"invoice_item_id\", \"\");\r\n\t\t\t\t\t\t\t\t\t\t\t\t}, 100);\r\n\t\t\t\t\t\t\t\t\t\t\t\tsetSelectedGroupItem(\"\");\r\n\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"invoice_sub_group_id\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t<Col xs={12}>\r\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\r\n\t\t\t\t\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\t\t\t\t\tclassName={`w-100 form-control-select ${errors.invoice_item_id && isSubmitted ? \"is-invalid\" : \"\"}`}\r\n\t\t\t\t\t\t\t\t\t\t\tclassNamePrefix=\"select\"\r\n\t\t\t\t\t\t\t\t\t\t\toptions={itemsList}\r\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Items\"\r\n\t\t\t\t\t\t\t\t\t\t\tisSearchable={false}\r\n\t\t\t\t\t\t\t\t\t\t\tvalue={selectedGroupItem}\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={(value) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\tlet event = {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttarget: {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: \"invoice_item_id\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue: value.id,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t\t\t\t\thandleChange(event);\r\n\t\t\t\t\t\t\t\t\t\t\t\tsetSelectedGroupItem(value);\r\n\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"invoice_item_id\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t</Row>\r\n\r\n\t\t\t\t\t\t\t<div className=\"mt-4\">\r\n\t\t\t\t\t\t\t\t<div className=\"checkbox d-flex p-0\">\r\n\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" name=\"checkbox-fill-1\" id=\"checkbox-fill-a1\" onChange={() => setenableRecheck(!enableRecheck)} />\r\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"checkbox-fill-a1\" className=\"cr\">\r\n\t\t\t\t\t\t\t\t\t\tEnable Reject Entry\r\n\t\t\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"text-center\">\r\n\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\t\t\t\tdisabled={!enableRecheck}\r\n\t\t\t\t\t\t\t\t\tstyle={{width: 100, fontWeight: \"bold\"}}\r\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-danger shadow-2 mt-3 mr-3\"\r\n\t\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\t\tsetStatusConfirm(true);\r\n\t\t\t\t\t\t\t\t\t\tsetvalidatorAction(entryStatus.REJECTED);\r\n\t\t\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t\t\tReject\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t<button type=\"submit\" style={{width: 180, fontWeight: \"bold\"}} className=\"btn btn-primary shadow-2 mt-3\" onClick={() => setIsSubmitted(true)}>\r\n\t\t\t\t\t\t\t\t\tSubmit\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</Form>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</Formik>\r\n\t\t\t</div>\r\n\t\t\t<Modal size=\"md\" show={showRecheckInvoice} backdrop=\"static\" keyboard={true} backdropClassName=\"nested-modal\">\r\n\t\t\t\t<Modal.Header>\r\n\t\t\t\t\t<h5 className=\"card-title\">Warning!</h5>\r\n\t\t\t\t</Modal.Header>\r\n\t\t\t\t<Modal.Body>\r\n\t\t\t\t\t<div>The Invoice ID is already used. Do you want to proceed with this?</div>\r\n\t\t\t\t</Modal.Body>\r\n\t\t\t\t<Modal.Footer>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<button className=\"btn btn-outline-warning\" onClick={() => setshowRecheckInvoice(false)}>\r\n\t\t\t\t\t\t\tNo\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tclassName=\"btn btn-warning\"\r\n\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\tsetshowRecheckInvoice(false);\r\n\t\t\t\t\t\t\t\tsaveFormData(expenditureData);\r\n\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\tYes\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Modal.Footer>\r\n\t\t\t</Modal>\r\n\t\t\t<Modal size=\"md\" show={showStatusConfirm} backdrop=\"static\" keyboard={true} backdropClassName=\"nested-modal\">\r\n\t\t\t\t<Modal.Header>\r\n\t\t\t\t\t<h5 className=\"card-title\">{validatorAction === entryStatus.APPROVED ? \"Approve\" : validatorAction === entryStatus.RECHECK ? \"Recheck\" : \"Reject\"} Entry</h5>\r\n\t\t\t\t</Modal.Header>\r\n\t\t\t\t<Modal.Body>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<span>Are you sure you want to {validatorAction === entryStatus.APPROVED ? \"Approve\" : validatorAction === entryStatus.RECHECK ? \"Recheck\" : \"Reject\"} the Entry?</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"mt-4\">\r\n\t\t\t\t\t\t<textarea ref={actionComment} className=\"form-control\" placeholder=\"Comment\"></textarea>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Modal.Body>\r\n\t\t\t\t<Modal.Footer>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<button className=\"btn btn-outline-primary\" onClick={() => setStatusConfirm(false)}>\r\n\t\t\t\t\t\t\tCancel\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tclassName={`btn ${validatorAction === entryStatus.APPROVED ? \"btn-primary\" : validatorAction === entryStatus.RECHECK ? \"btn-warning\" : \"btn-danger\"}`}\r\n\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\tsetStatusConfirm(false);\r\n\t\t\t\t\t\t\t\tentryAction();\r\n\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t{validatorAction === entryStatus.APPROVED ? \"Approve\" : validatorAction === entryStatus.RECHECK ? \"Recheck\" : \"Reject\"}\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Modal.Footer>\r\n\t\t\t</Modal>\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default ExpenditureForm;\r\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/validator-checked-entries/forms/purchaseForm.js",["970","971","972","973","974","975"],"import React, { useState, useEffect } from \"react\";\nimport { Row, Col, Table } from \"react-bootstrap\";\nimport { Formik, Field, Form, ErrorMessage, FieldArray } from \"formik\";\nimport * as Yup from \"yup\";\nimport DatePicker from \"react-datepicker\";\nimport Select from \"react-select\";\n\nimport { callApi } from \"../../../../services/apiService\";\nimport { ApiConstants } from \"../../../../config/apiConstants\";\nimport { entryStatus } from \"../../../../enums/entryStatus\";\nimport { showNotification } from \"../../../../services/toasterService\";\n\nconst PurchaseForm = (props) => {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [invoiceDate, setinvoiceDate] = useState(null);\n  const [purchaseData, setPurchaseData] = useState(null);\n  const [groupsList, setGroupsList] = useState([]);\n  const [suppliersList, setSuppliersList] = useState([]);\n\n  const PurchaseFormSchema = Yup.object().shape({\n    supplier_id: Yup.mixed().required(\"Please select Supplier\"),\n    trn: Yup.string(),\n    invoice_number: Yup.string().required(\"Please enter Invoice number\"),\n    invoice_date: Yup.mixed().required(\"Please select Date\"),\n    invoice_details: Yup.array().of(\n      Yup.object().shape({\n        invoice_group_id: Yup.string().required(\"Please select Group\"),\n        invoice_sub_group_id: Yup.string().required(\"Please select Sub Group\"),\n        invoice_item_id: Yup.string().required(\"Please select Item\"),\n        unit_price: Yup.string().required(\"Please enter Unit Price\"),\n        quantity: Yup.string().required(\"Please enter Quantity\"),\n        amount: Yup.string().required(\"Please enter Amount\"),\n      })\n    ),\n    subtotal: Yup.string(),\n    discount: Yup.string(),\n    vatamount: Yup.string(),\n    totalamount: Yup.string(),\n  });\n\n  useEffect(() => {\n    getSuppliers();\n    invoicePurchaseGroups();\n  }, []);\n\n  useEffect(() => {\n    if (groupsList.length) {\n      getData();\n    }\n  }, [groupsList]);\n\n  const getData = () => {\n    props.onShowLoader(true);\n    let params = { entry_id: props.entry.id };\n    callApi(\"get\", ApiConstants.purchase.getData, params, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          setPurchaseData(response.payload);\n          setinvoiceDate(new Date(response.payload?.header?.invoice_date));\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const invoicePurchaseGroups = () => {\n    props.onShowLoader(true);\n    callApi(\"get\", ApiConstants.lookups.invoicepurchasegroups, null, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          let data = response.payload.map((i) => {\n            return { ...i, value: i.id, label: i.name };\n          });\n          setGroupsList(data);\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const getSuppliers = () => {\n    props.onShowLoader(true);\n    callApi(\"get\", ApiConstants.lookups.getSuppliers, null)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          let suppliers = response.payload.map((i) => {\n            return { ...i, value: i.id, label: i.name };\n          });\n          setSuppliersList(suppliers);\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const getSubGroups = (groupId) => {\n    let selectedGroup = groupsList.find((i) => i.id === groupId);\n    let subGroups = selectedGroup\n      ? selectedGroup.invoice_sub_groups.map((i) => {\n          return { ...i, value: i.id, label: i.name };\n        })\n      : [];\n    return subGroups;\n  };\n\n  const getSelectedSubGroup = (groupId, selectedId) => {\n    let selectedGroup = groupsList.find((i) => i.id === groupId);\n    let subGroups = selectedGroup\n      ? selectedGroup.invoice_sub_groups.map((i) => {\n          return { ...i, value: i.id, label: i.name };\n        })\n      : [];\n\n    let selectedSubGroup = null;\n    if (subGroups && selectedId) {\n      selectedSubGroup = subGroups.find((i) => i.id === selectedId);\n    }\n    return selectedSubGroup;\n  };\n\n  const getSubItems = (groupId, subgroupId) => {\n    let selectedGroup = groupsList.find((i) => i.id === groupId);\n    let subGroups = selectedGroup ? selectedGroup.invoice_sub_groups : [];\n    let selectedSubGroup = subGroups.find((i) => i.id === subgroupId);\n    let subItems = selectedSubGroup\n      ? selectedSubGroup.invoice_items.map((i) => {\n          return { ...i, value: i.id, label: i.name };\n        })\n      : [];\n    return subItems;\n  };\n\n  const getSelectedSubItem = (groupId, subgroupId, selectedId) => {\n    let selectedGroup = groupsList.find((i) => i.id === groupId);\n    let subGroups = selectedGroup ? selectedGroup.invoice_sub_groups : [];\n    let selectedSubGroup = subGroups.find((i) => i.id === subgroupId);\n    let subItems = selectedSubGroup\n      ? selectedSubGroup.invoice_items.map((i) => {\n          return { ...i, value: i.id, label: i.name };\n        })\n      : [];\n\n    let selectedSubItem = null;\n    if (subItems && selectedId) {\n      selectedSubItem = subItems.find((i) => i.id === selectedId);\n    }\n    return selectedSubItem;\n  };\n\n  const calculateTotal = (\n    values,\n    setFieldValue,\n    index,\n    fieldValue,\n    fieldType\n  ) => {\n    let amount = 0;\n    if (fieldType === \"unit_price\")\n      amount = values.invoice_details[index].quantity * fieldValue;\n    if (fieldType === \"quantity\")\n      amount = values.invoice_details[index].unit_price * fieldValue;\n\n    setFieldValue(`invoice_details.${index}.amount`, amount);\n    values.invoice_details[index].amount = amount;\n\n    let subtotal = values.invoice_details.reduce((sum, item) => {\n      return sum + item.amount;\n    }, 0);\n    setFieldValue(\"subtotal\", subtotal);\n    values.subtotal = subtotal;\n\n    let discountAmt = values.discount ? values.discount : 0;\n    let vatamount =\n      ((values.subtotal - discountAmt) * props.entry.vat_percentage) / 100;\n    setFieldValue(\"vatamount\", vatamount);\n\n    let totalamount = values.subtotal - discountAmt + vatamount;\n    setFieldValue(\"totalamount\", totalamount);\n  };\n\n  return (\n    <React.Fragment>\n      <div>\n        <Formik\n          enableReinitialize={true}\n          initialValues={{\n            supplier_id: purchaseData?.header?.supplier_id\n              ? purchaseData.header.supplier_id\n              : \"\",\n            trn: purchaseData?.header?.supplier_trn\n              ? purchaseData.header.supplier_trn\n              : \"\",\n            invoice_number: purchaseData?.header?.invoice_number\n              ? purchaseData.header.invoice_number\n              : \"\",\n            invoice_date: \"\",\n            invoice_details: purchaseData?.details\n              ? purchaseData.details.map((i) => {\n                  return {\n                    invoice_group_id: i.invoice_group_id,\n                    invoice_sub_group_id: i.invoice_sub_group_id,\n                    invoice_item_id: i.invoice_item_id,\n                    unit_price: i.price,\n                    quantity: i.qty,\n                    amount: i.amount,\n                  };\n                })\n              : [],\n            subtotal: purchaseData?.header?.sub_total\n              ? purchaseData.header.sub_total\n              : \"\",\n            discount: purchaseData?.header?.discount\n              ? purchaseData.header.discount\n              : \"0\",\n            vatamount: purchaseData?.header?.vat_amount\n              ? purchaseData.header.vat_amount\n              : \"\",\n            totalamount: purchaseData?.header?.total_amount\n              ? purchaseData.header.total_amount\n              : \"\",\n          }}\n          validationSchema={PurchaseFormSchema}>\n          {({ errors, handleChange, setFieldValue, values }) => (\n            <Form>\n              <Row>\n                <Col xs={6}>\n                  <div className=\"input-group mb-3\">\n                    <Select\n                      className={`w-100 form-control-select ${\n                        errors.supplier_id && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      classNamePrefix=\"select\"\n                      options={suppliersList}\n                      placeholder=\"Supplier\"\n                      isSearchable={false}\n                      isDisabled\n                      value={suppliersList.find(\n                        (i) => i.value === values?.supplier_id\n                      )}\n                    />\n                    <ErrorMessage name=\"supplier_id\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n                <Col xs={6}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      disabled\n                      className={`form-control ${\n                        errors.trn && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholder=\"TRN\"\n                      name=\"trn\"\n                    />\n                    <ErrorMessage name=\"trn\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n                <Col xs={6}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      disabled\n                      className={`form-control ${\n                        errors.invoice_number && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholder=\"Invoice Number\"\n                      name=\"invoice_number\"\n                    />\n                    <ErrorMessage name=\"invoice_number\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n                <Col xs={6}>\n                  <div className=\"date-picker-container mb-3\">\n                    <DatePicker\n                      className={`form-control ${\n                        errors.invoice_date && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholderText=\"Date\"\n                      disabled\n                      dateFormat=\"dd/MM/yyyy\"\n                      selected={invoiceDate}\n                      onChange={(value) => {\n                        setinvoiceDate(value);\n                        let event = {\n                          target: {\n                            name: \"invoice_date\",\n                            value: value,\n                          },\n                        };\n                        handleChange(event);\n                      }}\n                    />\n                    <i className=\"feather icon-calendar\"></i>\n                    <ErrorMessage name=\"invoice_date\">\n                      {(msg) => (\n                        <div className=\"invalid-feedback d-block\">{msg}</div>\n                      )}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col lg={12}>\n                  <Table className=\"purchase-grid\">\n                    <thead>\n                      <tr>\n                        <th>#</th>\n                        <th width=\"120\">Group</th>\n                        <th width=\"120\">Sub Group</th>\n                        <th width=\"120\">Item Name</th>\n                        <th>Unit Price</th>\n                        <th>Quantity</th>\n                        <th>Amount</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <FieldArray\n                        name=\"invoice_details\"\n                        render={(arrayHelpers) => (\n                          <React.Fragment>\n                            {values.invoice_details.map((item, index) => (\n                              <tr key={index}>\n                                <td scope=\"row\">{index + 1}</td>\n                                <td>\n                                  <Select\n                                    className=\"w-100 form-control-select\"\n                                    classNamePrefix=\"select\"\n                                    options={groupsList}\n                                    value={groupsList.find(\n                                      (i) =>\n                                        i.value ===\n                                        values?.invoice_details[index]\n                                          .invoice_group_id\n                                    )}\n                                    placeholder=\"Select\"\n                                    isSearchable={false}\n                                    isDisabled\n                                  />\n                                </td>\n                                <td>\n                                  <Select\n                                    className=\"w-100 form-control-select\"\n                                    classNamePrefix=\"select\"\n                                    options={getSubGroups(\n                                      values.invoice_details[index]\n                                        .invoice_group_id\n                                    )}\n                                    value={getSelectedSubGroup(\n                                      values.invoice_details[index]\n                                        .invoice_group_id,\n                                      values.invoice_details[index]\n                                        .invoice_sub_group_id\n                                    )}\n                                    placeholder=\"Select\"\n                                    isSearchable={false}\n                                    isDisabled\n                                  />\n                                </td>\n                                <td>\n                                  <Select\n                                    className=\"w-100 form-control-select\"\n                                    classNamePrefix=\"select\"\n                                    options={getSubItems(\n                                      values.invoice_details[index]\n                                        .invoice_group_id,\n                                      values.invoice_details[index]\n                                        .invoice_sub_group_id\n                                    )}\n                                    value={getSelectedSubItem(\n                                      values.invoice_details[index]\n                                        .invoice_group_id,\n                                      values.invoice_details[index]\n                                        .invoice_sub_group_id,\n                                      values.invoice_details[index]\n                                        .invoice_item_id\n                                    )}\n                                    placeholder=\"Select\"\n                                    isSearchable={false}\n                                    isDisabled\n                                  />\n                                </td>\n                                <td>\n                                  <Field\n                                    type=\"text\"\n                                    className=\"grid-input\"\n                                    name={`invoice_details.${index}.unit_price`}\n                                    value={\n                                      values.invoice_details[index].unit_price\n                                    }\n                                    disabled\n                                  />\n                                </td>\n                                <td>\n                                  <Field\n                                    type=\"text\"\n                                    className=\"grid-input\"\n                                    name={`invoice_details.${index}.quantity`}\n                                    value={\n                                      values.invoice_details[index].quantity\n                                    }\n                                    disabled\n                                  />\n                                </td>\n                                <td>\n                                  <Field\n                                    type=\"text\"\n                                    className=\"grid-input\"\n                                    disabled\n                                    name={`invoice_details.${index}.amount`}\n                                  />\n                                </td>\n                              </tr>\n                            ))}\n                          </React.Fragment>\n                        )}\n                      />\n                      <tr>\n                        <td colSpan=\"6\">\n                          <div className=\"text-right\">\n                            <label className=\"mr-3\">Sub Total</label>\n                          </div>\n                        </td>\n                        <td>\n                          <Field\n                            type=\"text\"\n                            className=\"grid-input\"\n                            name=\"subtotal\"\n                            disabled\n                          />\n                        </td>\n                      </tr>\n                      <tr>\n                        <td colSpan=\"6\">\n                          <div className=\"text-right\">\n                            <label className=\"mr-3\">Discount Rounded</label>\n                          </div>\n                        </td>\n                        <td>\n                          <Field\n                            type=\"text\"\n                            className=\"grid-input\"\n                            name=\"discount\"\n                            disabled\n                            value={values.discount}\n                            onChange={(e) => {\n                              handleChange(e);\n                              let discountAmt = e.target.value\n                                ? e.target.value\n                                : 0;\n                              let vatamount =\n                                ((values.subtotal - discountAmt) *\n                                  props.entry.vat_percentage) /\n                                100;\n                              setFieldValue(\"vatamount\", vatamount);\n\n                              let totalamount =\n                                values.subtotal - discountAmt + vatamount;\n                              setFieldValue(\"totalamount\", totalamount);\n                            }}\n                          />\n                        </td>\n                      </tr>\n                      <tr>\n                        <td colSpan=\"6\">\n                          <div className=\"text-right\">\n                            <label className=\"mr-3\">VAT Amount</label>\n                          </div>\n                        </td>\n                        <td>\n                          <Field\n                            type=\"text\"\n                            disabled\n                            className=\"grid-input\"\n                            name=\"vatamount\"\n                          />\n                        </td>\n                      </tr>\n                      <tr>\n                        <td colSpan=\"6\">\n                          <div className=\"text-right\">\n                            <label className=\"mr-3\">Total</label>\n                          </div>\n                        </td>\n                        <td>\n                          <Field\n                            type=\"text\"\n                            disabled\n                            className=\"grid-input\"\n                            name=\"totalamount\"\n                          />\n                        </td>\n                      </tr>\n                    </tbody>\n                  </Table>\n                </Col>\n              </Row>\n            </Form>\n          )}\n        </Formik>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default PurchaseForm;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/validator-checked-entries/forms/expenditureForm.js",["976","977","978"],"import React, { useState, useEffect } from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport DatePicker from \"react-datepicker\";\nimport Select from \"react-select\";\n\nimport { showNotification } from \"../../../../services/toasterService\";\nimport { callApi } from \"../../../../services/apiService\";\nimport { ApiConstants } from \"../../../../config/apiConstants\";\n\nconst ExpenditureForm = (props) => {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [invoiceDate, setinvoiceDate] = useState(null);\n  const [expenditureData, setexpenditureData] = useState(null);\n  const [groupsList, setGroupsList] = useState([]);\n  const [subGroupsList, setSubGroupsList] = useState([]);\n  const [itemsList, setItemsList] = useState([]);\n\n  const ExpenditureFormSchema = Yup.object().shape({\n    invoice_date: Yup.mixed().required(\"Please select Date\"),\n    amount: Yup.string()\n      .required(\"Please enter Amount\")\n      .matches(/^[0-9]*$/, \"Please enter a valid Amount\"),\n    comments: Yup.string().required(\"Please enter Comment\"),\n    invoice_number: Yup.string().required(\"Please enter Invoice number\"),\n    invoice_group_id: Yup.string().required(\"Please enter Group\"),\n    invoice_sub_group_id: Yup.string().required(\"Please enter Sub Group\"),\n    invoice_item_id: Yup.string().required(\"Please select Item\"),\n  });\n\n  useEffect(() => {\n    invoiceExpGroups();\n  }, []);\n\n  useEffect(() => {\n    if (groupsList.length) getData();\n  }, [groupsList]);\n\n  const getData = () => {\n    props.onShowLoader(true);\n    let params = { entry_id: props.entry.id };\n    callApi(\"get\", ApiConstants.expenditure.getData, params, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          setexpenditureData(response.payload);\n          setinvoiceDate(new Date(response.payload.invoice_date));\n          let group = groupsList.find(\n            (i) => i.id === response.payload.invoice_group_id\n          );\n          onChangeGroups(group);\n          let subgroup = group.invoice_sub_groups.find(\n            (i) => i.id === response.payload.invoice_sub_group_id\n          );\n          onChangeSubGroups(subgroup);\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const invoiceExpGroups = () => {\n    props.onShowLoader(true);\n    callApi(\"get\", ApiConstants.lookups.invoiceexpgroups, null)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          let data = response.payload.map((i) => {\n            return { ...i, value: i.id, label: i.name };\n          });\n          setGroupsList(data);\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const onChangeGroups = (value) => {\n    let subGroups = value?.invoice_sub_groups?.map((i) => {\n      return { ...i, value: i.id, label: i.name };\n    });\n    setSubGroupsList(subGroups);\n  };\n\n  const onChangeSubGroups = (value) => {\n    let items = value?.invoice_items?.map((i) => {\n      return { ...i, value: i.id, label: i.name };\n    });\n    setItemsList(items);\n  };\n\n  return (\n    <React.Fragment>\n      <div>\n        <Formik\n          enableReinitialize={true}\n          initialValues={{\n            invoice_date: \"\",\n            amount: expenditureData?.amount ? expenditureData?.amount : \"\",\n            comments: expenditureData?.comments\n              ? expenditureData?.comments\n              : \"\",\n            invoice_number: expenditureData?.invoice_number\n              ? expenditureData?.invoice_number\n              : \"\",\n            invoice_group_id: expenditureData?.invoice_group_id\n              ? expenditureData?.invoice_group_id\n              : \"\",\n            invoice_sub_group_id: expenditureData?.invoice_sub_group_id\n              ? expenditureData?.invoice_sub_group_id\n              : \"\",\n            invoice_item_id: expenditureData?.invoice_item_id\n              ? expenditureData?.invoice_item_id\n              : \"\",\n          }}\n          validationSchema={ExpenditureFormSchema}>\n          {({ errors, values }) => (\n            <Form>\n              <Row>\n                <Col xs={12}>\n                  <div className=\"date-picker-container mb-3\">\n                    <DatePicker\n                      className={`form-control ${\n                        errors.invoice_date && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholderText=\"Date\"\n                      disabled\n                      dateFormat=\"dd/MM/yyyy\"\n                      selected={invoiceDate}\n                    />\n                    <i className=\"feather icon-calendar\"></i>\n                    <ErrorMessage name=\"invoice_date\">\n                      {(msg) => (\n                        <div className=\"invalid-feedback d-block\">{msg}</div>\n                      )}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      disabled\n                      className={`form-control ${\n                        errors.amount && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholder=\"Amount\"\n                      name=\"amount\"\n                    />\n                    <ErrorMessage name=\"amount\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      disabled\n                      className={`form-control ${\n                        errors.comments && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholder=\"Comments\"\n                      name=\"comments\"\n                    />\n                    <ErrorMessage name=\"comments\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      disabled\n                      className={`form-control ${\n                        errors.invoice_number && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholder=\"Invoice Number\"\n                      name=\"invoice_number\"\n                    />\n                    <ErrorMessage name=\"invoice_number\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Select\n                      className={`w-100 form-control-select ${\n                        errors.invoice_group_id && isSubmitted\n                          ? \"is-invalid\"\n                          : \"\"\n                      }`}\n                      classNamePrefix=\"select\"\n                      options={groupsList}\n                      placeholder=\"Group\"\n                      isDisabled\n                      isSearchable={false}\n                      value={groupsList.find(\n                        (i) => i.value === values?.invoice_group_id\n                      )}\n                    />\n                    <ErrorMessage name=\"invoice_group_id\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Select\n                      className={`w-100 form-control-select ${\n                        errors.invoice_sub_group_id && isSubmitted\n                          ? \"is-invalid\"\n                          : \"\"\n                      }`}\n                      classNamePrefix=\"select\"\n                      options={subGroupsList}\n                      placeholder=\"Sub Group\"\n                      isSearchable={false}\n                      isDisabled\n                      value={subGroupsList.find(\n                        (i) => i.value === values?.invoice_sub_group_id\n                      )}\n                    />\n                    <ErrorMessage name=\"invoice_sub_group_id\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Select\n                      className={`w-100 form-control-select ${\n                        errors.invoice_item_id && isSubmitted\n                          ? \"is-invalid\"\n                          : \"\"\n                      }`}\n                      classNamePrefix=\"select\"\n                      options={itemsList}\n                      placeholder=\"Items\"\n                      isDisabled\n                      isSearchable={false}\n                      value={itemsList.find(\n                        (i) => i.value === values?.invoice_item_id\n                      )}\n                    />\n                    <ErrorMessage name=\"invoice_item_id\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n              </Row>\n            </Form>\n          )}\n        </Formik>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default ExpenditureForm;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/validator-checked-entries/forms/salesForm.js",["979","980"],"import React, { useState, useEffect } from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport DatePicker from \"react-datepicker\";\n\nimport { showNotification } from \"../../../../services/toasterService\";\nimport { callApi } from \"../../../../services/apiService\";\nimport { ApiConstants } from \"../../../../config/apiConstants\";\n\nconst SalesForm = (props) => {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [invoiceDate, setinvoiceDate] = useState(null);\n  const [salesData, setsalesData] = useState(null);\n\n  const SalesFormSchema = Yup.object().shape({\n    invoice_date: Yup.mixed().required(\"Please select Date\"),\n    amount: Yup.string()\n      .required(\"Please enter Amount\")\n      .matches(/^[0-9]*$/, \"Please enter a valid Amount\"),\n    comments: Yup.string().required(\"Please enter Comment\"),\n    invoice_number: Yup.string().required(\"Please enter Invoice number\"),\n    amount_exclude_vat: Yup.string(),\n    vat_amount: Yup.string(),\n  });\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = () => {\n    props.onShowLoader(true);\n    let params = { entry_id: props.entry.id };\n    callApi(\"get\", ApiConstants.sales.getData, params, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          setsalesData(response.payload);\n          setinvoiceDate(new Date(response.payload.invoice_date));\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  return (\n    <React.Fragment>\n      <div>\n        <Formik\n          enableReinitialize={true}\n          initialValues={{\n            invoice_date: \"\",\n            amount: salesData?.amount ? salesData?.amount : \"\",\n            comments: salesData?.comments ? salesData?.comments : \"\",\n            invoice_number: salesData?.invoice_number\n              ? salesData?.invoice_number\n              : \"\",\n            amount_exclude_vat: salesData?.amount_exclude_vat\n              ? salesData?.amount_exclude_vat\n              : \"\",\n            vat_amount: salesData?.vat_amount ? salesData?.vat_amount : \"\",\n          }}\n          validationSchema={SalesFormSchema}>\n          {({ errors }) => (\n            <Form>\n              <Row>\n                <Col xs={12}>\n                  <div className=\"date-picker-container mb-3\">\n                    <DatePicker\n                      className={`form-control ${\n                        errors.invoice_date && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholderText=\"Date\"\n                      disabled\n                      dateFormat=\"dd/MM/yyyy\"\n                      selected={invoiceDate}\n                    />\n                    <i className=\"feather icon-calendar\"></i>\n                    <ErrorMessage name=\"invoice_date\">\n                      {(msg) => (\n                        <div className=\"invalid-feedback d-block\">{msg}</div>\n                      )}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      disabled\n                      className={`form-control ${\n                        errors.amount && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholder=\"Amount\"\n                      name=\"amount\"\n                    />\n                    <ErrorMessage name=\"amount\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      disabled\n                      className={`form-control ${\n                        errors.comments && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholder=\"Comments\"\n                      name=\"comments\"\n                    />\n                    <ErrorMessage name=\"comments\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      disabled\n                      className={`form-control ${\n                        errors.invoice_number && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholder=\"Invoice Number\"\n                      name=\"invoice_number\"\n                    />\n                    <ErrorMessage name=\"invoice_number\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      className={`form-control ${\n                        errors.amount_exclude_vat && isSubmitted\n                          ? \"is-invalid\"\n                          : \"\"\n                      }`}\n                      disabled\n                      placeholder=\"Amount Exclude Vat\"\n                      name=\"amount_exclude_vat\"\n                    />\n                    <ErrorMessage name=\"amount_exclude_vat\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      className={`form-control ${\n                        errors.vat_amount && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      disabled\n                      placeholder=\"Vat Amount\"\n                      name=\"vat_amount\"\n                    />\n                    <ErrorMessage name=\"vat_amount\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n              </Row>\n            </Form>\n          )}\n        </Formik>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default SalesForm;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/checkerList/form.js",["981","982","983","984","985","986"],"import React, { useState, useEffect } from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport Select from \"react-select\";\n\nimport { showNotification } from \"../../../services/toasterService\";\nimport { CONFIG } from \"../../../config/constant\";\nimport { callApi, callUploadApi } from \"../../../services/apiService\";\nimport { ApiConstants } from \"../../../config/apiConstants\";\nimport avatar1 from \"../../../assets/images/icons/company.png\";\n\nconst ClientForm = (props) => {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [selectedCountry, setSelectedCountry] = useState(\"\");\n  const [countriesList, setCountriesList] = useState([]);\n  const [regionList, setRegionList] = useState([]);\n  const [selectedDisplayPic, setSelectedDisplayPic] = useState(null);\n  const [previewImg, setPreviewImg] = useState(null);\n  const [dpErrors, setDpErrors] = useState(\"\");\n  const [userInfo, setuserInfo] = useState(null);\n\n  const FILE_SIZE = CONFIG.MAX_UPLOAD_SIZE;\n  const SUPPORTED_FORMATS = [\n    \"pdf\",\n    \"jpg\",\n    \"jpeg\",\n    \"png\",\n    \"doc\",\n    \"docx\",\n    \"jfif\",\n    \"gif\",\n  ];\n\n  const UserFormSchema = Yup.object().shape({\n    name: Yup.string().required(\"Please enter Name\"),\n    email: Yup.string()\n      .required(\"Please enter Email \")\n      .email(\"Please enter a valid Email\"),\n    buildingName: Yup.string().required(\"Please enter Building Name\"),\n    region: Yup.string().required(\"Please select Region\"),\n    place: Yup.string().required(\"Please enter Place\"),\n    po_box: Yup.string().required(\"Please enter PO Box\"),\n    city: Yup.string().required(\"Please enter City\"),\n    country: Yup.string().required(\"Please select Country\"),\n    whatsappno: Yup.string()\n      .required(\"Please enter Whatsapp No\")\n      .matches(/^[0-9]*$/, \"Please enter a valid phone number\"),\n    landphone: Yup.string().matches(\n      /^[0-9]*$/,\n      \"Please enter a valid phone number\"\n    ),\n    mobile: Yup.string().matches(\n      /^[0-9]*$/,\n      \"Please enter a valid mobile number\"\n    ),\n    tradeLicenseNumber: Yup.string().required(\n      \"Please enter Trade License Number\"\n    ),\n    tradeFile: Yup.mixed()\n      .test(\"fileSize\", \"Exceeds maximum file size (Max 50MB)\", (value) => {\n        if (value) {\n          return value.size <= FILE_SIZE;\n        }\n        return true;\n      })\n      .test(\"fileFormat\", \"Unsupported Format\", (value) => {\n        if (value) {\n          let regex = /(?:\\.([^.]+))?$/;\n          let ext = regex.exec(value.name)[1];\n          return SUPPORTED_FORMATS.includes(ext?.toLowerCase());\n        }\n        return true;\n      }),\n    contact_person: Yup.string().required(\"Please enter Contact Person name\"),\n    cp_mobile: Yup.string()\n      .required(\"Please enter Contact Person number\")\n      .matches(/^[0-9]*$/, \"Please enter a valid mobile number\"),\n    ftaEmail: Yup.string().email(\"Please enter a valid FTA Email\"),\n    ftaPassword: Yup.string(),\n    trnNumber: Yup.string().required(\"Please enter TRN Number\"),\n    trnFile: Yup.mixed()\n      .test(\"fileSize\", \"Exceeds maximum file size (Max 50MB)\", (value) => {\n        if (value) {\n          return value.size <= FILE_SIZE;\n        }\n        return true;\n      })\n      .test(\"fileFormat\", \"Unsupported Format\", (value) => {\n        if (value) {\n          let regex = /(?:\\.([^.]+))?$/;\n          let ext = regex.exec(value.name)[1];\n          return SUPPORTED_FORMATS.includes(ext?.toLowerCase());\n        }\n        return true;\n      }),\n  });\n\n  useEffect(() => {\n    getContries();\n  }, []);\n\n  useEffect(() => {\n    if (props.isEdit && countriesList.length) {\n      getUserData(props?.dataItem?.id);\n    }\n  }, [countriesList]);\n\n  const uploadFiles = (data) =>\n    new Promise((resolve, reject) => {\n      let formData = new FormData();\n      formData.append(\"file\", data);\n\n      return callUploadApi(formData)\n        .then((response) => {\n          if (response.status_code === 201) resolve(response);\n          else {\n            reject(response);\n            showNotification(\"Error\", response.message, \"error\");\n          }\n        })\n        .catch((error) => {\n          reject(error);\n          showNotification(\"Error\", \"File upload failed\", \"error\");\n        });\n    });\n\n  const onSubmit = async (values) => {\n    props.onShowLoader(true);\n    let params = {\n      user_id: userInfo?.id,\n      email: values.email,\n      w_country_code: selectedCountry.phone_code,\n      whatsapp_no: values.whatsappno,\n      name: values.name,\n      image_id: userInfo?.profile_image_id,\n      building_name: values.buildingName,\n      country_id: values.country,\n      region_id: values.region,\n      country_code: selectedCountry.phone_code,\n      mobile: values.mobile,\n      // join_date: userInfo?.created_at,\n      // salary: 0,\n      p_o_box: values.po_box,\n      palce: values.place,\n      city: values.city,\n      trade_license_number: values.tradeLicenseNumber,\n      trn_number: values.trnNumber,\n      trade_license_image_id: userInfo?.client_user?.trade_license_image_id,\n      fta_email: values.ftaEmail,\n      fta_password: values.ftaPassword,\n      l_country_code: selectedCountry.phone_code,\n      landline: values.landphone,\n      contact_person: values.contact_person,\n      cp_country_code: selectedCountry.phone_code,\n      cp_mobile: values.cp_mobile,\n      tran_certificate_id: userInfo?.client_user?.tran_certificate_id,\n    };\n\n    if (values.tradeFile) {\n      await uploadFiles(values.tradeFile)\n        .then((response) => {\n          params.trade_license_image_id = response.payload.file_id;\n        })\n        .catch((error) => {});\n    }\n\n    if (values.trnFile) {\n      await uploadFiles(values.trnFile)\n        .then((response) => {\n          params.tran_certificate_id = response.payload.file_id;\n        })\n        .catch((error) => {});\n    }\n\n    if (selectedDisplayPic) {\n      await uploadFiles(selectedDisplayPic)\n        .then((response) => {\n          params.image_id = response.payload.file_id;\n        })\n        .catch((error) => {});\n    }\n\n    updateProfile(params);\n  };\n\n  const updateProfile = (params) => {\n    callApi(\"post\", ApiConstants.client.updatebyadmin, params, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 201) {\n          props.onSuccess();\n          showNotification(\"Success\", response.message, \"success\");\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const onSelectCountry = (value) => {\n    setSelectedCountry(value);\n    setRegionList(\n      value.regions?.map((i) => {\n        return { ...i, value: i.id, label: i.name };\n      })\n    );\n  };\n\n  const onFileChange = (event) => {\n    let file = event.target.files[0];\n    if (file) {\n      let regex = /(?:\\.([^.]+))?$/;\n      let ext = regex.exec(file.name)[1];\n\n      if (file.size >= FILE_SIZE) {\n        setDpErrors(\"Exceeds maximum file size (Max 50MB)\");\n        return;\n      }\n\n      if (!SUPPORTED_FORMATS.includes(ext?.toLowerCase())) {\n        setDpErrors(\"Unsupported Format\");\n        return;\n      }\n\n      let reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onloadend = (e) => {\n        setPreviewImg(reader.result);\n        setSelectedDisplayPic(file);\n      };\n      setDpErrors(\"\");\n    }\n  };\n\n  const getContries = () => {\n    props.onShowLoader(true);\n    callApi(\"get\", ApiConstants.lookups.getCountry, {})\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          setCountriesList(\n            response.payload?.map((i) => {\n              return { ...i, value: i.id, label: i.name };\n            })\n          );\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const getUserData = (user_id) => {\n    props.onShowLoader(true);\n    callApi(\"get\", ApiConstants.user.getuser, { user_id }, true)\n      .then((response) => {\n        if (response && response.status_code === 200) {\n          setuserInfo(response.payload);\n          let selectedCountry = countriesList.find(\n            (i) => i.id === response.payload?.client_user?.country_id\n          );\n          if (selectedCountry) onSelectCountry(selectedCountry);\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n        props.onShowLoader(false);\n      })\n      .catch((error) => {\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n        props.onShowLoader(false);\n      });\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"card shadow-none mb-0 rounded\">\n        <div className=\"card-header\">\n          <h5 className=\"text-primary\">Update Client</h5>\n        </div>\n        <div className=\"card-body mx-2\">\n          <Formik\n            enableReinitialize={true}\n            initialValues={{\n              email: userInfo?.email ? userInfo.email : \"\",\n              name: userInfo?.name ? userInfo.name : \"\",\n              buildingName: userInfo?.client_user?.building_name\n                ? userInfo.client_user.building_name\n                : \"\",\n              place: userInfo?.client_user?.palce\n                ? userInfo.client_user.palce\n                : \"\",\n              po_box: userInfo?.client_user.p_o_box\n                ? userInfo.client_user.p_o_box\n                : \"\",\n              city: userInfo?.client_user.city ? userInfo.client_user.city : \"\",\n              country: userInfo?.client_user.country_id\n                ? userInfo.client_user.country_id\n                : \"\",\n              region: userInfo?.client_user.region_id\n                ? userInfo.client_user.region_id\n                : \"\",\n              mobile: userInfo?.client_user.mobile\n                ? userInfo.client_user.mobile\n                : \"\",\n              whatsappno: userInfo?.whatsapp_no ? userInfo.whatsapp_no : \"\",\n              landphone: userInfo?.client_user.landline\n                ? userInfo.client_user.landline\n                : \"\",\n              tradeLicenseNumber: userInfo?.client_user.trade_license_number\n                ? userInfo.client_user.trade_license_number\n                : \"\",\n              tradeFile: undefined,\n              trnNumber: userInfo?.client_user.trn_number\n                ? userInfo.client_user.trn_number\n                : \"\",\n              trnFile: undefined,\n              contact_person: userInfo?.client_user.contact_person\n                ? userInfo.client_user.contact_person\n                : \"\",\n              cp_mobile: userInfo?.client_user.cp_mobile\n                ? userInfo.client_user.cp_mobile\n                : \"\",\n              ftaEmail: userInfo?.client_user.fta_email\n                ? userInfo.client_user.fta_email\n                : \"\",\n              ftaPassword: userInfo?.client_user.fta_password\n                ? userInfo.client_user.fta_password\n                : \"\",\n            }}\n            validationSchema={UserFormSchema}\n            onSubmit={(values) => onSubmit(values)}>\n            {({ errors, handleChange, values, setFieldValue }) => (\n              <Form autoComplete=\"off\">\n                <Row>\n                  <Col xs={12} xl={6}>\n                    <label>Company Name</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.name && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Company Name\"\n                        name=\"name\"\n                      />\n                      <ErrorMessage name=\"name\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Email</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.email && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        id=\"user-email\"\n                        placeholder=\"Email\"\n                        name=\"email\"\n                        autoComplete=\"off\"\n                      />\n                      <ErrorMessage name=\"email\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Building Name</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.buildingName && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Building Name\"\n                        name=\"buildingName\"\n                      />\n                      <ErrorMessage name=\"buildingName\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Place / Street name</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.place && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Place / Street name\"\n                        name=\"place\"\n                      />\n                      <ErrorMessage name=\"place\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>P O Box</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.po_box && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"P O Box\"\n                        name=\"po_box\"\n                      />\n                      <ErrorMessage name=\"po_box\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>City</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.city && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"City\"\n                        name=\"city\"\n                      />\n                      <ErrorMessage name=\"city\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Country</label>\n                    <div className=\"input-group mb-3\">\n                      <Select\n                        className={`w-100 form-control-select ${\n                          errors.country && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        classNamePrefix=\"select\"\n                        options={countriesList}\n                        value={countriesList.find(\n                          (i) => i.id === values.country\n                        )}\n                        placeholder=\"Select Country\"\n                        isSearchable={false}\n                        isDisabled\n                        onChange={(value) => {\n                          onSelectCountry(value);\n                          let event = {\n                            target: {\n                              name: \"country\",\n                              value: value.id,\n                            },\n                          };\n                          handleChange(event);\n                        }}\n                      />\n                      <ErrorMessage name=\"country\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Region</label>\n                    <div className=\"input-group mb-3\">\n                      <Select\n                        className={`w-100 form-control-select ${\n                          errors.region && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        classNamePrefix=\"select\"\n                        options={regionList}\n                        placeholder=\"Select Region\"\n                        isSearchable\n                        value={regionList.find((i) => i.id === values?.region)}\n                        onChange={(value) => {\n                          let event = {\n                            target: {\n                              name: \"region\",\n                              value: value.id,\n                            },\n                          };\n                          handleChange(event);\n                        }}\n                      />\n                      <ErrorMessage name=\"region\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Whatsapp Number</label>\n\n                    <div className=\"input-group mb-3\">\n                      <div className=\"input-group-prepend bg-light\">\n                        <span\n                          className={`input-group-text ${\n                            errors.whatsappno && isSubmitted\n                              ? \"border border-danger\"\n                              : \"\"\n                          }`}\n                          id=\"country-code\"\n                          style={{ fontSize: 14 }}>\n                          {selectedCountry.phone_code}\n                        </span>\n                      </div>\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.whatsappno && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Whatsapp Number\"\n                        name=\"whatsappno\"\n                      />\n                      <ErrorMessage name=\"whatsappno\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Land Line Number</label>\n                    <div className=\"input-group mb-3\">\n                      <div className=\"input-group-prepend bg-light\">\n                        <span\n                          className={`input-group-text ${\n                            errors.landphone && isSubmitted\n                              ? \"border border-danger\"\n                              : \"\"\n                          }`}\n                          id=\"country-code\"\n                          style={{ fontSize: 14 }}>\n                          {selectedCountry.phone_code}\n                        </span>\n                      </div>\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.landphone && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Land Line Number\"\n                        name=\"landphone\"\n                      />\n                      <ErrorMessage name=\"landphone\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Mobile Number</label>\n                    <div className=\"input-group mb-3\">\n                      <div className=\"input-group-prepend bg-light\">\n                        <span\n                          className={`input-group-text ${\n                            errors.mobile && isSubmitted\n                              ? \"border border-danger\"\n                              : \"\"\n                          }`}\n                          id=\"country-code\"\n                          style={{ fontSize: 14 }}>\n                          {selectedCountry.phone_code}\n                        </span>\n                      </div>\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.mobile && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Mobile Number\"\n                        name=\"mobile\"\n                      />\n                      <ErrorMessage name=\"mobile\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}></Col>\n                  <Col xs={12} xl={6}>\n                    <label>Trade License Number</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.tradeLicenseNumber && isSubmitted\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                        placeholder=\"Trade License Number\"\n                        name=\"tradeLicenseNumber\"\n                      />\n                      <ErrorMessage name=\"tradeLicenseNumber\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Upload Trade License Copy</label>\n                    <div className=\"input-group\">\n                      <input\n                        id=\"tradeFile\"\n                        className={`form-control ${\n                          errors.tradeFile && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        type=\"file\"\n                        onChange={(event) => {\n                          setFieldValue(\n                            \"tradeFile\",\n                            event.currentTarget.files[0]\n                          );\n                        }}\n                      />\n                      {userInfo && userInfo?.client_user?.trade_license_image && (\n                        <div className=\"ml-2 mt-2\">\n                          <a\n                            target=\"_blank\" rel=\"noreferrer\"\n                            href={\n                              CONFIG.API_BASE_URL +\n                              ApiConstants.file.download +\n                              \"?file_name=\" +\n                              userInfo?.client_user?.trade_license_image\n                                .file_path\n                            }>\n                            Download\n                          </a>\n                        </div>\n                      )}\n                      <ErrorMessage name=\"tradeFile\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                    <div style={{ fontSize: 10 }} className=\"mb-3\">\n                      Supported file formats JPEG, PNG, Pdf, DOC, DOCX\n                    </div>\n                  </Col>\n\n                  <Col xs={12} xl={6}>\n                    <label>TRN</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.trnNumber && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"TRN\"\n                        name=\"trnNumber\"\n                      />\n                      <ErrorMessage name=\"trnNumber\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Upload TRN Certificate</label>\n                    <div className=\"input-group\">\n                      <input\n                        id=\"trnFile\"\n                        className={`form-control ${\n                          errors.trnFile && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        type=\"file\"\n                        onChange={(event) => {\n                          setFieldValue(\n                            \"trnFile\",\n                            event.currentTarget.files[0]\n                          );\n                        }}\n                      />\n                      {userInfo &&\n                        userInfo?.client_user?.tran_certificate_image && (\n                          <div className=\"ml-2 mt-2\">\n                            <a\n                              target=\"_blank\" rel=\"noreferrer\"\n                              href={\n                                CONFIG.API_BASE_URL +\n                                ApiConstants.file.download +\n                                \"?file_name=\" +\n                                userInfo?.client_user?.tran_certificate_image\n                                  .file_path\n                              }>\n                              Download\n                            </a>\n                          </div>\n                        )}\n                      <ErrorMessage name=\"trnFile\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                    <div style={{ fontSize: 10 }} className=\"mb-3\">\n                      Supported file formats JPEG, PNG, Pdf, DOC, DOCX\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Contact Person</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.contact_person && isSubmitted\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                        placeholder=\"Contact Person\"\n                        name=\"contact_person\"\n                      />\n                      <ErrorMessage name=\"contact_person\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Contact Number</label>\n                    <div className=\"input-group mb-3\">\n                      <div className=\"input-group-prepend bg-light\">\n                        <span\n                          className={`input-group-text ${\n                            errors.cp_mobile && isSubmitted\n                              ? \"border border-danger\"\n                              : \"\"\n                          }`}\n                          id=\"country-code\"\n                          style={{ fontSize: 14 }}>\n                          {selectedCountry.phone_code}\n                        </span>\n                      </div>\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.cp_mobile && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Contact Number\"\n                        name=\"cp_mobile\"\n                      />\n                      <ErrorMessage name=\"cp_mobile\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12}>\n                    <hr />\n                    <label style={{ color: \"#096DA9\" }} className=\"mb-3\">\n                      FTA Login Details &nbsp;\n                      <i className=\"fa fa-info-circle\"></i>\n                    </label>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>FTA Email</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.ftaEmail && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"FTA Email\"\n                        name=\"ftaEmail\"\n                      />\n                      <ErrorMessage name=\"ftaEmail\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>FTA Password</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"password\"\n                        className={`form-control ${\n                          errors.ftaPassword && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"FTA Password\"\n                        name=\"ftaPassword\"\n                      />\n                      <ErrorMessage name=\"ftaPassword\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                </Row>\n\n                <div className=\"mt-3 text-center\">\n                  <button\n                    type=\"submit\"\n                    style={{ width: 150, fontWeight: \"bold\" }}\n                    className=\"btn btn-primary shadow-2 mt-3\"\n                    onClick={() => setIsSubmitted(true)}>\n                    Update\n                  </button>\n                </div>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default ClientForm;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/enums/clientStatus.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/approved-entries/forms/expenditureForm.js",["987","988","989"],"import React, {useState, useEffect} from \"react\";\nimport {Row, Col} from \"react-bootstrap\";\nimport {Formik, Field, Form, ErrorMessage} from \"formik\";\nimport * as Yup from \"yup\";\nimport DatePicker from \"react-datepicker\";\nimport Select from \"react-select\";\n\nimport {showNotification} from \"../../../../services/toasterService\";\nimport {callApi} from \"../../../../services/apiService\";\nimport {ApiConstants} from \"../../../../config/apiConstants\";\n\nconst ExpenditureForm = (props) => {\n\tconst [isSubmitted, setIsSubmitted] = useState(false);\n\tconst [invoiceDate, setinvoiceDate] = useState(null);\n\tconst [expenditureData, setexpenditureData] = useState(null);\n\tconst [groupsList, setGroupsList] = useState([]);\n\tconst [subGroupsList, setSubGroupsList] = useState([]);\n\tconst [itemsList, setItemsList] = useState([]);\n\n\tconst ExpenditureFormSchema = Yup.object().shape({\n\t\tinvoice_date: Yup.mixed().required(\"Please select Date\"),\n\t\tamount: Yup.string()\n\t\t\t.required(\"Please enter Amount\")\n\t\t\t.matches(/^[0-9]*$/, \"Please enter a valid Amount\"),\n\t\tcomments: Yup.string().required(\"Please enter Comment\"),\n\t\tinvoice_number: Yup.string().required(\"Please enter Invoice number\"),\n\t\tinvoice_group_id: Yup.string().required(\"Please enter Group\"),\n\t\tinvoice_sub_group_id: Yup.string().required(\"Please enter Sub Group\"),\n\t\tinvoice_item_id: Yup.string().required(\"Please select Item\"),\n\t});\n\n\tuseEffect(() => {\n\t\tinvoiceExpGroups();\n\t}, []);\n\n\tuseEffect(() => {\n\t\tif (groupsList.length) getData();\n\t}, [groupsList]);\n\n\tconst getData = () => {\n\t\tprops.onShowLoader(true);\n\t\tlet params = {entry_id: props.entry.id};\n\t\tcallApi(\"get\", ApiConstants.expenditure.getData, params, true)\n\t\t\t.then((response) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tsetexpenditureData(response.payload);\n\t\t\t\t\tsetinvoiceDate(new Date(response.payload.invoice_date));\n\t\t\t\t\tlet group = groupsList.find((i) => i.id === response.payload.invoice_group_id);\n\t\t\t\t\tonChangeGroups(group);\n\t\t\t\t\tlet subgroup = group.invoice_sub_groups.find((i) => i.id === response.payload.invoice_sub_group_id);\n\t\t\t\t\tonChangeSubGroups(subgroup);\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\tconst invoiceExpGroups = () => {\n\t\tprops.onShowLoader(true);\n\t\tcallApi(\"get\", ApiConstants.lookups.invoiceexpgroups, null)\n\t\t\t.then((response) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tlet data = response.payload.map((i) => {\n\t\t\t\t\t\treturn {...i, value: i.id, label: i.name};\n\t\t\t\t\t});\n\t\t\t\t\tsetGroupsList(data);\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\tconst onChangeGroups = (value) => {\n\t\tlet subGroups = value?.invoice_sub_groups?.map((i) => {\n\t\t\treturn {...i, value: i.id, label: i.name};\n\t\t});\n\t\tsetSubGroupsList(subGroups);\n\t};\n\n\tconst onChangeSubGroups = (value) => {\n\t\tlet items = value?.invoice_items?.map((i) => {\n\t\t\treturn {...i, value: i.id, label: i.name};\n\t\t});\n\t\tsetItemsList(items);\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<div>\n\t\t\t\t<Formik\n\t\t\t\t\tenableReinitialize={true}\n\t\t\t\t\tinitialValues={{\n\t\t\t\t\t\tinvoice_date: \"\",\n\t\t\t\t\t\tamount: expenditureData?.amount ? expenditureData?.amount : \"\",\n\t\t\t\t\t\tcomments: expenditureData?.comments ? expenditureData?.comments : \"\",\n\t\t\t\t\t\tinvoice_number: expenditureData?.invoice_number ? expenditureData?.invoice_number : \"\",\n\t\t\t\t\t\tinvoice_group_id: expenditureData?.invoice_group_id ? expenditureData?.invoice_group_id : \"\",\n\t\t\t\t\t\tinvoice_sub_group_id: expenditureData?.invoice_sub_group_id ? expenditureData?.invoice_sub_group_id : \"\",\n\t\t\t\t\t\tinvoice_item_id: expenditureData?.invoice_item_id ? expenditureData?.invoice_item_id : \"\",\n\t\t\t\t\t}}\n\t\t\t\t\tvalidationSchema={ExpenditureFormSchema}>\n\t\t\t\t\t{({errors, values}) => (\n\t\t\t\t\t\t<Form>\n\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t\t<div className=\"date-picker-container mb-3\">\n\t\t\t\t\t\t\t\t\t\t<DatePicker className={`form-control ${errors.invoice_date && isSubmitted ? \"is-invalid\" : \"\"}`} placeholderText=\"Date\" disabled dateFormat=\"dd/MM/yyyy\" selected={invoiceDate} />\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-calendar\"></i>\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"invoice_date\">{(msg) => <div className=\"invalid-feedback d-block\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" disabled className={`form-control ${errors.amount && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"Amount\" name=\"amount\" />\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"amount\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" disabled className={`form-control ${errors.comments && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"Comments\" name=\"comments\" />\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"comments\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" disabled className={`form-control ${errors.invoice_number && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"Invoice Number\" name=\"invoice_number\" />\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"invoice_number\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t<Select className={`w-100 form-control-select ${errors.invoice_group_id && isSubmitted ? \"is-invalid\" : \"\"}`} classNamePrefix=\"select\" options={groupsList} placeholder=\"Group\" isDisabled isSearchable={false} value={groupsList.find((i) => i.value === values?.invoice_group_id)} />\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"invoice_group_id\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\t\tclassName={`w-100 form-control-select ${errors.invoice_sub_group_id && isSubmitted ? \"is-invalid\" : \"\"}`}\n\t\t\t\t\t\t\t\t\t\t\tclassNamePrefix=\"select\"\n\t\t\t\t\t\t\t\t\t\t\toptions={subGroupsList}\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Sub Group\"\n\t\t\t\t\t\t\t\t\t\t\tisSearchable={false}\n\t\t\t\t\t\t\t\t\t\t\tisDisabled\n\t\t\t\t\t\t\t\t\t\t\tvalue={subGroupsList.find((i) => i.value === values?.invoice_sub_group_id)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"invoice_sub_group_id\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t<Select className={`w-100 form-control-select ${errors.invoice_item_id && isSubmitted ? \"is-invalid\" : \"\"}`} classNamePrefix=\"select\" options={itemsList} placeholder=\"Items\" isDisabled isSearchable={false} value={itemsList.find((i) => i.value === values?.invoice_item_id)} />\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"invoice_item_id\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t</Form>\n\t\t\t\t\t)}\n\t\t\t\t</Formik>\n\t\t\t</div>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default ExpenditureForm;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/checker-pending-entries/forms/salesForm.js",["990"],"import React, { useState, useEffect } from \"react\";\nimport { Row, Col, Modal } from \"react-bootstrap\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport moment from \"moment\";\nimport DatePicker from \"react-datepicker\";\n\nimport { callApi } from \"../../../../services/apiService\";\nimport { ApiConstants } from \"../../../../config/apiConstants\";\nimport { entryStatus } from \"../../../../enums/entryStatus\";\nimport { showNotification } from \"../../../../services/toasterService\";\n\nconst SalesForm = (props) => {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [invoiceDate, setinvoiceDate] = useState(null);\n  const [salesData, setsalesData] = useState(null);\n  const [showRecheckInvoice, setshowRecheckInvoice] = useState(false);\n\n  const SalesFormSchema = Yup.object().shape({\n\t\tinvoice_date: Yup.mixed().required(\"Please select Date\"),\n\t\tamount: Yup.string()\n\t\t\t.required(\"Please enter Amount\")\n\t\t\t.matches(/((\\+|-)?([0-9]+)(\\.[0-9]+)?)|((\\+|-)?\\.?[0-9]+)/, \"Please enter a valid Amount\"),\n\t\tcomments: Yup.string().required(\"Please enter Comments\"),\n\t\tinvoice_number: Yup.string().required(\"Please enter Invoice number\"),\n\t\tamount_exclude_vat: Yup.string(),\n\t\tvat_amount: Yup.string(),\n\t});\n\n  useEffect(() => {\n    if (props.entry?.entry_status_id === entryStatus.RECHECK) {\n      getData();\n    }\n  }, []);\n\n  const getData = () => {\n    props.onShowLoader(true);\n    let params = { entry_id: props.entry.id };\n    callApi(\"get\", ApiConstants.sales.getData, params, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          setsalesData(response.payload);\n          setinvoiceDate(new Date(response.payload.invoice_date));\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const checkInvoiceNumberExists = (invoice_number) =>\n    new Promise((resolve, reject) => {\n      callApi(\n        \"get\",\n        ApiConstants.entry.checkinvoicenumberexists +\n          \"?invoice_number=\" +\n          invoice_number,\n        null,\n        true\n      )\n        .then((response) => {\n          if (response && response.status_code === 200) {\n            resolve(response.payload.is_invoice_number_exist);\n          } else {\n            props.onShowLoader(false);\n            showNotification(\"Error\", response.message, \"error\");\n          }\n        })\n        .catch((error) => {\n          props.onShowLoader(false);\n          showNotification(\"Error\", \"Something went wrong\", \"error\");\n        });\n    });\n\n  const onSubmit = async (values) => {\n    props.onShowLoader(true);\n    let isInvoiceExists = false;\n    isInvoiceExists = await checkInvoiceNumberExists(values.invoice_number);\n    if (isInvoiceExists) {\n      props.onShowLoader(false);\n      setshowRecheckInvoice(true);\n      setsalesData(values);\n    } else {\n      saveFormData(values);\n    }\n  };\n\n  const saveFormData = (values) => {\n    props.onShowLoader(true);\n    let params = {\n      entry_id: props.entry.id,\n      invoice_date: moment(values.invoice_date).format(\"YYYY-MM-DD\"),\n      amount: parseFloat(values.amount),\n      amount_exclude_vat: parseFloat(values.amount_exclude_vat),\n      vat_amount: parseFloat(values.vat_amount),\n      comments: values.comments,\n      invoice_number: values.invoice_number,\n    };\n    callApi(\"post\", ApiConstants.sales.create, params, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 201) {\n          props.onSuccess();\n          showNotification(\"Success\", response.message, \"success\");\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const calculateAmtExclVat = (amount) => {\n    if (isNaN(amount)) return 0;\n    else\n      return ((amount * 100) / (100 + props.entry.vat_percentage)).toFixed(2);\n  };\n\n  const calculateVatAmt = (amount, amt_excl_vat) => {\n    if (isNaN(amount)) return 0;\n    else return (amount - amt_excl_vat).toFixed(2);\n  };\n\n  return (\n    <React.Fragment>\n      <div>\n        <Formik\n          enableReinitialize={true}\n          initialValues={{\n            invoice_date: salesData?.invoice_date\n              ? new Date(salesData?.invoice_date)\n              : \"\",\n            amount: salesData?.amount ? salesData?.amount : \"\",\n            comments: salesData?.comments ? salesData?.comments : \"\",\n            invoice_number: salesData?.invoice_number\n              ? salesData?.invoice_number\n              : \"\",\n            amount_exclude_vat: salesData?.amount_exclude_vat\n              ? salesData?.amount_exclude_vat\n              : \"\",\n            vat_amount: salesData?.vat_amount ? salesData?.vat_amount : \"\",\n          }}\n          validationSchema={SalesFormSchema}\n          onSubmit={(values) => onSubmit(values)}>\n          {({ errors, handleChange, setFieldValue }) => (\n            <Form>\n              <Row>\n                <Col xs={12}>\n                  <div className=\"date-picker-container mb-3\">\n                    <DatePicker\n                      className={`form-control ${\n                        errors.invoice_date && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholderText=\"Date\"\n                      dateFormat=\"dd/MM/yyyy\"\n                      selected={invoiceDate}\n                      minDate={\n                        new Date(\n                          props?.vatPeriod?.current_vat_period?.start_period_date?.date\n                        )\n                      }\n                      maxDate={\n                        new Date(\n                          props?.vatPeriod?.current_vat_period?.end_period_date?.date\n                        )\n                      }\n                      onChange={(value) => {\n                        setinvoiceDate(value);\n                        let event = {\n                          target: {\n                            name: \"invoice_date\",\n                            value: value,\n                          },\n                        };\n                        handleChange(event);\n                      }}\n                    />\n                    <i className=\"feather icon-calendar\"></i>\n                    <ErrorMessage name=\"invoice_date\">\n                      {(msg) => (\n                        <div className=\"invalid-feedback d-block\">{msg}</div>\n                      )}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      className={`form-control ${\n                        errors.amount && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholder=\"Amount\"\n                      name=\"amount\"\n                      onChange={(e) => {\n                        let value = e.target.value;\n                        let amt_excl_vat = calculateAmtExclVat(value);\n                        let vat_amt = calculateVatAmt(value, amt_excl_vat);\n                        setFieldValue(\"amount_exclude_vat\", amt_excl_vat);\n                        setFieldValue(\"vat_amount\", vat_amt);\n                        let event = {\n                          target: {\n                            name: \"amount\",\n                            value: value,\n                          },\n                        };\n                        handleChange(event);\n                      }}\n                    />\n                    <ErrorMessage name=\"amount\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      className={`form-control ${\n                        errors.comments && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholder=\"Comments\"\n                      name=\"comments\"\n                    />\n                    <ErrorMessage name=\"comments\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      className={`form-control ${\n                        errors.invoice_number && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholder=\"Invoice Number\"\n                      name=\"invoice_number\"\n                    />\n                    <ErrorMessage name=\"invoice_number\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      className={`form-control ${\n                        errors.amount_exclude_vat && isSubmitted\n                          ? \"is-invalid\"\n                          : \"\"\n                      }`}\n                      disabled\n                      placeholder=\"Amount Exclude Vat\"\n                      name=\"amount_exclude_vat\"\n                    />\n                    <ErrorMessage name=\"amount_exclude_vat\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      className={`form-control ${\n                        errors.vat_amount && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      disabled\n                      placeholder=\"Vat Amount\"\n                      name=\"vat_amount\"\n                    />\n                    <ErrorMessage name=\"vat_amount\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n              </Row>\n\n              <div className=\"mt-3 text-center\">\n                <button\n                  type=\"submit\"\n                  style={{ width: 180, fontWeight: \"bold\" }}\n                  className=\"btn btn-primary shadow-2 mt-3\"\n                  onClick={() => setIsSubmitted(true)}>\n                  Submit\n                </button>\n              </div>\n            </Form>\n          )}\n        </Formik>\n      </div>\n      <Modal\n        size=\"md\"\n        show={showRecheckInvoice}\n        backdrop=\"static\"\n        keyboard={true}\n        backdropClassName=\"nested-modal\">\n        <Modal.Header>\n          <h5 className=\"card-title\">Warning!</h5>\n        </Modal.Header>\n        <Modal.Body>\n          <div>\n            The Invoice ID is already used. Do you want to proceed with this?\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <div>\n            <button\n              className=\"btn btn-outline-warning\"\n              onClick={() => setshowRecheckInvoice(false)}>\n              No\n            </button>\n            <button\n              className=\"btn btn-warning\"\n              onClick={() => {\n                setshowRecheckInvoice(false);\n                saveFormData(salesData);\n              }}>\n              Yes\n            </button>\n          </div>\n        </Modal.Footer>\n      </Modal>\n    </React.Fragment>\n  );\n};\n\nexport default SalesForm;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/checker-pending-entries/forms/expenditureForm.js",["991","992"],"import React, { useState, useEffect } from \"react\";\nimport { Row, Col, Modal } from \"react-bootstrap\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport DatePicker from \"react-datepicker\";\nimport moment from \"moment\";\nimport Select from \"react-select\";\n\nimport { callApi } from \"../../../../services/apiService\";\nimport { ApiConstants } from \"../../../../config/apiConstants\";\nimport { entryStatus } from \"../../../../enums/entryStatus\";\nimport { showNotification } from \"../../../../services/toasterService\";\n\nconst ExpenditureForm = (props) => {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [invoiceDate, setinvoiceDate] = useState(null);\n  const [expenditureData, setexpenditureData] = useState(null);\n  const [groupsList, setGroupsList] = useState([]);\n  const [subGroupsList, setSubGroupsList] = useState([]);\n  const [itemsList, setItemsList] = useState([]);\n  const [selectedSubgroup, setSelectedSubgroup] = useState(\"\");\n  const [selectedGroupItem, setSelectedGroupItem] = useState(\"\");\n  const [showRecheckInvoice, setshowRecheckInvoice] = useState(false);\n\n  const ExpenditureFormSchema = Yup.object().shape({\n\t\tinvoice_date: Yup.mixed().required(\"Please select Date\"),\n\t\tamount: Yup.string()\n\t\t\t.required(\"Please enter Amount\")\n\t\t\t.matches(/((\\+|-)?([0-9]+)(\\.[0-9]+)?)|((\\+|-)?\\.?[0-9]+)/, \"Please enter a valid Amount\"),\n\t\tcomments: Yup.string().required(\"Please enter Comment\"),\n\t\tinvoice_number: Yup.string().required(\"Please enter Invoice number\"),\n\t\tinvoice_group_id: Yup.string().required(\"Please enter Group\"),\n\t\tinvoice_sub_group_id: Yup.string().required(\"Please enter Sub Group\"),\n\t\tinvoice_item_id: Yup.string().required(\"Please select Item\"),\n\t});\n\n  useEffect(() => {\n    invoiceExpGroups();\n  }, []);\n\n  useEffect(() => {\n    if (groupsList.length) {\n      if (props.entry?.entry_status_id === entryStatus.RECHECK) {\n        getData();\n      }\n    }\n  }, [groupsList]);\n\n  const getData = () => {\n    props.onShowLoader(true);\n    let params = { entry_id: props.entry.id };\n    callApi(\"get\", ApiConstants.expenditure.getData, params, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          setexpenditureData(response.payload);\n          setinvoiceDate(new Date(response.payload.invoice_date));\n          let group = groupsList.find(\n            (i) => i.id === response.payload.invoice_group_id\n          );\n          onChangeGroups(group);\n          let subgroup = group.invoice_sub_groups.find(\n            (i) => i.id === response.payload.invoice_sub_group_id\n          );\n          onChangeSubGroups(subgroup);\n\n          let groupitem = subgroup.invoice_items.find(\n            (i) => i.id === response.payload.invoice_item_id\n          );\n          setSelectedGroupItem({\n            ...groupitem,\n            value: groupitem.id,\n            label: groupitem.name,\n          });\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const checkInvoiceNumberExists = (invoice_number) =>\n    new Promise((resolve, reject) => {\n      callApi(\n        \"get\",\n        ApiConstants.entry.checkinvoicenumberexists +\n          \"?invoice_number=\" +\n          invoice_number,\n        null,\n        true\n      )\n        .then((response) => {\n          if (response && response.status_code === 200) {\n            resolve(response.payload.is_invoice_number_exist);\n          } else {\n            props.onShowLoader(false);\n            showNotification(\"Error\", response.message, \"error\");\n          }\n        })\n        .catch((error) => {\n          props.onShowLoader(false);\n          showNotification(\"Error\", \"Something went wrong\", \"error\");\n        });\n    });\n\n  const onSubmit = async (values) => {\n    props.onShowLoader(true);\n    let isInvoiceExists = false;\n    isInvoiceExists = await checkInvoiceNumberExists(values.invoice_number);\n    if (isInvoiceExists) {\n      props.onShowLoader(false);\n      setshowRecheckInvoice(true);\n      setexpenditureData(values);\n    } else {\n      saveFormData(values);\n    }\n  };\n\n  const saveFormData = (values) => {\n    props.onShowLoader(true);\n    let params = {\n      entry_id: props.entry.id,\n      invoice_date: moment(values.invoice_date).format(\"YYYY-MM-DD\"),\n      amount: parseFloat(values.amount),\n      comments: values.comments,\n      invoice_number: values.invoice_number,\n      invoice_group_id: values.invoice_group_id,\n      invoice_sub_group_id: values.invoice_sub_group_id,\n      invoice_item_id: values.invoice_item_id,\n    };\n    callApi(\"post\", ApiConstants.expenditure.create, params, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 201) {\n          props.onSuccess();\n          showNotification(\"Success\", response.message, \"success\");\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const invoiceExpGroups = () => {\n    props.onShowLoader(true);\n    callApi(\"get\", ApiConstants.lookups.invoiceexpgroups, null)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          let data = response.payload.map((i) => {\n            return { ...i, value: i.id, label: i.name };\n          });\n          setGroupsList(data);\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const onChangeGroups = (value) => {\n    let subGroups = value?.invoice_sub_groups?.map((i) => {\n      return { ...i, value: i.id, label: i.name };\n    });\n    setSubGroupsList(subGroups);\n  };\n\n  const onChangeSubGroups = (value) => {\n    let items = value?.invoice_items?.map((i) => {\n      return { ...i, value: i.id, label: i.name };\n    });\n    setItemsList(items);\n    setSelectedSubgroup({ ...value, value: value.id, label: value.name });\n  };\n\n  return (\n    <React.Fragment>\n      <div>\n        <Formik\n          enableReinitialize={true}\n          initialValues={{\n            invoice_date: expenditureData?.invoice_date\n              ? new Date(expenditureData?.invoice_date)\n              : \"\",\n            amount: expenditureData?.amount ? expenditureData?.amount : \"\",\n            comments: expenditureData?.comments\n              ? expenditureData?.comments\n              : \"\",\n            invoice_number: expenditureData?.invoice_number\n              ? expenditureData?.invoice_number\n              : \"\",\n            invoice_group_id: expenditureData?.invoice_group_id\n              ? expenditureData?.invoice_group_id\n              : \"\",\n            invoice_sub_group_id: expenditureData?.invoice_sub_group_id\n              ? expenditureData?.invoice_sub_group_id\n              : \"\",\n            invoice_item_id: expenditureData?.invoice_item_id\n              ? expenditureData?.invoice_item_id\n              : \"\",\n          }}\n          validationSchema={ExpenditureFormSchema}\n          onSubmit={(values) => onSubmit(values)}>\n          {({ errors, handleChange, setFieldValue, values }) => (\n            <Form>\n              <Row>\n                <Col xs={12}>\n                  <div className=\"date-picker-container mb-3\">\n                    <DatePicker\n                      className={`form-control ${\n                        errors.invoice_date && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholderText=\"Date\"\n                      dateFormat=\"dd/MM/yyyy\"\n                      selected={invoiceDate}\n                      minDate={\n                        new Date(\n                          props?.vatPeriod?.current_vat_period?.start_period_date?.date\n                        )\n                      }\n                      maxDate={\n                        new Date(\n                          props?.vatPeriod?.current_vat_period?.end_period_date?.date\n                        )\n                      }\n                      onChange={(value) => {\n                        setinvoiceDate(value);\n                        let event = {\n                          target: {\n                            name: \"invoice_date\",\n                            value: value,\n                          },\n                        };\n                        handleChange(event);\n                      }}\n                    />\n                    <i className=\"feather icon-calendar\"></i>\n                    <ErrorMessage name=\"invoice_date\">\n                      {(msg) => (\n                        <div className=\"invalid-feedback d-block\">{msg}</div>\n                      )}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      className={`form-control ${\n                        errors.amount && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholder=\"Amount\"\n                      name=\"amount\"\n                    />\n                    <ErrorMessage name=\"amount\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      className={`form-control ${\n                        errors.comments && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholder=\"Comments\"\n                      name=\"comments\"\n                    />\n                    <ErrorMessage name=\"comments\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      className={`form-control ${\n                        errors.invoice_number && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholder=\"Invoice Number\"\n                      name=\"invoice_number\"\n                    />\n                    <ErrorMessage name=\"invoice_number\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Select\n                      className={`w-100 form-control-select ${\n                        errors.invoice_group_id && isSubmitted\n                          ? \"is-invalid\"\n                          : \"\"\n                      }`}\n                      classNamePrefix=\"select\"\n                      options={groupsList}\n                      placeholder=\"Group\"\n                      isSearchable={false}\n                      value={groupsList.find(\n                        (i) => i.value === values?.invoice_group_id\n                      )}\n                      onChange={(value) => {\n                        onChangeGroups(value);\n                        let event = {\n                          target: {\n                            name: \"invoice_group_id\",\n                            value: value.id,\n                          },\n                        };\n                        handleChange(event);\n                        setTimeout(() => {\n                          setFieldValue(\"invoice_sub_group_id\", \"\");\n                          setFieldValue(\"invoice_item_id\", \"\");\n                        }, 100);\n                        setSelectedSubgroup(\"\");\n                        setSelectedGroupItem(\"\");\n                      }}\n                    />\n                    <ErrorMessage name=\"invoice_group_id\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Select\n                      className={`w-100 form-control-select ${\n                        errors.invoice_sub_group_id && isSubmitted\n                          ? \"is-invalid\"\n                          : \"\"\n                      }`}\n                      classNamePrefix=\"select\"\n                      options={subGroupsList}\n                      placeholder=\"Sub Group\"\n                      isSearchable={false}\n                      value={selectedSubgroup}\n                      onChange={(value) => {\n                        onChangeSubGroups(value);\n                        let event = {\n                          target: {\n                            name: \"invoice_sub_group_id\",\n                            value: value.id,\n                          },\n                        };\n                        handleChange(event);\n                        setTimeout(() => {\n                          setFieldValue(\"invoice_item_id\", \"\");\n                        }, 100);\n                        setSelectedGroupItem(\"\");\n                      }}\n                    />\n                    <ErrorMessage name=\"invoice_sub_group_id\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Select\n                      className={`w-100 form-control-select ${\n                        errors.invoice_item_id && isSubmitted\n                          ? \"is-invalid\"\n                          : \"\"\n                      }`}\n                      classNamePrefix=\"select\"\n                      options={itemsList}\n                      placeholder=\"Items\"\n                      isSearchable={false}\n                      value={selectedGroupItem}\n                      onChange={(value) => {\n                        let event = {\n                          target: {\n                            name: \"invoice_item_id\",\n                            value: value.id,\n                          },\n                        };\n                        handleChange(event);\n                        setSelectedGroupItem(value);\n                      }}\n                    />\n                    <ErrorMessage name=\"invoice_item_id\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n              </Row>\n\n              <div className=\"text-center\">\n                <button\n                  type=\"submit\"\n                  style={{ width: 180, fontWeight: \"bold\" }}\n                  className=\"btn btn-primary shadow-2 mt-3\"\n                  onClick={() => setIsSubmitted(true)}>\n                  Submit\n                </button>\n              </div>\n            </Form>\n          )}\n        </Formik>\n      </div>\n      <Modal\n        size=\"md\"\n        show={showRecheckInvoice}\n        backdrop=\"static\"\n        keyboard={true}\n        backdropClassName=\"nested-modal\">\n        <Modal.Header>\n          <h5 className=\"card-title\">Warning!</h5>\n        </Modal.Header>\n        <Modal.Body>\n          <div>\n            The Invoice ID is already used. Do you want to proceed with this?\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <div>\n            <button\n              className=\"btn btn-outline-warning\"\n              onClick={() => setshowRecheckInvoice(false)}>\n              No\n            </button>\n            <button\n              className=\"btn btn-warning\"\n              onClick={() => {\n                setshowRecheckInvoice(false);\n                saveFormData(expenditureData);\n              }}>\n              Yes\n            </button>\n          </div>\n        </Modal.Footer>\n      </Modal>\n    </React.Fragment>\n  );\n};\n\nexport default ExpenditureForm;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/approved-entries/forms/salesForm.js",["993","994"],"import React, {useState, useEffect} from \"react\";\nimport {Row, Col} from \"react-bootstrap\";\nimport {Formik, Field, Form, ErrorMessage} from \"formik\";\nimport * as Yup from \"yup\";\nimport DatePicker from \"react-datepicker\";\n\nimport {callApi} from \"../../../../services/apiService\";\nimport {ApiConstants} from \"../../../../config/apiConstants\";\nimport {showNotification} from \"../../../../services/toasterService\";\n\nconst SalesForm = (props) => {\n\tconst [isSubmitted, setIsSubmitted] = useState(false);\n\tconst [invoiceDate, setinvoiceDate] = useState(null);\n\tconst [salesData, setsalesData] = useState(null);\n\n\tconst SalesFormSchema = Yup.object().shape({\n\t\tinvoice_date: Yup.mixed().required(\"Please select Date\"),\n\t\tamount: Yup.string()\n\t\t\t.required(\"Please enter Amount\")\n\t\t\t.matches(/^[0-9]*$/, \"Please enter a valid Amount\"),\n\t\tcomments: Yup.string().required(\"Please enter Comment\"),\n\t\tinvoice_number: Yup.string().required(\"Please enter Invoice number\"),\n\t\tamount_exclude_vat: Yup.string(),\n\t\tvat_amount: Yup.string(),\n\t});\n\n\tuseEffect(() => {\n\t\tgetData();\n\t}, []);\n\n\tconst getData = () => {\n\t\tprops.onShowLoader(true);\n\t\tlet params = {entry_id: props.entry.id};\n\t\tcallApi(\"get\", ApiConstants.sales.getData, params, true)\n\t\t\t.then((response) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tsetsalesData(response.payload);\n\t\t\t\t\t// console.log(response.payload);\n\t\t\t\t\tsetinvoiceDate(new Date(response.payload.invoice_date));\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<div>\n\t\t\t\t<Formik\n\t\t\t\t\tenableReinitialize={true}\n\t\t\t\t\tinitialValues={{\n\t\t\t\t\t\tinvoice_date: \"\",\n\t\t\t\t\t\tamount: salesData?.amount ? salesData?.amount : \"\",\n\t\t\t\t\t\tcomments: salesData?.comments ? salesData?.comments : \"\",\n\t\t\t\t\t\tinvoice_number: salesData?.invoice_number ? salesData?.invoice_number : \"\",\n\t\t\t\t\t\tamount_exclude_vat: salesData?.amount_exclude_vat ? salesData?.amount_exclude_vat : \"\",\n\t\t\t\t\t\tvat_amount: salesData?.vat_amount ? salesData?.vat_amount : \"\",\n\t\t\t\t\t}}\n\t\t\t\t\tvalidationSchema={SalesFormSchema}>\n\t\t\t\t\t{({errors}) => (\n\t\t\t\t\t\t<Form>\n\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t\t<div className=\"date-picker-container mb-3\">\n\t\t\t\t\t\t\t\t\t\t<DatePicker className={`form-control ${errors.invoice_date && isSubmitted ? \"is-invalid\" : \"\"}`} placeholderText=\"Date\" disabled dateFormat=\"dd/MM/yyyy\" selected={invoiceDate} />\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-calendar\"></i>\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"invoice_date\">{(msg) => <div className=\"invalid-feedback d-block\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" disabled className={`form-control ${errors.amount && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"Amount\" name=\"amount\" />\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"amount\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" disabled className={`form-control ${errors.comments && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"Comments\" name=\"comments\" />\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"comments\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" disabled className={`form-control ${errors.invoice_number && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"Invoice Number\" name=\"invoice_number\" />\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"invoice_number\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className={`form-control ${errors.amount_exclude_vat && isSubmitted ? \"is-invalid\" : \"\"}`} disabled placeholder=\"Amount Exclude Vat\" name=\"amount_exclude_vat\" />\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"amount_exclude_vat\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className={`form-control ${errors.vat_amount && isSubmitted ? \"is-invalid\" : \"\"}`} disabled placeholder=\"Vat Amount\" name=\"vat_amount\" />\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"vat_amount\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t</Form>\n\t\t\t\t\t)}\n\t\t\t\t</Formik>\n\t\t\t</div>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default SalesForm;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/checker-pending-entries/forms/purchaseForm.js",["995","996","997"],"import React, {useState, useEffect} from \"react\";\nimport {Row, Col, Table, Modal} from \"react-bootstrap\";\nimport {Formik, useFormikContext, Field, Form, ErrorMessage, FieldArray} from \"formik\";\nimport * as Yup from \"yup\";\nimport DatePicker from \"react-datepicker\";\nimport moment from \"moment\";\nimport Select from \"react-select\";\n\nimport {callApi} from \"../../../../services/apiService\";\nimport {ApiConstants} from \"../../../../config/apiConstants\";\nimport {entryStatus} from \"../../../../enums/entryStatus\";\nimport {showNotification} from \"../../../../services/toasterService\";\n\nconst PurchaseForm = (props) => {\n\tconst [isSubmitted, setIsSubmitted] = useState(false);\n\tconst [invoiceDate, setinvoiceDate] = useState(null);\n\tconst [purchaseData, setPurchaseData] = useState(null);\n\tconst [groupsList, setGroupsList] = useState([]);\n\tconst [suppliersList, setSuppliersList] = useState([]);\n\tconst [showRecheckInvoice, setshowRecheckInvoice] = useState(false);\n\n\tconst PurchaseFormSchema = Yup.object().shape({\n\t\tsupplier_id: Yup.mixed().required(\"Please select Supplier\"),\n\t\ttrn: Yup.string(),\n\t\tinvoice_number: Yup.string().required(\"Please enter Invoice number\"),\n\t\tinvoice_date: Yup.mixed().required(\"Please select Date\"),\n\t\tinvoice_details: Yup.array().of(\n\t\t\tYup.object().shape({\n\t\t\t\tinvoice_group_id: Yup.string().required(\"Please select Group\"),\n\t\t\t\tinvoice_sub_group_id: Yup.string().required(\"Please select Sub Group\"),\n\t\t\t\tinvoice_item_id: Yup.string().required(\"Please select Item\"),\n\t\t\t\tunit_price: Yup.string().required(\"Please enter Unit Price\"),\n\t\t\t\tquantity: Yup.string().required(\"Please enter Quantity\"),\n\t\t\t\tamount: Yup.string().required(\"Please enter Amount\"),\n\t\t\t})\n\t\t),\n\t\tsubtotal: Yup.string(),\n\t\tdiscount: Yup.string(),\n\t\tvatamount: Yup.string(),\n\t\ttotalamount: Yup.string(),\n\t});\n\n\tuseEffect(() => {\n\t\tgetSuppliers();\n\t\tinvoicePurchaseGroups();\n\t}, []);\n\n\tuseEffect(() => {\n\t\tif (groupsList.length) {\n\t\t\tif (props.entry?.entry_status_id === entryStatus.RECHECK) {\n\t\t\t\tgetData();\n\t\t\t}\n\t\t}\n\t}, [groupsList]);\n\n\tconst getData = () => {\n\t\tprops.onShowLoader(true);\n\t\tlet params = {entry_id: props.entry.id};\n\t\tcallApi(\"get\", ApiConstants.purchase.getData, params, true)\n\t\t\t.then((response) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tsetPurchaseData(response.payload);\n\t\t\t\t\tsetinvoiceDate(new Date(response.payload?.header?.invoice_date));\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\tconst checkInvoiceNumberExists = (invoice_number) =>\n\t\tnew Promise((resolve, reject) => {\n\t\t\tcallApi(\"get\", ApiConstants.entry.checkinvoicenumberexists + \"?invoice_number=\" + invoice_number, null, true)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\t\tresolve(response.payload.is_invoice_number_exist);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprops.onShowLoader(false);\n\t\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tprops.onShowLoader(false);\n\t\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t\t});\n\t\t});\n\n\tconst onSubmit = async (values) => {\n\t\tprops.onShowLoader(true);\n\t\tlet isInvoiceExists = false;\n\t\tisInvoiceExists = await checkInvoiceNumberExists(values.invoice_number);\n\t\tif (isInvoiceExists) {\n\t\t\tprops.onShowLoader(false);\n\t\t\tsetshowRecheckInvoice(true);\n\t\t\tsetPurchaseData(values);\n\t\t} else {\n\t\t\tsaveFormData(values);\n\t\t}\n\t};\n\n\tconst saveFormData = (values) => {\n\t\tprops.onShowLoader(true);\n\t\tlet params = {\n\t\t\tentry_id: props.entry.id,\n\t\t\tinvoice_date: moment(values.invoice_date).format(\"YYYY-MM-DD\"),\n\t\t\tinvoice_number: values.invoice_number,\n\t\t\tsupplier_id: values.supplier_id,\n\t\t\tsub_total: values.subtotal,\n\t\t\tdiscount: values.discount ? values.discount : 0,\n\t\t\tvat_amount: values.vatamount,\n\t\t\ttotal_amount: values.totalamount,\n\t\t\tpurchase_details: values.invoice_details.map((i) => {\n\t\t\t\treturn {\n\t\t\t\t\tinvoice_group_id: i.invoice_group_id,\n\t\t\t\t\tinvoice_sub_group_id: i.invoice_sub_group_id,\n\t\t\t\t\tinvoice_item_id: i.invoice_item_id,\n\t\t\t\t\tprice: i.unit_price,\n\t\t\t\t\tqty: i.quantity,\n\t\t\t\t\tamount: i.amount,\n\t\t\t\t};\n\t\t\t}),\n\t\t};\n\t\tcallApi(\"post\", ApiConstants.purchase.create, params, true)\n\t\t\t.then((response) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tif (response && response.status_code === 201) {\n\t\t\t\t\tprops.onSuccess();\n\t\t\t\t\tshowNotification(\"Success\", response.message, \"success\");\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\tconst invoicePurchaseGroups = () => {\n\t\tprops.onShowLoader(true);\n\t\tcallApi(\"get\", ApiConstants.lookups.invoicepurchasegroups, null, true)\n\t\t\t.then((response) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tlet data = response.payload.map((i) => {\n\t\t\t\t\t\treturn {...i, value: i.id, label: i.name};\n\t\t\t\t\t});\n\t\t\t\t\tsetGroupsList(data);\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\tconst getSuppliers = () => {\n\t\tprops.onShowLoader(true);\n\t\tcallApi(\"get\", ApiConstants.lookups.getSuppliers, null)\n\t\t\t.then((response) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tlet suppliers = response.payload.map((i) => {\n\t\t\t\t\t\treturn {...i, value: i.id, label: i.name};\n\t\t\t\t\t});\n\t\t\t\t\tsetSuppliersList(suppliers);\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\tconst getSubGroups = (groupId) => {\n\t\tlet selectedGroup = groupsList.find((i) => i.id === groupId);\n\t\tlet subGroups = selectedGroup\n\t\t\t? selectedGroup.invoice_sub_groups.map((i) => {\n          return { ...i, value: i.id, label: i.name };\n        })\n      : [];\n    return subGroups;\n  };\n\n  const getSelectedSubGroup = (groupId, selectedId) => {\n    let selectedGroup = groupsList.find((i) => i.id === groupId);\n    let subGroups = selectedGroup\n      ? selectedGroup.invoice_sub_groups.map((i) => {\n          return { ...i, value: i.id, label: i.name };\n        })\n      : [];\n\n\t\tlet selectedSubGroup = null;\n\t\tif (subGroups && selectedId) {\n\t\t\tselectedSubGroup = subGroups.find((i) => i.id === selectedId);\n\t\t}\n\t\treturn selectedSubGroup;\n\t};\n\n\tconst getSubItems = (groupId, subgroupId) => {\n\t\tlet selectedGroup = groupsList.find((i) => i.id === groupId);\n\t\tlet subGroups = selectedGroup ? selectedGroup.invoice_sub_groups : [];\n\t\tlet selectedSubGroup = subGroups.find((i) => i.id === subgroupId);\n\t\tlet subItems = selectedSubGroup\n\t\t\t? selectedSubGroup.invoice_items.map((i) => {\n\t\t\t\t\treturn {...i, value: i.id, label: i.name};\n\t\t\t  })\n\t\t\t: [];\n\t\treturn subItems;\n\t};\n\n  const getSelectedSubItem = (groupId, subgroupId, selectedId) => {\n    let selectedGroup = groupsList.find((i) => i.id === groupId);\n    let subGroups = selectedGroup ? selectedGroup.invoice_sub_groups : [];\n    let selectedSubGroup = subGroups.find((i) => i.id === subgroupId);\n    let subItems = selectedSubGroup\n      ? selectedSubGroup.invoice_items.map((i) => {\n\t\t\t\t\treturn {...i, value: i.id, label: i.name};\n\t\t\t  })\n\t\t\t: [];\n\n    let selectedSubItem = null;\n    if (subItems && selectedId) {\n      selectedSubItem = subItems.find((i) => i.id === selectedId);\n    }\n    return selectedSubItem;\n  };\n\n\tconst calculateTotal = (values, setFieldValue, index, fieldValue, fieldType) => {\n\t\tlet amount = 0;\n\t\tif (fieldType === \"unit_price\") amount = values.invoice_details[index].quantity * fieldValue;\n\t\tif (fieldType === \"quantity\") amount = values.invoice_details[index].unit_price * fieldValue;\n\n\t\tsetFieldValue(`invoice_details.${index}.amount`, amount);\n\t\tvalues.invoice_details[index].amount = amount;\n\n\t\tlet subtotal = values.invoice_details.reduce((sum, item) => {\n\t\t\treturn sum + item.amount;\n\t\t}, 0);\n\t\tsetFieldValue(\"subtotal\", subtotal);\n\t\tvalues.subtotal = subtotal;\n\n\t\tlet discountAmt = values.discount ? values.discount : 0;\n\t\tlet vatamount = ((values.subtotal - discountAmt) * props.entry.vat_percentage) / 100;\n\t\tsetFieldValue(\"vatamount\", vatamount);\n\n\t\tlet totalamount = values.subtotal - discountAmt + vatamount;\n\t\tsetFieldValue(\"totalamount\", totalamount);\n\t};\n\n\tconst refreshTotal = (values, setFieldValue) => {\n\t\tlet subtotal = values.invoice_details.reduce((sum, item) => {\n\t\t\treturn sum + item.amount;\n\t\t}, 0);\n\t\tvalues.subtotal = subtotal;\n\n\t\tlet discountAmt = values.discount ? values.discount : 0;\n\t\tlet vatamount = ((values.subtotal - discountAmt) * props.entry.vat_percentage) / 100;\n\n\t\tlet totalamount = values.subtotal - discountAmt + vatamount;\n\t\tsetTimeout(() => {\n\t\t\tsetFieldValue(\"subtotal\", subtotal);\n\t\t\tsetFieldValue(\"vatamount\", vatamount);\n\t\t\tsetFieldValue(\"totalamount\", totalamount);\n\t\t}, 100);\n\t};\n\n\tconst handleKeypress = (e) => {\n\t\tconst characterCode = e.key;\n\t\tconst actionKeys = [\"Backspace\", \"Tab\", \"ArrowLeft\", \"ArrowRight\", \".\"];\n\t\tif (actionKeys.includes(characterCode)) return;\n\n\t\tconst characterNumber = Number(characterCode);\n\t\tif (characterNumber >= 0 && characterNumber <= 9) {\n\t\t\tif (e.currentTarget.value && e.currentTarget.value.length) {\n\t\t\t\treturn;\n\t\t\t} else if (characterNumber === 0) {\n\t\t\t\te.preventDefault();\n\t\t\t}\n\t\t} else {\n\t\t\te.preventDefault();\n\t\t}\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<div>\n\t\t\t\t<Formik\n\t\t\t\t\tenableReinitialize={true}\n\t\t\t\t\tinitialValues={{\n\t\t\t\t\t\tsupplier_id: purchaseData?.header?.supplier_id ? purchaseData.header.supplier_id : \"\",\n\t\t\t\t\t\ttrn: purchaseData?.header?.supplier_trn ? purchaseData.header.supplier_trn : \"\",\n\t\t\t\t\t\tinvoice_number: purchaseData?.header?.invoice_number ? purchaseData.header.invoice_number : \"\",\n\t\t\t\t\t\tinvoice_date: purchaseData?.header?.invoice_date ? new Date(purchaseData?.header?.invoice_date) : \"\",\n\t\t\t\t\t\tinvoice_details: purchaseData?.details\n\t\t\t\t\t\t\t? purchaseData.details.map((i) => {\n\t\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\tinvoice_group_id: i.invoice_group_id,\n\t\t\t\t\t\t\t\t\t\tinvoice_sub_group_id: i.invoice_sub_group_id,\n\t\t\t\t\t\t\t\t\t\tinvoice_item_id: i.invoice_item_id,\n\t\t\t\t\t\t\t\t\t\tunit_price: i.price,\n\t\t\t\t\t\t\t\t\t\tquantity: i.qty,\n\t\t\t\t\t\t\t\t\t\tamount: i.amount,\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t  })\n\t\t\t\t\t\t\t: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tinvoice_group_id: \"\",\n\t\t\t\t\t\t\t\t\t\tinvoice_sub_group_id: \"\",\n\t\t\t\t\t\t\t\t\t\tinvoice_item_id: \"\",\n\t\t\t\t\t\t\t\t\t\tunit_price: \"\",\n\t\t\t\t\t\t\t\t\t\tquantity: \"\",\n\t\t\t\t\t\t\t\t\t\tamount: \"\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t  ],\n\t\t\t\t\t\tsubtotal: purchaseData?.header?.sub_total ? purchaseData.header.sub_total : \"\",\n\t\t\t\t\t\tdiscount: purchaseData?.header?.discount ? purchaseData.header.discount : \"0\",\n\t\t\t\t\t\tvatamount: purchaseData?.header?.vat_amount ? purchaseData.header.vat_amount : \"\",\n\t\t\t\t\t\ttotalamount: purchaseData?.header?.total_amount ? purchaseData.header.total_amount : \"\",\n\t\t\t\t\t}}\n\t\t\t\t\tvalidationSchema={PurchaseFormSchema}\n\t\t\t\t\tonSubmit={(values) => onSubmit(values)}>\n\t\t\t\t\t{({errors, handleChange, setFieldValue, values, validateForm}) => (\n\t\t\t\t\t\t<Form>\n\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t<Col lg={6} xs={12}>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\t\tclassName={`w-100 form-control-select ${errors.supplier_id && isSubmitted ? \"is-invalid\" : \"\"}`}\n\t\t\t\t\t\t\t\t\t\t\tclassNamePrefix=\"select\"\n\t\t\t\t\t\t\t\t\t\t\toptions={suppliersList}\n\t\t\t\t\t\t\t\t\t\t\tvalue={suppliersList.find((i) => i.value === values?.supplier_id)}\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Supplier\"\n\t\t\t\t\t\t\t\t\t\t\tisSearchable={false}\n\t\t\t\t\t\t\t\t\t\t\tonChange={(value) => {\n\t\t\t\t\t\t\t\t\t\t\t\tlet event = {\n\t\t\t\t\t\t\t\t\t\t\t\t\ttarget: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: \"supplier_id\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue: value.id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\thandleChange(event);\n\t\t\t\t\t\t\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetFieldValue(\"trn\", value.trn);\n\t\t\t\t\t\t\t\t\t\t\t\t}, 100);\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"supplier_id\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col lg={6} xs={12}>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" disabled className={`form-control ${errors.trn && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"TRN\" name=\"trn\" />\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"trn\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col lg={6} xs={12}>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className={`form-control ${errors.invoice_number && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"Invoice Number\" name=\"invoice_number\" />\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"invoice_number\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col lg={6} xs={12}>\n\t\t\t\t\t\t\t\t\t<div className=\"date-picker-container mb-3\">\n\t\t\t\t\t\t\t\t\t\t<DatePicker\n\t\t\t\t\t\t\t\t\t\t\tclassName={`form-control ${errors.invoice_date && isSubmitted ? \"is-invalid\" : \"\"}`}\n\t\t\t\t\t\t\t\t\t\t\tplaceholderText=\"Date\"\n\t\t\t\t\t\t\t\t\t\t\tdateFormat=\"dd/MM/yyyy\"\n\t\t\t\t\t\t\t\t\t\t\tselected={invoiceDate}\n\t\t\t\t\t\t\t\t\t\t\tminDate={new Date(props?.vatPeriod?.current_vat_period?.start_period_date?.date)}\n\t\t\t\t\t\t\t\t\t\t\tmaxDate={new Date(props?.vatPeriod?.current_vat_period?.end_period_date?.date)}\n\t\t\t\t\t\t\t\t\t\t\tonChange={(value) => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetinvoiceDate(value);\n\t\t\t\t\t\t\t\t\t\t\t\tlet event = {\n\t\t\t\t\t\t\t\t\t\t\t\t\ttarget: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: \"invoice_date\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\thandleChange(event);\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-calendar\"></i>\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"invoice_date\">{(msg) => <div className=\"invalid-feedback d-block\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t\t\t\t<Col lg={12} xs={12} className=\"overflow-auto\">\n\t\t\t\t\t\t\t\t\t<Table className=\"purchase-grid\">\n\t\t\t\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t<th>#</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th width=\"120\">Group</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th width=\"120\">Sub Group</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th width=\"120\">Item Name</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th>Unit Price</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th>Quantity</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th>Amount</th>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t\t\t<FieldArray\n\t\t\t\t\t\t\t\t\t\t\t\tname=\"invoice_details\"\n\t\t\t\t\t\t\t\t\t\t\t\trender={(arrayHelpers) => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{values.invoice_details.map((item, index) => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<tr key={index}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<th scope=\"row\">{index + 1}</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={`w-100 form-control-select ${errors.invoice_details && errors.invoice_details[index] && errors.invoice_details[index].invoice_group_id && isSubmitted ? \"is-invalid\" : \"\"}`}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassNamePrefix=\"select\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toptions={groupsList}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={groupsList.find((i) => i.value === values?.invoice_details[index].invoice_group_id)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Select\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tisSearchable={false}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(value) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet event = {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttarget: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: `invoice_details.${index}.invoice_group_id`,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue: value.id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleChange(event);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetFieldValue(`invoice_details.${index}.invoice_sub_group_id`, \"\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetFieldValue(`invoice_details.${index}.invoice_item_id`, \"\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}, 100);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={`w-100 form-control-select ${errors.invoice_details && errors.invoice_details[index] && errors.invoice_details[index].invoice_sub_group_id && isSubmitted ? \"is-invalid\" : \"\"}`}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassNamePrefix=\"select\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toptions={getSubGroups(values.invoice_details[index].invoice_group_id)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={getSelectedSubGroup(values.invoice_details[index].invoice_group_id, values.invoice_details[index].invoice_sub_group_id)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Select\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tisSearchable={false}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(value) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet event = {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttarget: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: `invoice_details.${index}.invoice_sub_group_id`,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue: value.id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleChange(event);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetFieldValue(`invoice_details.${index}.invoice_item_id`, \"\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}, 100);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={`w-100 form-control-select ${errors.invoice_details && errors.invoice_details[index] && errors.invoice_details[index].invoice_item_id && isSubmitted ? \"is-invalid\" : \"\"}`}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassNamePrefix=\"select\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toptions={getSubItems(values.invoice_details[index].invoice_group_id, values.invoice_details[index].invoice_sub_group_id)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={getSelectedSubItem(values.invoice_details[index].invoice_group_id, values.invoice_details[index].invoice_sub_group_id, values.invoice_details[index].invoice_item_id)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Select\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tisSearchable={false}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(value) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet event = {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttarget: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: `invoice_details.${index}.invoice_item_id`,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue: value.id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleChange(event);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={`grid-input ${errors.invoice_details && errors.invoice_details[index] && errors.invoice_details[index].unit_price && isSubmitted ? \"is-invalid\" : \"\"}`}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname={`invoice_details.${index}.unit_price`}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={values.invoice_details[index].unit_price}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleChange(e);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcalculateTotal(values, setFieldValue, index, e.target.value, \"unit_price\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}, 100);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonKeyDown={handleKeypress}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmin=\".02\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstep=\"0.02\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={`grid-input ${errors.invoice_details && errors.invoice_details[index] && errors.invoice_details[index].quantity && isSubmitted ? \"is-invalid\" : \"\"}`}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname={`invoice_details.${index}.quantity`}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={values.invoice_details[index].quantity}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleChange(e);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcalculateTotal(values, setFieldValue, index, e.target.value, \"quantity\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}, 100);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className={`grid-input ${errors.invoice_details && errors.invoice_details[index] && errors.invoice_details[index].amount && isSubmitted ? \"is-invalid\" : \"\"}`} disabled name={`invoice_details.${index}.amount`} />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{values.invoice_details.length !== 1 && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"insert-row-btn text-primary mr-2\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tarrayHelpers.remove(index);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet updatedValues = JSON.parse(JSON.stringify(values));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdatedValues.invoice_details.splice(index, 1);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trefreshTotal(updatedValues, setFieldValue);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-minus-circle\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{index + 1 === values.invoice_details.length && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"insert-row-btn text-primary\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tarrayHelpers.push({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tinvoice_group_id: \"\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tinvoice_sub_group_id: \"\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tinvoice_item_id: \"\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tunit_price: \"\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tquantity: \"\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tamount: \"\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-plus-circle\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t<td colSpan=\"6\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"text-right\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label className=\"mr-3\">Sub Total</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className=\"grid-input\" disabled name=\"subtotal\" />\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t<td colSpan=\"6\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"text-right\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label className=\"mr-3\">Discount Rounded</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"grid-input\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tname=\"discount\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={values.discount}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleChange(e);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet discountAmt = e.target.value ? e.target.value : 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet vatamount = ((values.subtotal - discountAmt) * props.entry.vat_percentage) / 100;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetFieldValue(\"vatamount\", vatamount);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet totalamount = values.subtotal - discountAmt + vatamount;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetFieldValue(\"totalamount\", totalamount);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t<td colSpan=\"6\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"text-right\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label className=\"mr-3\">VAT Amount</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" disabled className=\"grid-input\" name=\"vatamount\" />\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t<td colSpan=\"6\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"text-right\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label className=\"mr-3\">Total</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" disabled className=\"grid-input\" name=\"totalamount\" />\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t\t\t</Table>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</Row>\n\n\t\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t\t<button type=\"submit\" style={{width: 180, fontWeight: \"bold\"}} className=\"btn btn-primary shadow-2 mt-3\" onClick={() => setIsSubmitted(true)}>\n\t\t\t\t\t\t\t\t\tSubmit\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Form>\n\t\t\t\t\t)}\n\t\t\t\t</Formik>\n\t\t\t</div>\n\t\t\t<Modal size=\"md\" show={showRecheckInvoice} backdrop=\"static\" keyboard={true} backdropClassName=\"nested-modal\">\n\t\t\t\t<Modal.Header>\n\t\t\t\t\t<h5 className=\"card-title\">Warning!</h5>\n\t\t\t\t</Modal.Header>\n\t\t\t\t<Modal.Body>\n\t\t\t\t\t<div>The Invoice ID is already used. Do you want to proceed with this?</div>\n\t\t\t\t</Modal.Body>\n\t\t\t\t<Modal.Footer>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<button className=\"btn btn-outline-warning\" onClick={() => setshowRecheckInvoice(false)}>\n\t\t\t\t\t\t\tNo\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn btn-warning\"\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tsetshowRecheckInvoice(false);\n\t\t\t\t\t\t\t\tsaveFormData(purchaseData);\n\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\tYes\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</Modal.Footer>\n\t\t\t</Modal>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default PurchaseForm;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/approved-entries/forms/purchaseForm.js",["998","999","1000","1001","1002","1003"],"import React, {useState, useEffect} from \"react\";\nimport {Row, Col, Table} from \"react-bootstrap\";\nimport {Formik, Field, Form, ErrorMessage, FieldArray} from \"formik\";\nimport * as Yup from \"yup\";\nimport DatePicker from \"react-datepicker\";\nimport Select from \"react-select\";\n\nimport {callApi} from \"../../../../services/apiService\";\nimport {ApiConstants} from \"../../../../config/apiConstants\";\nimport {entryStatus} from \"../../../../enums/entryStatus\";\nimport {showNotification} from \"../../../../services/toasterService\";\n\nconst PurchaseForm = (props) => {\n\tconst [isSubmitted, setIsSubmitted] = useState(false);\n\tconst [invoiceDate, setinvoiceDate] = useState(null);\n\tconst [purchaseData, setPurchaseData] = useState(null);\n\tconst [groupsList, setGroupsList] = useState([]);\n\tconst [suppliersList, setSuppliersList] = useState([]);\n\n\tconst PurchaseFormSchema = Yup.object().shape({\n\t\tsupplier_id: Yup.mixed().required(\"Please select Supplier\"),\n\t\ttrn: Yup.string(),\n\t\tinvoice_number: Yup.string().required(\"Please enter Invoice number\"),\n\t\tinvoice_date: Yup.mixed().required(\"Please select Date\"),\n\t\tinvoice_details: Yup.array().of(\n\t\t\tYup.object().shape({\n\t\t\t\tinvoice_group_id: Yup.string().required(\"Please select Group\"),\n\t\t\t\tinvoice_sub_group_id: Yup.string().required(\"Please select Sub Group\"),\n\t\t\t\tinvoice_item_id: Yup.string().required(\"Please select Item\"),\n\t\t\t\tunit_price: Yup.string().required(\"Please enter Unit Price\"),\n\t\t\t\tquantity: Yup.string().required(\"Please enter Quantity\"),\n\t\t\t\tamount: Yup.string().required(\"Please enter Amount\"),\n\t\t\t})\n\t\t),\n\t\tsubtotal: Yup.string(),\n\t\tdiscount: Yup.string(),\n\t\tvatamount: Yup.string(),\n\t\ttotalamount: Yup.string(),\n\t});\n\n\tuseEffect(() => {\n\t\tinvoicePurchaseGroups();\n\t\tgetSuppliers();\n\t}, []);\n\n\tuseEffect(() => {\n\t\tif (groupsList.length) {\n\t\t\tgetData();\n\t\t}\n\t}, [groupsList]);\n\n\tconst getData = () => {\n\t\tprops.onShowLoader(true);\n\t\tlet params = {entry_id: props.entry.id};\n\t\tcallApi(\"get\", ApiConstants.purchase.getData, params, true)\n\t\t\t.then((response) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tsetPurchaseData(response.payload);\n\t\t\t\t\tsetinvoiceDate(new Date(response.payload?.header?.invoice_date));\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\tconst invoicePurchaseGroups = () => {\n\t\tprops.onShowLoader(true);\n\t\tcallApi(\"get\", ApiConstants.lookups.invoicepurchasegroups, null, true)\n\t\t\t.then((response) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tlet data = response.payload.map((i) => {\n\t\t\t\t\t\treturn {...i, value: i.id, label: i.name};\n\t\t\t\t\t});\n\t\t\t\t\tsetGroupsList(data);\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\tconst getSuppliers = () => {\n\t\tprops.onShowLoader(true);\n\t\tcallApi(\"get\", ApiConstants.lookups.getSuppliers, null)\n\t\t\t.then((response) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tlet suppliers = response.payload.map((i) => {\n\t\t\t\t\t\treturn {...i, value: i.id, label: i.name};\n\t\t\t\t\t});\n\t\t\t\t\tsetSuppliersList(suppliers);\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\tconst getSubGroups = (groupId) => {\n\t\tlet selectedGroup = groupsList.find((i) => i.id === groupId);\n\t\tlet subGroups = selectedGroup\n\t\t\t? selectedGroup.invoice_sub_groups.map((i) => {\n\t\t\t\t\treturn {...i, value: i.id, label: i.name};\n\t\t\t  })\n\t\t\t: [];\n\t\treturn subGroups;\n\t};\n\n\tconst getSelectedSubGroup = (groupId, selectedId) => {\n\t\tlet selectedGroup = groupsList.find((i) => i.id === groupId);\n\t\tlet subGroups = selectedGroup\n\t\t\t? selectedGroup.invoice_sub_groups.map((i) => {\n\t\t\t\t\treturn {...i, value: i.id, label: i.name};\n\t\t\t  })\n\t\t\t: [];\n\n\t\tlet selectedSubGroup = null;\n\t\tif (subGroups && selectedId) {\n\t\t\tselectedSubGroup = subGroups.find((i) => i.id === selectedId);\n\t\t}\n\t\treturn selectedSubGroup;\n\t};\n\n\tconst getSubItems = (groupId, subgroupId) => {\n\t\tlet selectedGroup = groupsList.find((i) => i.id === groupId);\n\t\tlet subGroups = selectedGroup ? selectedGroup.invoice_sub_groups : [];\n\t\tlet selectedSubGroup = subGroups.find((i) => i.id === subgroupId);\n\t\tlet subItems = selectedSubGroup\n\t\t\t? selectedSubGroup.invoice_items.map((i) => {\n\t\t\t\t\treturn {...i, value: i.id, label: i.name};\n\t\t\t  })\n\t\t\t: [];\n\t\treturn subItems;\n\t};\n\n\tconst getSelectedSubItem = (groupId, subgroupId, selectedId) => {\n\t\tlet selectedGroup = groupsList.find((i) => i.id === groupId);\n\t\tlet subGroups = selectedGroup ? selectedGroup.invoice_sub_groups : [];\n\t\tlet selectedSubGroup = subGroups.find((i) => i.id === subgroupId);\n\t\tlet subItems = selectedSubGroup\n\t\t\t? selectedSubGroup.invoice_items.map((i) => {\n\t\t\t\t\treturn {...i, value: i.id, label: i.name};\n\t\t\t  })\n\t\t\t: [];\n\n\t\tlet selectedSubItem = null;\n\t\tif (subItems && selectedId) {\n\t\t\tselectedSubItem = subItems.find((i) => i.id === selectedId);\n\t\t}\n\t\treturn selectedSubItem;\n\t};\n\n\tconst calculateTotal = (values, setFieldValue, index, fieldValue, fieldType) => {\n\t\tlet amount = 0;\n\t\tif (fieldType === \"unit_price\") amount = values.invoice_details[index].quantity * fieldValue;\n\t\tif (fieldType === \"quantity\") amount = values.invoice_details[index].unit_price * fieldValue;\n\n\t\tsetFieldValue(`invoice_details.${index}.amount`, amount);\n\t\tvalues.invoice_details[index].amount = amount;\n\n\t\tlet subtotal = values.invoice_details.reduce((sum, item) => {\n\t\t\treturn sum + item.amount;\n\t\t}, 0);\n\t\tsetFieldValue(\"subtotal\", subtotal);\n\t\tvalues.subtotal = subtotal;\n\n\t\tlet discountAmt = values.discount ? values.discount : 0;\n\t\tlet vatamount = ((values.subtotal - discountAmt) * props.entry.vat_percentage) / 100;\n\t\tsetFieldValue(\"vatamount\", vatamount);\n\n\t\tlet totalamount = values.subtotal - discountAmt + vatamount;\n\t\tsetFieldValue(\"totalamount\", totalamount);\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<div>\n\t\t\t\t<Formik\n\t\t\t\t\tenableReinitialize={true}\n\t\t\t\t\tinitialValues={{\n\t\t\t\t\t\tsupplier_id: purchaseData?.header?.supplier_id ? purchaseData.header.supplier_id : \"\",\n\t\t\t\t\t\ttrn: purchaseData?.header?.supplier_trn ? purchaseData.header.supplier_trn : \"\",\n\t\t\t\t\t\tinvoice_number: purchaseData?.header?.invoice_number ? purchaseData.header.invoice_number : \"\",\n\t\t\t\t\t\tinvoice_date: \"\",\n\t\t\t\t\t\tinvoice_details: purchaseData?.details\n\t\t\t\t\t\t\t? purchaseData.details.map((i) => {\n\t\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\tinvoice_group_id: i.invoice_group_id,\n\t\t\t\t\t\t\t\t\t\tinvoice_sub_group_id: i.invoice_sub_group_id,\n\t\t\t\t\t\t\t\t\t\tinvoice_item_id: i.invoice_item_id,\n\t\t\t\t\t\t\t\t\t\tunit_price: i.price,\n\t\t\t\t\t\t\t\t\t\tquantity: i.qty,\n\t\t\t\t\t\t\t\t\t\tamount: i.amount,\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t  })\n\t\t\t\t\t\t\t: [],\n\t\t\t\t\t\tsubtotal: purchaseData?.header?.sub_total ? purchaseData.header.sub_total : \"\",\n\t\t\t\t\t\tdiscount: purchaseData?.header?.discount ? purchaseData.header.discount : \"0\",\n\t\t\t\t\t\tvatamount: purchaseData?.header?.vat_amount ? purchaseData.header.vat_amount : \"\",\n\t\t\t\t\t\ttotalamount: purchaseData?.header?.total_amount ? purchaseData.header.total_amount : \"\",\n\t\t\t\t\t}}\n\t\t\t\t\tvalidationSchema={PurchaseFormSchema}>\n\t\t\t\t\t{({errors, handleChange, setFieldValue, values}) => (\n\t\t\t\t\t\t<Form>\n\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t<Col xs={6}>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t<Select className={`w-100 form-control-select ${errors.supplier_id && isSubmitted ? \"is-invalid\" : \"\"}`} classNamePrefix=\"select\" options={suppliersList} placeholder=\"Supplier\" isSearchable={false} isDisabled value={suppliersList.find((i) => i.value === values?.supplier_id)} />\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"supplier_id\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col xs={6}>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" disabled className={`form-control ${errors.trn && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"TRN\" name=\"trn\" />\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"trn\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col xs={6}>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" disabled className={`form-control ${errors.invoice_number && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"Invoice Number\" name=\"invoice_number\" />\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"invoice_number\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col xs={6}>\n\t\t\t\t\t\t\t\t\t<div className=\"date-picker-container mb-3\">\n\t\t\t\t\t\t\t\t\t\t<DatePicker\n\t\t\t\t\t\t\t\t\t\t\tclassName={`form-control ${errors.invoice_date && isSubmitted ? \"is-invalid\" : \"\"}`}\n\t\t\t\t\t\t\t\t\t\t\tplaceholderText=\"Date\"\n\t\t\t\t\t\t\t\t\t\t\tdisabled\n\t\t\t\t\t\t\t\t\t\t\tdateFormat=\"dd/MM/yyyy\"\n\t\t\t\t\t\t\t\t\t\t\tselected={invoiceDate}\n\t\t\t\t\t\t\t\t\t\t\tonChange={(value) => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetinvoiceDate(value);\n\t\t\t\t\t\t\t\t\t\t\t\tlet event = {\n\t\t\t\t\t\t\t\t\t\t\t\t\ttarget: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: \"invoice_date\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\thandleChange(event);\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-calendar\"></i>\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"invoice_date\">{(msg) => <div className=\"invalid-feedback d-block\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t\t\t\t<Col lg={12}>\n\t\t\t\t\t\t\t\t\t<Table className=\"purchase-grid\">\n\t\t\t\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t<th>#</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th width=\"120\">Group</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th width=\"120\">Sub Group</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th width=\"120\">Item Name</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th>Unit Price</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th>Quantity</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th>Amount</th>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t\t\t<FieldArray\n\t\t\t\t\t\t\t\t\t\t\t\tname=\"invoice_details\"\n\t\t\t\t\t\t\t\t\t\t\t\trender={(arrayHelpers) => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{values.invoice_details.map((item, index) => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<tr key={index}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td scope=\"row\">{index + 1}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Select className=\"w-100 form-control-select\" classNamePrefix=\"select\" options={groupsList} value={groupsList.find((i) => i.value === values?.invoice_details[index].invoice_group_id)} placeholder=\"Select\" isSearchable={false} isDisabled />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"w-100 form-control-select\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassNamePrefix=\"select\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toptions={getSubGroups(values.invoice_details[index].invoice_group_id)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={getSelectedSubGroup(values.invoice_details[index].invoice_group_id, values.invoice_details[index].invoice_sub_group_id)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Select\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tisSearchable={false}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tisDisabled\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"w-100 form-control-select\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassNamePrefix=\"select\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toptions={getSubItems(values.invoice_details[index].invoice_group_id, values.invoice_details[index].invoice_sub_group_id)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={getSelectedSubItem(values.invoice_details[index].invoice_group_id, values.invoice_details[index].invoice_sub_group_id, values.invoice_details[index].invoice_item_id)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Select\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tisSearchable={false}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tisDisabled\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className=\"grid-input\" name={`invoice_details.${index}.unit_price`} value={values.invoice_details[index].unit_price} disabled />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className=\"grid-input\" name={`invoice_details.${index}.quantity`} value={values.invoice_details[index].quantity} disabled />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className=\"grid-input\" disabled name={`invoice_details.${index}.amount`} />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t<td colSpan=\"6\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"text-right\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label className=\"mr-3\">Sub Total</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className=\"grid-input\" name=\"subtotal\" disabled />\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t<td colSpan=\"6\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"text-right\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label className=\"mr-3\">Discount Rounded</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"grid-input\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tname=\"discount\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdisabled\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={values.discount}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleChange(e);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet discountAmt = e.target.value ? e.target.value : 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet vatamount = ((values.subtotal - discountAmt) * props.entry.vat_percentage) / 100;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetFieldValue(\"vatamount\", vatamount);\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet totalamount = values.subtotal - discountAmt + vatamount;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetFieldValue(\"totalamount\", totalamount);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t<td colSpan=\"6\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"text-right\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label className=\"mr-3\">VAT Amount</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" disabled className=\"grid-input\" name=\"vatamount\" />\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t<td colSpan=\"6\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"text-right\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label className=\"mr-3\">Total</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" disabled className=\"grid-input\" name=\"totalamount\" />\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t\t\t</Table>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t</Form>\n\t\t\t\t\t)}\n\t\t\t\t</Formik>\n\t\t\t</div>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default PurchaseForm;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/validator-pending-entries/forms/salesForm.js",["1004","1005"],"import React, { useState, useEffect, useRef } from \"react\";\nimport { Row, Col, Modal } from \"react-bootstrap\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport DatePicker from \"react-datepicker\";\n\nimport { entryStatus } from \"../../../../enums/entryStatus\";\nimport { showNotification } from \"../../../../services/toasterService\";\nimport { callApi } from \"../../../../services/apiService\";\nimport { ApiConstants } from \"../../../../config/apiConstants\";\n\nconst SalesForm = (props) => {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [invoiceDate, setinvoiceDate] = useState(null);\n  const [salesData, setsalesData] = useState(null);\n  const [showStatusConfirm, setStatusConfirm] = React.useState(false);\n  const [validatorAction, setvalidatorAction] = React.useState(\"\");\n  const actionComment = useRef(null);\n  const [enableRecheck, setenableRecheck] = useState(false);\n\n  const SalesFormSchema = Yup.object().shape({\n    invoice_date: Yup.mixed().required(\"Please select Date\"),\n    amount: Yup.string()\n      .required(\"Please enter Amount\")\n      .matches(/^[0-9]*$/, \"Please enter a valid Amount\"),\n    comments: Yup.string().required(\"Please enter Comment\"),\n    invoice_number: Yup.string().required(\"Please enter Invoice number\"),\n    amount_exclude_vat: Yup.string(),\n    vat_amount: Yup.string(),\n  });\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = () => {\n    props.onShowLoader(true);\n    let params = { entry_id: props.entry.id };\n    callApi(\"get\", ApiConstants.sales.getData, params, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          setsalesData(response.payload);\n          setinvoiceDate(new Date(response.payload.invoice_date));\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const entryAction = () => {\n    props.onShowLoader(true);\n    let params = {\n      entry_id: props.entry.id,\n      status_id: validatorAction,\n      comment: actionComment.current.value,\n    };\n\n    callApi(\"post\", ApiConstants.entry.setvalidatorstatus, params, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          props.onSuccess();\n          showNotification(\"Success\", response.message, \"success\");\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  return (\n    <React.Fragment>\n      <div>\n        <Formik\n          enableReinitialize={true}\n          initialValues={{\n            invoice_date: \"\",\n            amount: salesData?.amount ? salesData?.amount : \"\",\n            comments: salesData?.comments ? salesData?.comments : \"\",\n            invoice_number: salesData?.invoice_number\n              ? salesData?.invoice_number\n              : \"\",\n            amount_exclude_vat: salesData?.amount_exclude_vat\n              ? salesData?.amount_exclude_vat\n              : \"\",\n            vat_amount: salesData?.vat_amount ? salesData?.vat_amount : \"\",\n          }}\n          validationSchema={SalesFormSchema}>\n          {({ errors }) => (\n            <Form>\n              <Row>\n                <Col xs={12}>\n                  <div className=\"date-picker-container mb-3\">\n                    <DatePicker\n                      className={`form-control ${\n                        errors.invoice_date && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholderText=\"Date\"\n                      disabled\n                      dateFormat=\"dd/MM/yyyy\"\n                      selected={invoiceDate}\n                    />\n                    <i className=\"feather icon-calendar\"></i>\n                    <ErrorMessage name=\"invoice_date\">\n                      {(msg) => (\n                        <div className=\"invalid-feedback d-block\">{msg}</div>\n                      )}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      disabled\n                      className={`form-control ${\n                        errors.amount && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholder=\"Amount\"\n                      name=\"amount\"\n                    />\n                    <ErrorMessage name=\"amount\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      disabled\n                      className={`form-control ${\n                        errors.comments && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholder=\"Comments\"\n                      name=\"comments\"\n                    />\n                    <ErrorMessage name=\"comments\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      disabled\n                      className={`form-control ${\n                        errors.invoice_number && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholder=\"Invoice Number\"\n                      name=\"invoice_number\"\n                    />\n                    <ErrorMessage name=\"invoice_number\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      className={`form-control ${\n                        errors.amount_exclude_vat && isSubmitted\n                          ? \"is-invalid\"\n                          : \"\"\n                      }`}\n                      disabled\n                      placeholder=\"Amount Exclude Vat\"\n                      name=\"amount_exclude_vat\"\n                    />\n                    <ErrorMessage name=\"amount_exclude_vat\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      className={`form-control ${\n                        errors.vat_amount && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      disabled\n                      placeholder=\"Vat Amount\"\n                      name=\"vat_amount\"\n                    />\n                    <ErrorMessage name=\"vat_amount\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n              </Row>\n              <div className=\"mt-4\">\n                <div className=\"checkbox d-flex p-0\">\n                  <input\n                    type=\"checkbox\"\n                    name=\"checkbox-fill-1\"\n                    id=\"checkbox-fill-a1\"\n                    onChange={() => setenableRecheck(!enableRecheck)}\n                  />\n                  <label htmlFor=\"checkbox-fill-a1\" className=\"cr\">\n                    Enable Reject Entry\n                  </label>\n                </div>\n              </div>\n              <div className=\"mt-2 text-center\">\n                <button\n                  type=\"button\"\n                  disabled={!enableRecheck}\n                  style={{ width: 100, fontWeight: \"bold\" }}\n                  className=\"btn btn-danger shadow-2 mt-3 mr-3\"\n                  onClick={() => {\n                    setStatusConfirm(true);\n                    setvalidatorAction(entryStatus.REJECTED);\n                  }}>\n                  Reject\n                </button>\n                <button\n                  type=\"button\"\n                  style={{ width: 100, fontWeight: \"bold\" }}\n                  className=\"btn btn-warning shadow-2 mt-3 mr-3\"\n                  onClick={() => {\n                    setStatusConfirm(true);\n                    setvalidatorAction(entryStatus.RECHECK);\n                  }}>\n                  Recheck\n                </button>\n                <button\n                  type=\"button\"\n                  style={{ width: 100, fontWeight: \"bold\" }}\n                  className=\"btn btn-primary shadow-2 mt-3\"\n                  onClick={() => {\n                    setStatusConfirm(true);\n                    setvalidatorAction(entryStatus.APPROVED);\n                  }}>\n                  Approve\n                </button>\n              </div>\n            </Form>\n          )}\n        </Formik>\n      </div>\n      <Modal\n        size=\"md\"\n        show={showStatusConfirm}\n        backdrop=\"static\"\n        keyboard={true}\n        backdropClassName=\"nested-modal\">\n        <Modal.Header>\n          <h5 className=\"card-title\">\n            {validatorAction === entryStatus.APPROVED\n              ? \"Approve\"\n              : validatorAction === entryStatus.RECHECK\n              ? \"Recheck\"\n              : \"Reject\"}{\" \"}\n            Entry\n          </h5>\n        </Modal.Header>\n        <Modal.Body>\n          <div>\n            <span>\n              Are you sure that to{\" \"}\n              {validatorAction === entryStatus.APPROVED\n                ? \"Approve\"\n                : validatorAction === entryStatus.RECHECK\n                ? \"Recheck\"\n                : \"Reject\"}\n              ?\n            </span>\n          </div>\n          <div className=\"mt-4\">\n            <textarea\n              ref={actionComment}\n              className=\"form-control\"\n              placeholder=\"Comment\"></textarea>\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <div>\n            <button\n              className=\"btn btn-outline-primary\"\n              onClick={() => setStatusConfirm(false)}>\n              Cancel\n            </button>\n            <button\n              className={`btn ${\n                validatorAction === entryStatus.APPROVED\n                  ? \"btn-primary\"\n                  : validatorAction === entryStatus.RECHECK\n                  ? \"btn-warning\"\n                  : \"btn-danger\"\n              }`}\n              onClick={() => {\n                setStatusConfirm(false);\n                entryAction();\n              }}>\n              {validatorAction === entryStatus.APPROVED\n                ? \"Approve\"\n                : validatorAction === entryStatus.RECHECK\n                ? \"Recheck\"\n                : \"Reject\"}\n            </button>\n          </div>\n        </Modal.Footer>\n      </Modal>\n    </React.Fragment>\n  );\n};\n\nexport default SalesForm;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/validator-pending-entries/forms/expenditureForm.js",["1006","1007","1008"],"import React, { useState, useEffect, useRef } from \"react\";\nimport { Row, Col, Modal } from \"react-bootstrap\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport DatePicker from \"react-datepicker\";\nimport Select from \"react-select\";\n\nimport { entryStatus } from \"../../../../enums/entryStatus\";\nimport { showNotification } from \"../../../../services/toasterService\";\nimport { callApi } from \"../../../../services/apiService\";\nimport { ApiConstants } from \"../../../../config/apiConstants\";\n\nconst ExpenditureForm = (props) => {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [invoiceDate, setinvoiceDate] = useState(null);\n  const [expenditureData, setexpenditureData] = useState(null);\n  const [showStatusConfirm, setStatusConfirm] = React.useState(false);\n  const [validatorAction, setvalidatorAction] = React.useState(\"\");\n  const actionComment = useRef(null);\n  const [enableRecheck, setenableRecheck] = useState(false);\n  const [groupsList, setGroupsList] = useState([]);\n  const [subGroupsList, setSubGroupsList] = useState([]);\n  const [itemsList, setItemsList] = useState([]);\n\n  const ExpenditureFormSchema = Yup.object().shape({\n    invoice_date: Yup.mixed().required(\"Please select Date\"),\n    amount: Yup.string()\n      .required(\"Please enter Amount\")\n      .matches(/^[0-9]*$/, \"Please enter a valid Amount\"),\n    comments: Yup.string().required(\"Please enter Comment\"),\n    invoice_number: Yup.string().required(\"Please enter Invoice number\"),\n    invoice_group_id: Yup.string().required(\"Please enter Group\"),\n    invoice_sub_group_id: Yup.string().required(\"Please enter Sub Group\"),\n    invoice_item_id: Yup.string().required(\"Please select Item\"),\n  });\n\n  useEffect(() => {\n    invoiceExpGroups();\n  }, []);\n\n  useEffect(() => {\n    if (groupsList.length) getData();\n  }, [groupsList]);\n\n  const getData = () => {\n    props.onShowLoader(true);\n    let params = { entry_id: props.entry.id };\n    callApi(\"get\", ApiConstants.expenditure.getData, params, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          setexpenditureData(response.payload);\n          setinvoiceDate(new Date(response.payload.invoice_date));\n          let group = groupsList.find(\n            (i) => i.id === response.payload.invoice_group_id\n          );\n          onChangeGroups(group);\n          let subgroup = group.invoice_sub_groups.find(\n            (i) => i.id === response.payload.invoice_sub_group_id\n          );\n          onChangeSubGroups(subgroup);\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const entryAction = () => {\n    props.onShowLoader(true);\n    let params = {\n      entry_id: props.entry.id,\n      status_id: validatorAction,\n      comment: actionComment.current.value,\n    };\n\n    callApi(\"post\", ApiConstants.entry.setvalidatorstatus, params, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          props.onSuccess();\n          showNotification(\"Success\", response.message, \"success\");\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const invoiceExpGroups = () => {\n    props.onShowLoader(true);\n    callApi(\"get\", ApiConstants.lookups.invoiceexpgroups, null)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          let data = response.payload.map((i) => {\n            return { ...i, value: i.id, label: i.name };\n          });\n          setGroupsList(data);\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const onChangeGroups = (value) => {\n    let subGroups = value?.invoice_sub_groups?.map((i) => {\n      return { ...i, value: i.id, label: i.name };\n    });\n    setSubGroupsList(subGroups);\n  };\n\n  const onChangeSubGroups = (value) => {\n    let items = value?.invoice_items?.map((i) => {\n      return { ...i, value: i.id, label: i.name };\n    });\n    setItemsList(items);\n  };\n\n  return (\n    <React.Fragment>\n      <div>\n        <Formik\n          enableReinitialize={true}\n          initialValues={{\n            invoice_date: \"\",\n            amount: expenditureData?.amount ? expenditureData?.amount : \"\",\n            comments: expenditureData?.comments\n              ? expenditureData?.comments\n              : \"\",\n            invoice_number: expenditureData?.invoice_number\n              ? expenditureData?.invoice_number\n              : \"\",\n            invoice_group_id: expenditureData?.invoice_group_id\n              ? expenditureData?.invoice_group_id\n              : \"\",\n            invoice_sub_group_id: expenditureData?.invoice_sub_group_id\n              ? expenditureData?.invoice_sub_group_id\n              : \"\",\n            invoice_item_id: expenditureData?.invoice_item_id\n              ? expenditureData?.invoice_item_id\n              : \"\",\n          }}\n          validationSchema={ExpenditureFormSchema}>\n          {({ errors, values }) => (\n            <Form>\n              <Row>\n                <Col xs={12}>\n                  <div className=\"date-picker-container mb-3\">\n                    <DatePicker\n                      className={`form-control ${\n                        errors.invoice_date && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholderText=\"Date\"\n                      disabled\n                      dateFormat=\"dd/MM/yyyy\"\n                      selected={invoiceDate}\n                    />\n                    <i className=\"feather icon-calendar\"></i>\n                    <ErrorMessage name=\"invoice_date\">\n                      {(msg) => (\n                        <div className=\"invalid-feedback d-block\">{msg}</div>\n                      )}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      disabled\n                      className={`form-control ${\n                        errors.amount && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholder=\"Amount\"\n                      name=\"amount\"\n                    />\n                    <ErrorMessage name=\"amount\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      disabled\n                      className={`form-control ${\n                        errors.comments && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholder=\"Comments\"\n                      name=\"comments\"\n                    />\n                    <ErrorMessage name=\"comments\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      disabled\n                      className={`form-control ${\n                        errors.invoice_number && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholder=\"Invoice Number\"\n                      name=\"invoice_number\"\n                    />\n                    <ErrorMessage name=\"invoice_number\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Select\n                      className={`w-100 form-control-select ${\n                        errors.invoice_group_id && isSubmitted\n                          ? \"is-invalid\"\n                          : \"\"\n                      }`}\n                      classNamePrefix=\"select\"\n                      options={groupsList}\n                      placeholder=\"Group\"\n                      isDisabled\n                      isSearchable={false}\n                      value={groupsList.find(\n                        (i) => i.value === values?.invoice_group_id\n                      )}\n                    />\n                    <ErrorMessage name=\"invoice_group_id\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Select\n                      className={`w-100 form-control-select ${\n                        errors.invoice_sub_group_id && isSubmitted\n                          ? \"is-invalid\"\n                          : \"\"\n                      }`}\n                      classNamePrefix=\"select\"\n                      options={subGroupsList}\n                      placeholder=\"Sub Group\"\n                      isSearchable={false}\n                      isDisabled\n                      value={subGroupsList.find(\n                        (i) => i.value === values?.invoice_sub_group_id\n                      )}\n                    />\n                    <ErrorMessage name=\"invoice_sub_group_id\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Select\n                      className={`w-100 form-control-select ${\n                        errors.invoice_item_id && isSubmitted\n                          ? \"is-invalid\"\n                          : \"\"\n                      }`}\n                      classNamePrefix=\"select\"\n                      options={itemsList}\n                      placeholder=\"Items\"\n                      isDisabled\n                      isSearchable={false}\n                      value={itemsList.find(\n                        (i) => i.value === values?.invoice_item_id\n                      )}\n                    />\n                    <ErrorMessage name=\"invoice_item_id\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n              </Row>\n              <div className=\"mt-4\">\n                <div className=\"checkbox d-flex p-0\">\n                  <input\n                    type=\"checkbox\"\n                    name=\"checkbox-fill-1\"\n                    id=\"checkbox-fill-a1\"\n                    onChange={() => setenableRecheck(!enableRecheck)}\n                  />\n                  <label htmlFor=\"checkbox-fill-a1\" className=\"cr\">\n                    Enable Reject Entry\n                  </label>\n                </div>\n              </div>\n              <div className=\"mt-2 text-center\">\n                <button\n                  type=\"button\"\n                  disabled={!enableRecheck}\n                  style={{ width: 100, fontWeight: \"bold\" }}\n                  className=\"btn btn-danger shadow-2 mt-3 mr-3\"\n                  onClick={() => {\n                    setStatusConfirm(true);\n                    setvalidatorAction(entryStatus.REJECTED);\n                  }}>\n                  Reject\n                </button>\n                <button\n                  type=\"button\"\n                  style={{ width: 100, fontWeight: \"bold\" }}\n                  className=\"btn btn-warning shadow-2 mt-3 mr-3\"\n                  onClick={() => {\n                    setStatusConfirm(true);\n                    setvalidatorAction(entryStatus.RECHECK);\n                  }}>\n                  Recheck\n                </button>\n                <button\n                  type=\"button\"\n                  style={{ width: 100, fontWeight: \"bold\" }}\n                  className=\"btn btn-primary shadow-2 mt-3\"\n                  onClick={() => {\n                    setStatusConfirm(true);\n                    setvalidatorAction(entryStatus.APPROVED);\n                  }}>\n                  Approve\n                </button>\n              </div>\n            </Form>\n          )}\n        </Formik>\n      </div>\n      <Modal\n        size=\"md\"\n        show={showStatusConfirm}\n        backdrop=\"static\"\n        keyboard={true}\n        backdropClassName=\"nested-modal\">\n        <Modal.Header>\n          <h5 className=\"card-title\">\n            {validatorAction === entryStatus.APPROVED\n              ? \"Approve\"\n              : validatorAction === entryStatus.RECHECK\n              ? \"Recheck\"\n              : \"Reject\"}{\" \"}\n            Entry\n          </h5>\n        </Modal.Header>\n        <Modal.Body>\n          <div>\n            <span>\n              Are you sure that to{\" \"}\n              {validatorAction === entryStatus.APPROVED\n                ? \"Approve\"\n                : validatorAction === entryStatus.RECHECK\n                ? \"Recheck\"\n                : \"Reject\"}\n              ?\n            </span>\n          </div>\n          <div className=\"mt-4\">\n            <textarea\n              ref={actionComment}\n              className=\"form-control\"\n              placeholder=\"Comment\"></textarea>\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <div>\n            <button\n              className=\"btn btn-outline-primary\"\n              onClick={() => setStatusConfirm(false)}>\n              Cancel\n            </button>\n            <button\n              className={`btn ${\n                validatorAction === entryStatus.APPROVED\n                  ? \"btn-primary\"\n                  : validatorAction === entryStatus.RECHECK\n                  ? \"btn-warning\"\n                  : \"btn-danger\"\n              }`}\n              onClick={() => {\n                setStatusConfirm(false);\n                entryAction();\n              }}>\n              {validatorAction === entryStatus.APPROVED\n                ? \"Approve\"\n                : validatorAction === entryStatus.RECHECK\n                ? \"Recheck\"\n                : \"Reject\"}\n            </button>\n          </div>\n        </Modal.Footer>\n      </Modal>\n    </React.Fragment>\n  );\n};\n\nexport default ExpenditureForm;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/approved-entries/forms/purchaseForm.js",["1009","1010","1011","1012","1013","1014"],"import React, {useState, useEffect} from \"react\";\nimport {Row, Col, Table} from \"react-bootstrap\";\nimport {Formik, Field, Form, ErrorMessage, FieldArray} from \"formik\";\nimport * as Yup from \"yup\";\nimport DatePicker from \"react-datepicker\";\nimport Select from \"react-select\";\n\nimport {callApi} from \"../../../../services/apiService\";\nimport {ApiConstants} from \"../../../../config/apiConstants\";\nimport {entryStatus} from \"../../../../enums/entryStatus\";\nimport {showNotification} from \"../../../../services/toasterService\";\n\nconst PurchaseForm = (props) => {\n\tconst [isSubmitted, setIsSubmitted] = useState(false);\n\tconst [invoiceDate, setinvoiceDate] = useState(null);\n\tconst [purchaseData, setPurchaseData] = useState(null);\n\tconst [groupsList, setGroupsList] = useState([]);\n\tconst [suppliersList, setSuppliersList] = useState([]);\n\n\tconst PurchaseFormSchema = Yup.object().shape({\n\t\tsupplier_id: Yup.mixed().required(\"Please select Supplier\"),\n\t\ttrn: Yup.string(),\n\t\tinvoice_number: Yup.string().required(\"Please enter Invoice number\"),\n\t\tinvoice_date: Yup.mixed().required(\"Please select Date\"),\n\t\tinvoice_details: Yup.array().of(\n\t\t\tYup.object().shape({\n\t\t\t\tinvoice_group_id: Yup.string().required(\"Please select Group\"),\n\t\t\t\tinvoice_sub_group_id: Yup.string().required(\"Please select Sub Group\"),\n\t\t\t\tinvoice_item_id: Yup.string().required(\"Please select Item\"),\n\t\t\t\tunit_price: Yup.string().required(\"Please enter Unit Price\"),\n\t\t\t\tquantity: Yup.string().required(\"Please enter Quantity\"),\n\t\t\t\tamount: Yup.string().required(\"Please enter Amount\"),\n\t\t\t})\n\t\t),\n\t\tsubtotal: Yup.string(),\n\t\tdiscount: Yup.string(),\n\t\tvatamount: Yup.string(),\n\t\ttotalamount: Yup.string(),\n\t});\n\n\tuseEffect(() => {\n\t\tgetSuppliers();\n\t\tinvoicePurchaseGroups();\n\t}, []);\n\n\tuseEffect(() => {\n\t\tif (groupsList.length) {\n\t\t\tgetData();\n\t\t}\n\t}, [groupsList]);\n\n\tconst getData = () => {\n\t\tprops.onShowLoader(true);\n\t\tlet params = {entry_id: props.entry.id};\n\t\tcallApi(\"get\", ApiConstants.purchase.getData, params, true)\n\t\t\t.then((response) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tsetPurchaseData(response.payload);\n\t\t\t\t\tsetinvoiceDate(new Date(response.payload?.header?.invoice_date));\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\tconst invoicePurchaseGroups = () => {\n\t\tprops.onShowLoader(true);\n\t\tcallApi(\"get\", ApiConstants.lookups.invoicepurchasegroups, null, true)\n\t\t\t.then((response) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tlet data = response.payload.map((i) => {\n\t\t\t\t\t\treturn {...i, value: i.id, label: i.name};\n\t\t\t\t\t});\n\t\t\t\t\tsetGroupsList(data);\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\tconst getSuppliers = () => {\n\t\tprops.onShowLoader(true);\n\t\tcallApi(\"get\", ApiConstants.lookups.getSuppliers, null)\n\t\t\t.then((response) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tlet suppliers = response.payload.map((i) => {\n\t\t\t\t\t\treturn {...i, value: i.id, label: i.name};\n\t\t\t\t\t});\n\t\t\t\t\tsetSuppliersList(suppliers);\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\tconst getSubGroups = (groupId) => {\n\t\tlet selectedGroup = groupsList.find((i) => i.id === groupId);\n\t\tlet subGroups = selectedGroup\n\t\t\t? selectedGroup.invoice_sub_groups.map((i) => {\n\t\t\t\t\treturn {...i, value: i.id, label: i.name};\n\t\t\t  })\n\t\t\t: [];\n\t\treturn subGroups;\n\t};\n\n\tconst getSelectedSubGroup = (groupId, selectedId) => {\n\t\tlet selectedGroup = groupsList.find((i) => i.id === groupId);\n\t\tlet subGroups = selectedGroup\n\t\t\t? selectedGroup.invoice_sub_groups.map((i) => {\n\t\t\t\t\treturn {...i, value: i.id, label: i.name};\n\t\t\t  })\n\t\t\t: [];\n\n\t\tlet selectedSubGroup = null;\n\t\tif (subGroups && selectedId) {\n\t\t\tselectedSubGroup = subGroups.find((i) => i.id === selectedId);\n\t\t}\n\t\treturn selectedSubGroup;\n\t};\n\n\tconst getSubItems = (groupId, subgroupId) => {\n\t\tlet selectedGroup = groupsList.find((i) => i.id === groupId);\n\t\tlet subGroups = selectedGroup ? selectedGroup.invoice_sub_groups : [];\n\t\tlet selectedSubGroup = subGroups.find((i) => i.id === subgroupId);\n\t\tlet subItems = selectedSubGroup\n\t\t\t? selectedSubGroup.invoice_items.map((i) => {\n\t\t\t\t\treturn {...i, value: i.id, label: i.name};\n\t\t\t  })\n\t\t\t: [];\n\t\treturn subItems;\n\t};\n\n\tconst getSelectedSubItem = (groupId, subgroupId, selectedId) => {\n\t\tlet selectedGroup = groupsList.find((i) => i.id === groupId);\n\t\tlet subGroups = selectedGroup ? selectedGroup.invoice_sub_groups : [];\n\t\tlet selectedSubGroup = subGroups.find((i) => i.id === subgroupId);\n\t\tlet subItems = selectedSubGroup\n\t\t\t? selectedSubGroup.invoice_items.map((i) => {\n\t\t\t\t\treturn {...i, value: i.id, label: i.name};\n\t\t\t  })\n\t\t\t: [];\n\n\t\tlet selectedSubItem = null;\n\t\tif (subItems && selectedId) {\n\t\t\tselectedSubItem = subItems.find((i) => i.id === selectedId);\n\t\t}\n\t\treturn selectedSubItem;\n\t};\n\n\tconst calculateTotal = (values, setFieldValue, index, fieldValue, fieldType) => {\n\t\tlet amount = 0;\n\t\tif (fieldType === \"unit_price\") amount = values.invoice_details[index].quantity * fieldValue;\n\t\tif (fieldType === \"quantity\") amount = values.invoice_details[index].unit_price * fieldValue;\n\n\t\tsetFieldValue(`invoice_details.${index}.amount`, amount);\n\t\tvalues.invoice_details[index].amount = amount;\n\n\t\tlet subtotal = values.invoice_details.reduce((sum, item) => {\n\t\t\treturn sum + item.amount;\n\t\t}, 0);\n\t\tsetFieldValue(\"subtotal\", subtotal);\n\t\tvalues.subtotal = subtotal;\n\n\t\tlet discountAmt = values.discount ? values.discount : 0;\n\t\tlet vatamount = ((values.subtotal - discountAmt) * props.entry.vat_percentage) / 100;\n\t\tsetFieldValue(\"vatamount\", vatamount);\n\n\t\tlet totalamount = values.subtotal - discountAmt + vatamount;\n\t\tsetFieldValue(\"totalamount\", totalamount);\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<div>\n\t\t\t\t<Formik\n\t\t\t\t\tenableReinitialize={true}\n\t\t\t\t\tinitialValues={{\n\t\t\t\t\t\tsupplier_id: purchaseData?.header?.supplier_id ? purchaseData.header.supplier_id : \"\",\n\t\t\t\t\t\ttrn: purchaseData?.header?.supplier_trn ? purchaseData.header.supplier_trn : \"\",\n\t\t\t\t\t\tinvoice_number: purchaseData?.header?.invoice_number ? purchaseData.header.invoice_number : \"\",\n\t\t\t\t\t\tinvoice_date: \"\",\n\t\t\t\t\t\tinvoice_details: purchaseData?.details\n\t\t\t\t\t\t\t? purchaseData.details.map((i) => {\n\t\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\tinvoice_group_id: i.invoice_group_id,\n\t\t\t\t\t\t\t\t\t\tinvoice_sub_group_id: i.invoice_sub_group_id,\n\t\t\t\t\t\t\t\t\t\tinvoice_item_id: i.invoice_item_id,\n\t\t\t\t\t\t\t\t\t\tunit_price: i.price,\n\t\t\t\t\t\t\t\t\t\tquantity: i.qty,\n\t\t\t\t\t\t\t\t\t\tamount: i.amount,\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t  })\n\t\t\t\t\t\t\t: [],\n\t\t\t\t\t\tsubtotal: purchaseData?.header?.sub_total ? purchaseData.header.sub_total : \"\",\n\t\t\t\t\t\tdiscount: purchaseData?.header?.discount ? purchaseData.header.discount : \"0\",\n\t\t\t\t\t\tvatamount: purchaseData?.header?.vat_amount ? purchaseData.header.vat_amount : \"\",\n\t\t\t\t\t\ttotalamount: purchaseData?.header?.total_amount ? purchaseData.header.total_amount : \"\",\n\t\t\t\t\t}}\n\t\t\t\t\tvalidationSchema={PurchaseFormSchema}>\n\t\t\t\t\t{({errors, handleChange, setFieldValue, values}) => (\n\t\t\t\t\t\t<Form>\n\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t<Col xs={6}>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t<Select className={`w-100 form-control-select ${errors.supplier_id && isSubmitted ? \"is-invalid\" : \"\"}`} classNamePrefix=\"select\" options={suppliersList} placeholder=\"Supplier\" isSearchable={false} isDisabled value={suppliersList.find((i) => i.value === values?.supplier_id)} />\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"supplier_id\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col xs={6}>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" disabled className={`form-control ${errors.trn && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"TRN\" name=\"trn\" />\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"trn\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col xs={6}>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" disabled className={`form-control ${errors.invoice_number && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"Invoice Number\" name=\"invoice_number\" />\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"invoice_number\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col xs={6}>\n\t\t\t\t\t\t\t\t\t<div className=\"date-picker-container mb-3\">\n\t\t\t\t\t\t\t\t\t\t<DatePicker\n\t\t\t\t\t\t\t\t\t\t\tclassName={`form-control ${errors.invoice_date && isSubmitted ? \"is-invalid\" : \"\"}`}\n\t\t\t\t\t\t\t\t\t\t\tplaceholderText=\"Date\"\n\t\t\t\t\t\t\t\t\t\t\tdisabled\n\t\t\t\t\t\t\t\t\t\t\tdateFormat=\"dd/MM/yyyy\"\n\t\t\t\t\t\t\t\t\t\t\tselected={invoiceDate}\n\t\t\t\t\t\t\t\t\t\t\tonChange={(value) => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetinvoiceDate(value);\n\t\t\t\t\t\t\t\t\t\t\t\tlet event = {\n\t\t\t\t\t\t\t\t\t\t\t\t\ttarget: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: \"invoice_date\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\thandleChange(event);\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-calendar\"></i>\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"invoice_date\">{(msg) => <div className=\"invalid-feedback d-block\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t\t\t\t<Col lg={12}>\n\t\t\t\t\t\t\t\t\t<Table className=\"purchase-grid\">\n\t\t\t\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t<th>#</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th width=\"120\">Group</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th width=\"120\">Sub Group</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th width=\"120\">Item Name</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th>Unit Price</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th>Quantity</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th>Amount</th>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t\t\t<FieldArray\n\t\t\t\t\t\t\t\t\t\t\t\tname=\"invoice_details\"\n\t\t\t\t\t\t\t\t\t\t\t\trender={(arrayHelpers) => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{values.invoice_details.map((item, index) => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<tr key={index}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td scope=\"row\">{index + 1}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Select className=\"w-100 form-control-select\" classNamePrefix=\"select\" options={groupsList} value={groupsList.find((i) => i.value === values?.invoice_details[index].invoice_group_id)} placeholder=\"Select\" isSearchable={false} isDisabled />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"w-100 form-control-select\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassNamePrefix=\"select\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toptions={getSubGroups(values.invoice_details[index].invoice_group_id)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={getSelectedSubGroup(values.invoice_details[index].invoice_group_id, values.invoice_details[index].invoice_sub_group_id)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Select\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tisSearchable={false}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tisDisabled\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"w-100 form-control-select\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassNamePrefix=\"select\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toptions={getSubItems(values.invoice_details[index].invoice_group_id, values.invoice_details[index].invoice_sub_group_id)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={getSelectedSubItem(values.invoice_details[index].invoice_group_id, values.invoice_details[index].invoice_sub_group_id, values.invoice_details[index].invoice_item_id)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Select\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tisSearchable={false}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tisDisabled\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className=\"grid-input\" name={`invoice_details.${index}.unit_price`} value={values.invoice_details[index].unit_price} disabled />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className=\"grid-input\" name={`invoice_details.${index}.quantity`} value={values.invoice_details[index].quantity} disabled />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className=\"grid-input\" disabled name={`invoice_details.${index}.amount`} />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t<td colSpan=\"6\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"text-right\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label className=\"mr-3\">Sub Total</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className=\"grid-input\" name=\"subtotal\" disabled />\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t<td colSpan=\"6\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"text-right\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label className=\"mr-3\">Discount Rounded</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"grid-input\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tname=\"discount\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdisabled\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={values.discount}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleChange(e);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet discountAmt = e.target.value ? e.target.value : 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet vatamount = ((values.subtotal - discountAmt) * props.entry.vat_percentage) / 100;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetFieldValue(\"vatamount\", vatamount);\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet totalamount = values.subtotal - discountAmt + vatamount;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetFieldValue(\"totalamount\", totalamount);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t<td colSpan=\"6\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"text-right\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label className=\"mr-3\">VAT Amount</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" disabled className=\"grid-input\" name=\"vatamount\" />\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t<td colSpan=\"6\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"text-right\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label className=\"mr-3\">Total</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" disabled className=\"grid-input\" name=\"totalamount\" />\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t\t\t</Table>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t</Form>\n\t\t\t\t\t)}\n\t\t\t\t</Formik>\n\t\t\t</div>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default PurchaseForm;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/approved-entries/forms/salesForm.js",["1015","1016"],"import React, {useState, useEffect} from \"react\";\nimport {Row, Col} from \"react-bootstrap\";\nimport {Formik, Field, Form, ErrorMessage} from \"formik\";\nimport * as Yup from \"yup\";\nimport DatePicker from \"react-datepicker\";\n\nimport {showNotification} from \"../../../../services/toasterService\";\nimport {callApi} from \"../../../../services/apiService\";\nimport {ApiConstants} from \"../../../../config/apiConstants\";\n\nconst SalesForm = (props) => {\n\tconst [isSubmitted, setIsSubmitted] = useState(false);\n\tconst [invoiceDate, setinvoiceDate] = useState(null);\n\tconst [salesData, setsalesData] = useState(null);\n\n\tconst SalesFormSchema = Yup.object().shape({\n\t\tinvoice_date: Yup.mixed().required(\"Please select Date\"),\n\t\tamount: Yup.string()\n\t\t\t.required(\"Please enter Amount\")\n\t\t\t.matches(/^[0-9]*$/, \"Please enter a valid Amount\"),\n\t\tcomments: Yup.string().required(\"Please enter Comment\"),\n\t\tinvoice_number: Yup.string().required(\"Please enter Invoice number\"),\n\t\tamount_exclude_vat: Yup.string(),\n\t\tvat_amount: Yup.string(),\n\t});\n\n\tuseEffect(() => {\n\t\tgetData();\n\t}, []);\n\n\tconst getData = () => {\n\t\tprops.onShowLoader(true);\n\t\tlet params = {entry_id: props.entry.id};\n\t\tcallApi(\"get\", ApiConstants.sales.getData, params, true)\n\t\t\t.then((response) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tsetsalesData(response.payload);\n\t\t\t\t\tsetinvoiceDate(new Date(response.payload.invoice_date));\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<div>\n\t\t\t\t<Formik\n\t\t\t\t\tenableReinitialize={true}\n\t\t\t\t\tinitialValues={{\n\t\t\t\t\t\tinvoice_date: \"\",\n\t\t\t\t\t\tamount: salesData?.amount ? salesData?.amount : \"\",\n\t\t\t\t\t\tcomments: salesData?.comments ? salesData?.comments : \"\",\n\t\t\t\t\t\tinvoice_number: salesData?.invoice_number ? salesData?.invoice_number : \"\",\n\t\t\t\t\t\tamount_exclude_vat: salesData?.amount_exclude_vat ? salesData?.amount_exclude_vat : \"\",\n\t\t\t\t\t\tvat_amount: salesData?.vat_amount ? salesData?.vat_amount : \"\",\n\t\t\t\t\t}}\n\t\t\t\t\tvalidationSchema={SalesFormSchema}>\n\t\t\t\t\t{({errors}) => (\n\t\t\t\t\t\t<Form>\n\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t\t<div className=\"date-picker-container mb-3\">\n\t\t\t\t\t\t\t\t\t\t<DatePicker className={`form-control ${errors.invoice_date && isSubmitted ? \"is-invalid\" : \"\"}`} placeholderText=\"Date\" disabled dateFormat=\"dd/MM/yyyy\" selected={invoiceDate} />\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-calendar\"></i>\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"invoice_date\">{(msg) => <div className=\"invalid-feedback d-block\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" disabled className={`form-control ${errors.amount && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"Amount\" name=\"amount\" />\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"amount\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" disabled className={`form-control ${errors.comments && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"Comments\" name=\"comments\" />\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"comments\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" disabled className={`form-control ${errors.invoice_number && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"Invoice Number\" name=\"invoice_number\" />\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"invoice_number\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className={`form-control ${errors.amount_exclude_vat && isSubmitted ? \"is-invalid\" : \"\"}`} disabled placeholder=\"Amount Exclude Vat\" name=\"amount_exclude_vat\" />\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"amount_exclude_vat\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className={`form-control ${errors.vat_amount && isSubmitted ? \"is-invalid\" : \"\"}`} disabled placeholder=\"Vat Amount\" name=\"vat_amount\" />\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"vat_amount\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t</Form>\n\t\t\t\t\t)}\n\t\t\t\t</Formik>\n\t\t\t</div>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default SalesForm;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/approved-entries/forms/expenditureForm.js",["1017","1018","1019"],"import React, {useState, useEffect} from \"react\";\nimport {Row, Col} from \"react-bootstrap\";\nimport {Formik, Field, Form, ErrorMessage} from \"formik\";\nimport * as Yup from \"yup\";\nimport DatePicker from \"react-datepicker\";\nimport Select from \"react-select\";\n\nimport {callApi} from \"../../../../services/apiService\";\nimport {ApiConstants} from \"../../../../config/apiConstants\";\nimport {showNotification} from \"../../../../services/toasterService\";\n\nconst ExpenditureForm = (props) => {\n\tconst [isSubmitted, setIsSubmitted] = useState(false);\n\tconst [invoiceDate, setinvoiceDate] = useState(null);\n\tconst [expenditureData, setexpenditureData] = useState(null);\n\tconst [groupsList, setGroupsList] = useState([]);\n\tconst [subGroupsList, setSubGroupsList] = useState([]);\n\tconst [itemsList, setItemsList] = useState([]);\n\n\tconst ExpenditureFormSchema = Yup.object().shape({\n\t\tinvoice_date: Yup.mixed().required(\"Please select Date\"),\n\t\tamount: Yup.string()\n\t\t\t.required(\"Please enter Amount\")\n\t\t\t.matches(/^[0-9].*$/, \"Please enter a valid Amount\"),\n\t\tcomments: Yup.string().required(\"Please enter Comment\"),\n\t\tinvoice_number: Yup.string().required(\"Please enter Invoice number\"),\n\t\tinvoice_group_id: Yup.string().required(\"Please enter Group\"),\n\t\tinvoice_sub_group_id: Yup.string().required(\"Please enter Sub Group\"),\n\t\tinvoice_item_id: Yup.string().required(\"Please select Item\"),\n\t});\n\n\tuseEffect(() => {\n\t\tinvoiceExpGroups();\n\t}, []);\n\n\tuseEffect(() => {\n\t\tif (groupsList.length) getData();\n\t}, [groupsList]);\n\n\tconst getData = () => {\n\t\tprops.onShowLoader(true);\n\t\tlet params = {entry_id: props.entry.id};\n\t\tcallApi(\"get\", ApiConstants.expenditure.getData, params, true)\n\t\t\t.then((response) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tsetexpenditureData(response.payload);\n\t\t\t\t\tsetinvoiceDate(new Date(response.payload.invoice_date));\n\t\t\t\t\tlet group = groupsList.find((i) => i.id === response.payload.invoice_group_id);\n\t\t\t\t\tonChangeGroups(group);\n\t\t\t\t\tlet subgroup = group.invoice_sub_groups.find((i) => i.id === response.payload.invoice_sub_group_id);\n\t\t\t\t\tonChangeSubGroups(subgroup);\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\tconst invoiceExpGroups = () => {\n\t\tprops.onShowLoader(true);\n\t\tcallApi(\"get\", ApiConstants.lookups.invoiceexpgroups, null)\n\t\t\t.then((response) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tlet data = response.payload.map((i) => {\n\t\t\t\t\t\treturn {...i, value: i.id, label: i.name};\n\t\t\t\t\t});\n\t\t\t\t\tsetGroupsList(data);\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\tconst onChangeGroups = (value) => {\n\t\tlet subGroups = value?.invoice_sub_groups?.map((i) => {\n\t\t\treturn {...i, value: i.id, label: i.name};\n\t\t});\n\t\tsetSubGroupsList(subGroups);\n\t};\n\n\tconst onChangeSubGroups = (value) => {\n\t\tlet items = value?.invoice_items?.map((i) => {\n\t\t\treturn {...i, value: i.id, label: i.name};\n\t\t});\n\t\tsetItemsList(items);\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<div>\n\t\t\t\t<Formik\n\t\t\t\t\tenableReinitialize={true}\n\t\t\t\t\tinitialValues={{\n\t\t\t\t\t\tinvoice_date: expenditureData?.invoice_date ? new Date(expenditureData?.invoice_date) : \"\",\n\t\t\t\t\t\tamount: expenditureData?.amount ? expenditureData?.amount : \"\",\n\t\t\t\t\t\tcomments: expenditureData?.comments ? expenditureData?.comments : \"\",\n\t\t\t\t\t\tinvoice_number: expenditureData?.invoice_number ? expenditureData?.invoice_number : \"\",\n\t\t\t\t\t\tinvoice_group_id: expenditureData?.invoice_group_id ? expenditureData?.invoice_group_id : \"\",\n\t\t\t\t\t\tinvoice_sub_group_id: expenditureData?.invoice_sub_group_id ? expenditureData?.invoice_sub_group_id : \"\",\n\t\t\t\t\t\tinvoice_item_id: expenditureData?.invoice_item_id ? expenditureData?.invoice_item_id : \"\",\n\t\t\t\t\t}}\n\t\t\t\t\tvalidationSchema={ExpenditureFormSchema}>\n\t\t\t\t\t{({errors, handleChange, values}) => (\n\t\t\t\t\t\t<Form>\n\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t\t<div className=\"date-picker-container mb-3\">\n\t\t\t\t\t\t\t\t\t\t<DatePicker\n\t\t\t\t\t\t\t\t\t\t\tclassName={`form-control ${errors.invoice_date && isSubmitted ? \"is-invalid\" : \"\"}`}\n\t\t\t\t\t\t\t\t\t\t\tplaceholderText=\"Date\"\n\t\t\t\t\t\t\t\t\t\t\tdateFormat=\"dd/MM/yyyy\"\n\t\t\t\t\t\t\t\t\t\t\tdisabled\n\t\t\t\t\t\t\t\t\t\t\tselected={invoiceDate}\n\t\t\t\t\t\t\t\t\t\t\tonChange={(value) => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetinvoiceDate(value);\n\t\t\t\t\t\t\t\t\t\t\t\tlet event = {\n\t\t\t\t\t\t\t\t\t\t\t\t\ttarget: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: \"invoice_date\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\thandleChange(event);\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-calendar\"></i>\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"invoice_date\">{(msg) => <div className=\"invalid-feedback d-block\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" disabled className={`form-control ${errors.amount && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"Amount\" name=\"amount\" />\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"amount\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" disabled className={`form-control ${errors.comments && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"Comments\" name=\"comments\" />\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"comments\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" disabled className={`form-control ${errors.invoice_number && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"Invoice Number\" name=\"invoice_number\" />\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"invoice_number\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t<Select className={`w-100 form-control-select ${errors.invoice_group_id && isSubmitted ? \"is-invalid\" : \"\"}`} classNamePrefix=\"select\" options={groupsList} placeholder=\"Group\" isDisabled isSearchable={false} value={groupsList.find((i) => i.value === values?.invoice_group_id)} />\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"invoice_group_id\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\t\tclassName={`w-100 form-control-select ${errors.invoice_sub_group_id && isSubmitted ? \"is-invalid\" : \"\"}`}\n\t\t\t\t\t\t\t\t\t\t\tclassNamePrefix=\"select\"\n\t\t\t\t\t\t\t\t\t\t\toptions={subGroupsList}\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Sub Group\"\n\t\t\t\t\t\t\t\t\t\t\tisSearchable={false}\n\t\t\t\t\t\t\t\t\t\t\tisDisabled\n\t\t\t\t\t\t\t\t\t\t\tvalue={subGroupsList.find((i) => i.value === values?.invoice_sub_group_id)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"invoice_sub_group_id\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t<Select className={`w-100 form-control-select ${errors.invoice_item_id && isSubmitted ? \"is-invalid\" : \"\"}`} classNamePrefix=\"select\" options={itemsList} placeholder=\"Items\" isDisabled isSearchable={false} value={itemsList.find((i) => i.value === values?.invoice_item_id)} />\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"invoice_item_id\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t</Form>\n\t\t\t\t\t)}\n\t\t\t\t</Formik>\n\t\t\t</div>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default ExpenditureForm;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/validator-pending-entries/forms/purchaseForm.js",["1020","1021","1022","1023","1024"],"import React, { useState, useEffect, useRef } from \"react\";\nimport { Row, Col, Table, Modal } from \"react-bootstrap\";\nimport { Formik, Field, Form, ErrorMessage, FieldArray } from \"formik\";\nimport * as Yup from \"yup\";\nimport DatePicker from \"react-datepicker\";\nimport Select from \"react-select\";\n\nimport { callApi } from \"../../../../services/apiService\";\nimport { ApiConstants } from \"../../../../config/apiConstants\";\nimport { entryStatus } from \"../../../../enums/entryStatus\";\nimport { showNotification } from \"../../../../services/toasterService\";\n\nconst PurchaseForm = (props) => {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [invoiceDate, setinvoiceDate] = useState(null);\n  const [purchaseData, setPurchaseData] = useState(null);\n  const [groupsList, setGroupsList] = useState([]);\n  const [suppliersList, setSuppliersList] = useState([]);\n  const [enableRecheck, setenableRecheck] = useState(false);\n  const [showStatusConfirm, setStatusConfirm] = React.useState(false);\n  const [validatorAction, setvalidatorAction] = React.useState(\"\");\n  const actionComment = useRef(null);\n\n  const PurchaseFormSchema = Yup.object().shape({\n    supplier_id: Yup.mixed().required(\"Please select Supplier\"),\n    trn: Yup.string(),\n    invoice_number: Yup.string().required(\"Please enter Invoice number\"),\n    invoice_date: Yup.mixed().required(\"Please select Date\"),\n    invoice_details: Yup.array().of(\n      Yup.object().shape({\n        invoice_group_id: Yup.string().required(\"Please select Group\"),\n        invoice_sub_group_id: Yup.string().required(\"Please select Sub Group\"),\n        invoice_item_id: Yup.string().required(\"Please select Item\"),\n        unit_price: Yup.string().required(\"Please enter Unit Price\"),\n        quantity: Yup.string().required(\"Please enter Quantity\"),\n        amount: Yup.string().required(\"Please enter Amount\"),\n      })\n    ),\n    subtotal: Yup.string(),\n    discount: Yup.string(),\n    vatamount: Yup.string(),\n    totalamount: Yup.string(),\n  });\n\n  useEffect(() => {\n    invoicePurchaseGroups();\n    getSuppliers();\n  }, []);\n\n  useEffect(() => {\n    if (groupsList.length) {\n      getData();\n    }\n  }, [groupsList]);\n\n  const getData = () => {\n    props.onShowLoader(true);\n    let params = { entry_id: props.entry.id };\n    callApi(\"get\", ApiConstants.purchase.getData, params, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          setPurchaseData(response.payload);\n          setinvoiceDate(new Date(response.payload?.header?.invoice_date));\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const entryAction = () => {\n    props.onShowLoader(true);\n    let params = {\n      entry_id: props.entry.id,\n      status_id: validatorAction,\n      comment: actionComment.current.value,\n    };\n\n    callApi(\"post\", ApiConstants.entry.setvalidatorstatus, params, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          props.onSuccess();\n          showNotification(\"Success\", response.message, \"success\");\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const invoicePurchaseGroups = () => {\n    props.onShowLoader(true);\n    callApi(\"get\", ApiConstants.lookups.invoicepurchasegroups, null, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          let data = response.payload.map((i) => {\n            return { ...i, value: i.id, label: i.name };\n          });\n          setGroupsList(data);\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const getSuppliers = () => {\n    props.onShowLoader(true);\n    callApi(\"get\", ApiConstants.lookups.getSuppliers, null)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          let suppliers = response.payload.map((i) => {\n            return { ...i, value: i.id, label: i.name };\n          });\n          setSuppliersList(suppliers);\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const getSubGroups = (groupId) => {\n    let selectedGroup = groupsList.find((i) => i.id === groupId);\n    let subGroups = selectedGroup\n      ? selectedGroup.invoice_sub_groups.map((i) => {\n          return { ...i, value: i.id, label: i.name };\n        })\n      : [];\n    return subGroups;\n  };\n\n  const getSelectedSubGroup = (groupId, selectedId) => {\n    let selectedGroup = groupsList.find((i) => i.id === groupId);\n    let subGroups = selectedGroup\n      ? selectedGroup.invoice_sub_groups.map((i) => {\n          return { ...i, value: i.id, label: i.name };\n        })\n      : [];\n\n    let selectedSubGroup = null;\n    if (subGroups && selectedId) {\n      selectedSubGroup = subGroups.find((i) => i.id === selectedId);\n    }\n    return selectedSubGroup;\n  };\n\n  const getSubItems = (groupId, subgroupId) => {\n    let selectedGroup = groupsList.find((i) => i.id === groupId);\n    let subGroups = selectedGroup ? selectedGroup.invoice_sub_groups : [];\n    let selectedSubGroup = subGroups.find((i) => i.id === subgroupId);\n    let subItems = selectedSubGroup\n      ? selectedSubGroup.invoice_items.map((i) => {\n          return { ...i, value: i.id, label: i.name };\n        })\n      : [];\n    return subItems;\n  };\n\n  const getSelectedSubItem = (groupId, subgroupId, selectedId) => {\n    let selectedGroup = groupsList.find((i) => i.id === groupId);\n    let subGroups = selectedGroup ? selectedGroup.invoice_sub_groups : [];\n    let selectedSubGroup = subGroups.find((i) => i.id === subgroupId);\n    let subItems = selectedSubGroup\n      ? selectedSubGroup.invoice_items.map((i) => {\n          return { ...i, value: i.id, label: i.name };\n        })\n      : [];\n\n    let selectedSubItem = null;\n    if (subItems && selectedId) {\n      selectedSubItem = subItems.find((i) => i.id === selectedId);\n    }\n    return selectedSubItem;\n  };\n\n  const calculateTotal = (\n    values,\n    setFieldValue,\n    index,\n    fieldValue,\n    fieldType\n  ) => {\n    let amount = 0;\n    if (fieldType === \"unit_price\")\n      amount = values.invoice_details[index].quantity * fieldValue;\n    if (fieldType === \"quantity\")\n      amount = values.invoice_details[index].unit_price * fieldValue;\n\n    setFieldValue(`invoice_details.${index}.amount`, amount);\n    values.invoice_details[index].amount = amount;\n\n    let subtotal = values.invoice_details.reduce((sum, item) => {\n      return sum + item.amount;\n    }, 0);\n    setFieldValue(\"subtotal\", subtotal);\n    values.subtotal = subtotal;\n\n    let discountAmt = values.discount ? values.discount : 0;\n    let vatamount =\n      ((values.subtotal - discountAmt) * props.entry.vat_percentage) / 100;\n    setFieldValue(\"vatamount\", vatamount);\n\n    let totalamount = values.subtotal - discountAmt + vatamount;\n    setFieldValue(\"totalamount\", totalamount);\n  };\n\n  return (\n    <React.Fragment>\n      <div>\n        <Formik\n          enableReinitialize={true}\n          initialValues={{\n            supplier_id: purchaseData?.header?.supplier_id\n              ? purchaseData.header.supplier_id\n              : \"\",\n            trn: purchaseData?.header?.supplier_trn\n              ? purchaseData.header.supplier_trn\n              : \"\",\n            invoice_number: purchaseData?.header?.invoice_number\n              ? purchaseData.header.invoice_number\n              : \"\",\n            invoice_date: \"\",\n            invoice_details: purchaseData?.details\n              ? purchaseData.details.map((i) => {\n                  return {\n                    invoice_group_id: i.invoice_group_id,\n                    invoice_sub_group_id: i.invoice_sub_group_id,\n                    invoice_item_id: i.invoice_item_id,\n                    unit_price: i.price,\n                    quantity: i.qty,\n                    amount: i.amount,\n                  };\n                })\n              : [],\n            subtotal: purchaseData?.header?.sub_total\n              ? purchaseData.header.sub_total\n              : \"\",\n            discount: purchaseData?.header?.discount\n              ? purchaseData.header.discount\n              : \"0\",\n            vatamount: purchaseData?.header?.vat_amount\n              ? purchaseData.header.vat_amount\n              : \"\",\n            totalamount: purchaseData?.header?.total_amount\n              ? purchaseData.header.total_amount\n              : \"\",\n          }}\n          validationSchema={PurchaseFormSchema}>\n          {({ errors, handleChange, setFieldValue, values }) => (\n            <Form>\n              <Row>\n                <Col lg={6} xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Select\n                      className={`w-100 form-control-select ${\n                        errors.supplier_id && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      classNamePrefix=\"select\"\n                      options={suppliersList}\n                      placeholder=\"Supplier\"\n                      isSearchable={false}\n                      isDisabled\n                      value={suppliersList.find(\n                        (i) => i.value === values?.supplier_id\n                      )}\n                    />\n                    <ErrorMessage name=\"supplier_id\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n                <Col lg={6} xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      disabled\n                      className={`form-control ${\n                        errors.trn && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholder=\"TRN\"\n                      name=\"trn\"\n                    />\n                    <ErrorMessage name=\"trn\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n                <Col lg={6} xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      disabled\n                      className={`form-control ${\n                        errors.invoice_number && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholder=\"Invoice Number\"\n                      name=\"invoice_number\"\n                    />\n                    <ErrorMessage name=\"invoice_number\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n                <Col lg={6} xs={12}>\n                  <div className=\"date-picker-container mb-3\">\n                    <DatePicker\n                      className={`form-control ${\n                        errors.invoice_date && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholderText=\"Date\"\n                      disabled\n                      dateFormat=\"dd/MM/yyyy\"\n                      selected={invoiceDate}\n                      onChange={(value) => {\n                        setinvoiceDate(value);\n                        let event = {\n                          target: {\n                            name: \"invoice_date\",\n                            value: value,\n                          },\n                        };\n                        handleChange(event);\n                      }}\n                    />\n                    <i className=\"feather icon-calendar\"></i>\n                    <ErrorMessage name=\"invoice_date\">\n                      {(msg) => (\n                        <div className=\"invalid-feedback d-block\">{msg}</div>\n                      )}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col lg={12} xs={12} className=\"overflow-auto\">\n                  <Table className=\"purchase-grid\">\n                    <thead>\n                      <tr>\n                        <th>#</th>\n                        <th width=\"120\">Group</th>\n                        <th width=\"120\">Sub Group</th>\n                        <th width=\"120\">Item Name</th>\n                        <th>Unit Price</th>\n                        <th>Quantity</th>\n                        <th>Amount</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <FieldArray\n                        name=\"invoice_details\"\n                        render={(arrayHelpers) => (\n                          <React.Fragment>\n                            {values.invoice_details.map((item, index) => (\n                              <tr key={index}>\n                                <td scope=\"row\">{index + 1}</td>\n                                <td>\n                                  <Select\n                                    className=\"w-100 form-control-select\"\n                                    classNamePrefix=\"select\"\n                                    options={groupsList}\n                                    value={groupsList.find(\n                                      (i) =>\n                                        i.value ===\n                                        values?.invoice_details[index]\n                                          .invoice_group_id\n                                    )}\n                                    placeholder=\"Select\"\n                                    isSearchable={false}\n                                    isDisabled\n                                  />\n                                </td>\n                                <td>\n                                  <Select\n                                    className=\"w-100 form-control-select\"\n                                    classNamePrefix=\"select\"\n                                    options={getSubGroups(\n                                      values.invoice_details[index]\n                                        .invoice_group_id\n                                    )}\n                                    value={getSelectedSubGroup(\n                                      values.invoice_details[index]\n                                        .invoice_group_id,\n                                      values.invoice_details[index]\n                                        .invoice_sub_group_id\n                                    )}\n                                    placeholder=\"Select\"\n                                    isSearchable={false}\n                                    isDisabled\n                                  />\n                                </td>\n                                <td>\n                                  <Select\n                                    className=\"w-100 form-control-select\"\n                                    classNamePrefix=\"select\"\n                                    options={getSubItems(\n                                      values.invoice_details[index]\n                                        .invoice_group_id,\n                                      values.invoice_details[index]\n                                        .invoice_sub_group_id\n                                    )}\n                                    value={getSelectedSubItem(\n                                      values.invoice_details[index]\n                                        .invoice_group_id,\n                                      values.invoice_details[index]\n                                        .invoice_sub_group_id,\n                                      values.invoice_details[index]\n                                        .invoice_item_id\n                                    )}\n                                    placeholder=\"Select\"\n                                    isSearchable={false}\n                                    isDisabled\n                                  />\n                                </td>\n                                <td>\n                                  <Field\n                                    type=\"text\"\n                                    className=\"grid-input\"\n                                    name={`invoice_details.${index}.unit_price`}\n                                    value={\n                                      values.invoice_details[index].unit_price\n                                    }\n                                    disabled\n                                  />\n                                </td>\n                                <td>\n                                  <Field\n                                    type=\"text\"\n                                    className=\"grid-input\"\n                                    name={`invoice_details.${index}.quantity`}\n                                    value={\n                                      values.invoice_details[index].quantity\n                                    }\n                                    disabled\n                                  />\n                                </td>\n                                <td>\n                                  <Field\n                                    type=\"text\"\n                                    className=\"grid-input\"\n                                    disabled\n                                    name={`invoice_details.${index}.amount`}\n                                  />\n                                </td>\n                              </tr>\n                            ))}\n                          </React.Fragment>\n                        )}\n                      />\n                      <tr>\n                        <td colSpan=\"6\">\n                          <div className=\"text-right\">\n                            <label className=\"mr-3\">Sub Total</label>\n                          </div>\n                        </td>\n                        <td>\n                          <Field\n                            type=\"text\"\n                            className=\"grid-input\"\n                            name=\"subtotal\"\n                            disabled\n                          />\n                        </td>\n                      </tr>\n                      <tr>\n                        <td colSpan=\"6\">\n                          <div className=\"text-right\">\n                            <label className=\"mr-3\">Discount Rounded</label>\n                          </div>\n                        </td>\n                        <td>\n                          <Field\n                            type=\"text\"\n                            className=\"grid-input\"\n                            name=\"discount\"\n                            disabled\n                            value={values.discount}\n                            onChange={(e) => {\n                              handleChange(e);\n                              let discountAmt = e.target.value\n                                ? e.target.value\n                                : 0;\n                              let vatamount =\n                                ((values.subtotal - discountAmt) *\n                                  props.entry.vat_percentage) /\n                                100;\n                              setFieldValue(\"vatamount\", vatamount);\n\n                              let totalamount =\n                                values.subtotal - discountAmt + vatamount;\n                              setFieldValue(\"totalamount\", totalamount);\n                            }}\n                          />\n                        </td>\n                      </tr>\n                      <tr>\n                        <td colSpan=\"6\">\n                          <div className=\"text-right\">\n                            <label className=\"mr-3\">VAT Amount</label>\n                          </div>\n                        </td>\n                        <td>\n                          <Field\n                            type=\"text\"\n                            disabled\n                            className=\"grid-input\"\n                            name=\"vatamount\"\n                          />\n                        </td>\n                      </tr>\n                      <tr>\n                        <td colSpan=\"6\">\n                          <div className=\"text-right\">\n                            <label className=\"mr-3\">Total</label>\n                          </div>\n                        </td>\n                        <td>\n                          <Field\n                            type=\"text\"\n                            disabled\n                            className=\"grid-input\"\n                            name=\"totalamount\"\n                          />\n                        </td>\n                      </tr>\n                    </tbody>\n                  </Table>\n                </Col>\n              </Row>\n              <div className=\"mt-4\">\n                <div className=\"checkbox d-flex p-0\">\n                  <input\n                    type=\"checkbox\"\n                    name=\"checkbox-fill-1\"\n                    id=\"checkbox-fill-a1\"\n                    onChange={() => setenableRecheck(!enableRecheck)}\n                  />\n                  <label htmlFor=\"checkbox-fill-a1\" className=\"cr\">\n                    Enable Reject Entry\n                  </label>\n                </div>\n              </div>\n              <div className=\"mt-2 text-center\">\n                <button\n                  type=\"button\"\n                  disabled={!enableRecheck}\n                  style={{ width: 100, fontWeight: \"bold\" }}\n                  className=\"btn btn-danger shadow-2 mt-3 mr-3\"\n                  onClick={() => {\n                    setStatusConfirm(true);\n                    setvalidatorAction(entryStatus.REJECTED);\n                  }}>\n                  Reject\n                </button>\n                <button\n                  type=\"button\"\n                  style={{ width: 100, fontWeight: \"bold\" }}\n                  className=\"btn btn-warning shadow-2 mt-3 mr-3\"\n                  onClick={() => {\n                    setStatusConfirm(true);\n                    setvalidatorAction(entryStatus.RECHECK);\n                  }}>\n                  Recheck\n                </button>\n                <button\n                  type=\"button\"\n                  style={{ width: 100, fontWeight: \"bold\" }}\n                  className=\"btn btn-primary shadow-2 mt-3\"\n                  onClick={() => {\n                    setStatusConfirm(true);\n                    setvalidatorAction(entryStatus.APPROVED);\n                  }}>\n                  Approve\n                </button>\n              </div>\n            </Form>\n          )}\n        </Formik>\n      </div>\n      <Modal\n        size=\"md\"\n        show={showStatusConfirm}\n        backdrop=\"static\"\n        keyboard={true}\n        backdropClassName=\"nested-modal\">\n        <Modal.Header>\n          <h5 className=\"card-title\">\n            {validatorAction === entryStatus.APPROVED\n              ? \"Approve\"\n              : validatorAction === entryStatus.RECHECK\n              ? \"Recheck\"\n              : \"Reject\"}{\" \"}\n            Entry\n          </h5>\n        </Modal.Header>\n        <Modal.Body>\n          <div>\n            <span>\n              Are you sure that to{\" \"}\n              {validatorAction === entryStatus.APPROVED\n                ? \"Approve\"\n                : validatorAction === entryStatus.RECHECK\n                ? \"Recheck\"\n                : \"Reject\"}\n              ?\n            </span>\n          </div>\n          <div className=\"mt-4\">\n            <textarea\n              ref={actionComment}\n              className=\"form-control\"\n              placeholder=\"Comment\"></textarea>\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <div>\n            <button\n              className=\"btn btn-outline-primary\"\n              onClick={() => setStatusConfirm(false)}>\n              Cancel\n            </button>\n            <button\n              className={`btn ${\n                validatorAction === entryStatus.APPROVED\n                  ? \"btn-primary\"\n                  : validatorAction === entryStatus.RECHECK\n                  ? \"btn-warning\"\n                  : \"btn-danger\"\n              }`}\n              onClick={() => {\n                setStatusConfirm(false);\n                entryAction();\n              }}>\n              {validatorAction === entryStatus.APPROVED\n                ? \"Approve\"\n                : validatorAction === entryStatus.RECHECK\n                ? \"Recheck\"\n                : \"Reject\"}\n            </button>\n          </div>\n        </Modal.Footer>\n      </Modal>\n    </React.Fragment>\n  );\n};\n\nexport default PurchaseForm;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/checked-entries/forms/purchaseForm.js",["1025","1026","1027","1028","1029","1030"],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/checked-entries/forms/salesForm.js",["1031","1032"],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/checked-entries/forms/expenditureForm.js",["1033","1034","1035"],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/pending-entries/forms/expenditureForm.js",["1036","1037","1038"],"import React, { useState, useEffect, useRef } from \"react\";\nimport { Row, Col, Modal } from \"react-bootstrap\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport DatePicker from \"react-datepicker\";\nimport Select from \"react-select\";\n\nimport { entryStatus } from \"../../../../enums/entryStatus\";\nimport { showNotification } from \"../../../../services/toasterService\";\nimport { callApi } from \"../../../../services/apiService\";\nimport { ApiConstants } from \"../../../../config/apiConstants\";\n\nconst ExpenditureForm = (props) => {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [invoiceDate, setinvoiceDate] = useState(null);\n  const [expenditureData, setexpenditureData] = useState(null);\n  const [showStatusConfirm, setStatusConfirm] = React.useState(false);\n  const [validatorAction, setvalidatorAction] = React.useState(\"\");\n  const actionComment = useRef(null);\n  const [enableRecheck, setenableRecheck] = useState(false);\n  const [groupsList, setGroupsList] = useState([]);\n  const [subGroupsList, setSubGroupsList] = useState([]);\n  const [itemsList, setItemsList] = useState([]);\n\n  const ExpenditureFormSchema = Yup.object().shape({\n    invoice_date: Yup.mixed().required(\"Please select Date\"),\n    amount: Yup.string()\n      .required(\"Please enter Amount\")\n      .matches(/^[0-9]*$/, \"Please enter a valid Amount\"),\n    comments: Yup.string().required(\"Please enter Comment\"),\n    invoice_number: Yup.string().required(\"Please enter Invoice number\"),\n    invoice_group_id: Yup.string().required(\"Please enter Group\"),\n    invoice_sub_group_id: Yup.string().required(\"Please enter Sub Group\"),\n    invoice_item_id: Yup.string().required(\"Please select Item\"),\n  });\n\n  useEffect(() => {\n    invoiceExpGroups();\n  }, []);\n\n  useEffect(() => {\n    if (groupsList.length) getData();\n  }, [groupsList]);\n\n  const getData = () => {\n    props.onShowLoader(true);\n    let params = { entry_id: props.entry.id };\n    callApi(\"get\", ApiConstants.expenditure.getData, params, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          setexpenditureData(response.payload);\n          setinvoiceDate(new Date(response.payload.invoice_date));\n          let group = groupsList.find(\n            (i) => i.id === response.payload.invoice_group_id\n          );\n          onChangeGroups(group);\n          let subgroup = group.invoice_sub_groups.find(\n            (i) => i.id === response.payload.invoice_sub_group_id\n          );\n          onChangeSubGroups(subgroup);\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const entryAction = () => {\n    props.onShowLoader(true);\n    let params = {\n      entry_id: props.entry.id,\n      status_id: validatorAction,\n      comment: actionComment.current.value,\n    };\n\n    callApi(\"post\", ApiConstants.entry.setvalidatorstatus, params, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          props.onSuccess();\n          showNotification(\"Success\", response.message, \"success\");\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const invoiceExpGroups = () => {\n    props.onShowLoader(true);\n    callApi(\"get\", ApiConstants.lookups.invoiceexpgroups, null)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          let data = response.payload.map((i) => {\n            return { ...i, value: i.id, label: i.name };\n          });\n          setGroupsList(data);\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const onChangeGroups = (value) => {\n    let subGroups = value?.invoice_sub_groups?.map((i) => {\n      return { ...i, value: i.id, label: i.name };\n    });\n    setSubGroupsList(subGroups);\n  };\n\n  const onChangeSubGroups = (value) => {\n    let items = value?.invoice_items?.map((i) => {\n      return { ...i, value: i.id, label: i.name };\n    });\n    setItemsList(items);\n  };\n\n  return (\n    <React.Fragment>\n      <div>\n        <Formik\n          enableReinitialize={true}\n          initialValues={{\n            invoice_date: \"\",\n            amount: expenditureData?.amount ? expenditureData?.amount : \"\",\n            vat_amount: expenditureData?.vat_amount ? expenditureData?.vat_amount : \"\",\n            comments: expenditureData?.comments\n              ? expenditureData?.comments\n              : \"\",\n            invoice_number: expenditureData?.invoice_number\n              ? expenditureData?.invoice_number\n              : \"\",\n            invoice_group_id: expenditureData?.invoice_group_id\n              ? expenditureData?.invoice_group_id\n              : \"\",\n            invoice_sub_group_id: expenditureData?.invoice_sub_group_id\n              ? expenditureData?.invoice_sub_group_id\n              : \"\",\n            invoice_item_id: expenditureData?.invoice_item_id\n              ? expenditureData?.invoice_item_id\n              : \"\",\n          }}\n          validationSchema={ExpenditureFormSchema}>\n          {({ errors, values }) => (\n            <Form>\n              <Row>\n                <Col xs={12}>\n                  <div className=\"date-picker-container mb-3\">\n                    <DatePicker\n                      className={`form-control ${errors.invoice_date && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                      placeholderText=\"Date\"\n                      disabled\n                      dateFormat=\"dd/MM/yyyy\"\n                      selected={invoiceDate}\n                    />\n                    <i className=\"feather icon-calendar\"></i>\n                    <ErrorMessage name=\"invoice_date\">\n                      {(msg) => (\n                        <div className=\"invalid-feedback d-block\">{msg}</div>\n                      )}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      disabled\n                      className={`form-control ${errors.amount && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                      placeholder=\"Amount\"\n                      name=\"amount\"\n                    />\n                    <ErrorMessage name=\"amount\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      disabled\n                      className={`form-control ${errors.vat_amount && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                      placeholder=\"VAT Amount\"\n                      name=\"vat_amount\"\n                    />\n                    <ErrorMessage name=\"vat_amount\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      disabled\n                      className={`form-control ${errors.comments && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                      placeholder=\"Comments\"\n                      name=\"comments\"\n                    />\n                    <ErrorMessage name=\"comments\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      disabled\n                      className={`form-control ${errors.invoice_number && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                      placeholder=\"Invoice Number\"\n                      name=\"invoice_number\"\n                    />\n                    <ErrorMessage name=\"invoice_number\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Select\n                      className={`w-100 form-control-select ${errors.invoice_group_id && isSubmitted\n                        ? \"is-invalid\"\n                        : \"\"\n                        }`}\n                      classNamePrefix=\"select\"\n                      options={groupsList}\n                      placeholder=\"Group\"\n                      isDisabled\n                      isSearchable={false}\n                      value={groupsList.find(\n                        (i) => i.value === values?.invoice_group_id\n                      )}\n                    />\n                    <ErrorMessage name=\"invoice_group_id\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Select\n                      className={`w-100 form-control-select ${errors.invoice_sub_group_id && isSubmitted\n                        ? \"is-invalid\"\n                        : \"\"\n                        }`}\n                      classNamePrefix=\"select\"\n                      options={subGroupsList}\n                      placeholder=\"Sub Group\"\n                      isSearchable={false}\n                      isDisabled\n                      value={subGroupsList.find(\n                        (i) => i.value === values?.invoice_sub_group_id\n                      )}\n                    />\n                    <ErrorMessage name=\"invoice_sub_group_id\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Select\n                      className={`w-100 form-control-select ${errors.invoice_item_id && isSubmitted\n                        ? \"is-invalid\"\n                        : \"\"\n                        }`}\n                      classNamePrefix=\"select\"\n                      options={itemsList}\n                      placeholder=\"Items\"\n                      isDisabled\n                      isSearchable={false}\n                      value={itemsList.find(\n                        (i) => i.value === values?.invoice_item_id\n                      )}\n                    />\n                    <ErrorMessage name=\"invoice_item_id\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n              </Row>\n              <div className=\"mt-4\">\n                <div className=\"checkbox d-flex p-0\">\n                  <input\n                    type=\"checkbox\"\n                    name=\"checkbox-fill-1\"\n                    id=\"checkbox-fill-a1\"\n                    onChange={() => setenableRecheck(!enableRecheck)}\n                  />\n                  <label htmlFor=\"checkbox-fill-a1\" className=\"cr\">\n                    Enable Reject Entry\n                  </label>\n                </div>\n              </div>\n              <div className=\"mt-2 text-center\">\n                <button\n                  type=\"button\"\n                  disabled={!enableRecheck}\n                  style={{ width: 100, fontWeight: \"bold\" }}\n                  className=\"btn btn-danger shadow-2 mt-3 mr-3\"\n                  onClick={() => {\n                    setStatusConfirm(true);\n                    setvalidatorAction(entryStatus.REJECTED);\n                  }}>\n                  Reject\n                </button>\n                <button\n                  type=\"button\"\n                  style={{ width: 100, fontWeight: \"bold\" }}\n                  className=\"btn btn-warning shadow-2 mt-3 mr-3\"\n                  onClick={() => {\n                    setStatusConfirm(true);\n                    setvalidatorAction(entryStatus.RECHECK);\n                  }}>\n                  Recheck\n                </button>\n                <button\n                  type=\"button\"\n                  style={{ width: 100, fontWeight: \"bold\" }}\n                  className=\"btn btn-primary shadow-2 mt-3\"\n                  onClick={() => {\n                    setStatusConfirm(true);\n                    setvalidatorAction(entryStatus.APPROVED);\n                  }}>\n                  Approve\n                </button>\n              </div>\n            </Form>\n          )}\n        </Formik>\n      </div>\n      <Modal\n        size=\"md\"\n        show={showStatusConfirm}\n        backdrop=\"static\"\n        keyboard={true}\n        backdropClassName=\"nested-modal\">\n        <Modal.Header>\n          <h5 className=\"card-title\">\n            {validatorAction === entryStatus.APPROVED\n              ? \"Approve\"\n              : validatorAction === entryStatus.RECHECK\n                ? \"Recheck\"\n                : \"Reject\"}{\" \"}\n            Entry\n          </h5>\n        </Modal.Header>\n        <Modal.Body>\n          <div>\n            <span>\n              Are you sure that to{\" \"}\n              {validatorAction === entryStatus.APPROVED\n                ? \"Approve\"\n                : validatorAction === entryStatus.RECHECK\n                  ? \"Recheck\"\n                  : \"Reject\"}\n              ?\n            </span>\n          </div>\n          <div className=\"mt-4\">\n            <textarea\n              ref={actionComment}\n              className=\"form-control\"\n              placeholder=\"Comment\"></textarea>\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <div>\n            <button\n              className=\"btn btn-outline-primary\"\n              onClick={() => setStatusConfirm(false)}>\n              Cancel\n            </button>\n            <button\n              className={`btn ${validatorAction === entryStatus.APPROVED\n                ? \"btn-primary\"\n                : validatorAction === entryStatus.RECHECK\n                  ? \"btn-warning\"\n                  : \"btn-danger\"\n                }`}\n              onClick={() => {\n                setStatusConfirm(false);\n                entryAction();\n              }}>\n              {validatorAction === entryStatus.APPROVED\n                ? \"Approve\"\n                : validatorAction === entryStatus.RECHECK\n                  ? \"Recheck\"\n                  : \"Reject\"}\n            </button>\n          </div>\n        </Modal.Footer>\n      </Modal>\n    </React.Fragment>\n  );\n};\n\nexport default ExpenditureForm;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/pending-entries/forms/purchaseForm.js",["1039","1040","1041","1042"],"import React, { useState, useEffect, useRef } from \"react\";\nimport { Row, Col, Table, Modal } from \"react-bootstrap\";\nimport { Formik, Field, Form, ErrorMessage, FieldArray } from \"formik\";\nimport * as Yup from \"yup\";\nimport DatePicker from \"react-datepicker\";\nimport Select from \"react-select\";\n\nimport { callApi } from \"../../../../services/apiService\";\nimport { ApiConstants } from \"../../../../config/apiConstants\";\nimport { entryStatus } from \"../../../../enums/entryStatus\";\nimport { showNotification } from \"../../../../services/toasterService\";\n\nconst PurchaseForm = (props) => {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [invoiceDate, setinvoiceDate] = useState(null);\n  const [purchaseData, setPurchaseData] = useState(null);\n  const [groupsList, setGroupsList] = useState([]);\n  const [suppliersList, setSuppliersList] = useState([]);\n  const [enableRecheck, setenableRecheck] = useState(false);\n  const [showStatusConfirm, setStatusConfirm] = React.useState(false);\n  const [validatorAction, setvalidatorAction] = React.useState(\"\");\n  const actionComment = useRef(null);\n\n  const PurchaseFormSchema = Yup.object().shape({\n    supplier_id: Yup.mixed().required(\"Please select Supplier\"),\n    trn: Yup.string(),\n    invoice_number: Yup.string().required(\"Please enter Invoice number\"),\n    invoice_date: Yup.mixed().required(\"Please select Date\"),\n    invoice_details: Yup.array().of(\n      Yup.object().shape({\n        invoice_group_id: Yup.string().required(\"Please select Group\"),\n        invoice_sub_group_id: Yup.string().required(\"Please select Sub Group\"),\n        invoice_item_id: Yup.string().required(\"Please select Item\"),\n        unit_price: Yup.string().required(\"Please enter Unit Price\"),\n        quantity: Yup.string().required(\"Please enter Quantity\"),\n        amount: Yup.string().required(\"Please enter Amount\"),\n      })\n    ),\n    subtotal: Yup.string(),\n    discount: Yup.string(),\n    vatamount: Yup.string(),\n    totalamount: Yup.string(),\n  });\n\n  useEffect(() => {\n    invoicePurchaseGroups();\n    getSuppliers();\n  }, []);\n\n  useEffect(() => {\n    if (groupsList.length) {\n      getData();\n    }\n  }, [groupsList]);\n\n  const getData = () => {\n    props.onShowLoader(true);\n    let params = { entry_id: props.entry.id };\n    callApi(\"get\", ApiConstants.purchase.getData, params, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          setPurchaseData(response.payload);\n          // console.log(response.payload);\n          setinvoiceDate(new Date(response.payload?.header?.invoice_date));\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const entryAction = () => {\n    props.onShowLoader(true);\n    let params = {\n      entry_id: props.entry.id,\n      status_id: validatorAction,\n      comment: actionComment.current.value,\n    };\n\n    callApi(\"post\", ApiConstants.entry.setvalidatorstatus, params, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          props.onSuccess();\n          showNotification(\"Success\", response.message, \"success\");\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const invoicePurchaseGroups = () => {\n    props.onShowLoader(true);\n    callApi(\"get\", ApiConstants.lookups.invoicepurchasegroups, null, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          let data = response.payload.map((i) => {\n            return { ...i, value: i.id, label: i.name };\n          });\n          setGroupsList(data);\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const getSuppliers = () => {\n    props.onShowLoader(true);\n    callApi(\"get\", ApiConstants.lookups.getSuppliers, null)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          let suppliers = response.payload.map((i) => {\n            return { ...i, value: i.id, label: i.name };\n          });\n          setSuppliersList(suppliers);\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const getSubGroups = (groupId) => {\n    let selectedGroup = groupsList.find((i) => i.id === groupId);\n    let subGroups = selectedGroup\n      ? selectedGroup.invoice_sub_groups.map((i) => {\n        return { ...i, value: i.id, label: i.name };\n      })\n      : [];\n    return subGroups;\n  };\n\n  const getSelectedSubGroup = (groupId, selectedId) => {\n    let selectedGroup = groupsList.find((i) => i.id === groupId);\n    let subGroups = selectedGroup\n      ? selectedGroup.invoice_sub_groups.map((i) => {\n        return { ...i, value: i.id, label: i.name };\n      })\n      : [];\n\n    let selectedSubGroup = null;\n    if (subGroups && selectedId) {\n      selectedSubGroup = subGroups.find((i) => i.id === selectedId);\n    }\n    return selectedSubGroup;\n  };\n\n  const getSubItems = (groupId, subgroupId) => {\n    let selectedGroup = groupsList.find((i) => i.id === groupId);\n    let subGroups = selectedGroup ? selectedGroup.invoice_sub_groups : [];\n    let selectedSubGroup = subGroups.find((i) => i.id === subgroupId);\n    let subItems = selectedSubGroup\n      ? selectedSubGroup.invoice_items.map((i) => {\n        return { ...i, value: i.id, label: i.name };\n      })\n      : [];\n    return subItems;\n  };\n\n  const getSelectedSubItem = (groupId, subgroupId, selectedId) => {\n    let selectedGroup = groupsList.find((i) => i.id === groupId);\n    let subGroups = selectedGroup ? selectedGroup.invoice_sub_groups : [];\n    let selectedSubGroup = subGroups.find((i) => i.id === subgroupId);\n    let subItems = selectedSubGroup\n      ? selectedSubGroup.invoice_items.map((i) => {\n        return { ...i, value: i.id, label: i.name };\n      })\n      : [];\n\n    let selectedSubItem = null;\n    if (subItems && selectedId) {\n      selectedSubItem = subItems.find((i) => i.id === selectedId);\n    }\n    return selectedSubItem;\n  };\n\n  const calculateTotal = (\n    values,\n    setFieldValue,\n    index,\n    fieldValue,\n    fieldType\n  ) => {\n    let amount = 0;\n    if (fieldType === \"unit_price\")\n      amount = values.invoice_details[index].quantity * fieldValue;\n    if (fieldType === \"quantity\")\n      amount = values.invoice_details[index].unit_price * fieldValue;\n\n    setFieldValue(`invoice_details.${index}.amount`, amount);\n    values.invoice_details[index].amount = amount;\n\n    let subtotal = values.invoice_details.reduce((sum, item) => {\n      return sum + item.amount;\n    }, 0);\n    setFieldValue(\"subtotal\", subtotal);\n    values.subtotal = subtotal;\n\n    let discountAmt = values.discount ? values.discount : 0;\n    let vatamount =\n      ((values.subtotal - discountAmt) * props.entry.vat_percentage) / 100;\n    setFieldValue(\"vatamount\", vatamount);\n\n    let totalamount = values.subtotal - discountAmt + vatamount;\n    setFieldValue(\"totalamount\", totalamount);\n  };\n\n  return (\n    <React.Fragment>\n      <div>\n        <Formik\n          enableReinitialize={true}\n          initialValues={{\n            supplier_id: purchaseData?.header?.supplier_id\n              ? purchaseData.header.supplier_id\n              : \"\",\n            trn: purchaseData?.header?.supplier_trn\n              ? purchaseData.header.supplier_trn\n              : \"\",\n            invoice_number: purchaseData?.header?.invoice_number\n              ? purchaseData.header.invoice_number\n              : \"\",\n            invoice_date: \"\",\n            invoice_details: purchaseData?.details\n              ? purchaseData.details.map((i) => {\n                return {\n                  invoice_group_id: i.invoice_group_id,\n                  invoice_sub_group_id: i.invoice_sub_group_id,\n                  invoice_item_id: i.invoice_item_id,\n                  unit_price: i.price,\n                  quantity: i.qty,\n                  vat_percentage: i.vat_percentage,\n                  amount: i.amount,\n                };\n              })\n              : [],\n            subtotal: purchaseData?.header?.sub_total\n              ? purchaseData.header.sub_total\n              : \"\",\n            discount: purchaseData?.header?.discount\n              ? purchaseData.header.discount\n              : \"0\",\n            vatamount: purchaseData?.header?.vat_amount\n              ? purchaseData.header.vat_amount\n              : \"\",\n            totalamount: purchaseData?.header?.total_amount\n              ? purchaseData.header.total_amount\n              : \"\",\n          }}\n          validationSchema={PurchaseFormSchema}>\n          {({ errors, handleChange, setFieldValue, values }) => (\n            <Form>\n              <Row>\n                <Col lg={6} xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Select\n                      className={`w-100 form-control-select ${errors.supplier_id && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                      classNamePrefix=\"select\"\n                      options={suppliersList}\n                      placeholder=\"Supplier\"\n                      isSearchable={false}\n                      isDisabled\n                      value={suppliersList.find(\n                        (i) => i.value === values?.supplier_id\n                      )}\n                    />\n                    <ErrorMessage name=\"supplier_id\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n                <Col lg={6} xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      disabled\n                      className={`form-control ${errors.trn && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                      placeholder=\"TRN\"\n                      name=\"trn\"\n                    />\n                    <ErrorMessage name=\"trn\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n                <Col lg={6} xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      disabled\n                      className={`form-control ${errors.invoice_number && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                      placeholder=\"Invoice Number\"\n                      name=\"invoice_number\"\n                    />\n                    <ErrorMessage name=\"invoice_number\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n                <Col lg={6} xs={12}>\n                  <div className=\"date-picker-container mb-3\">\n                    <DatePicker\n                      className={`form-control ${errors.invoice_date && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                      placeholderText=\"Date\"\n                      disabled\n                      dateFormat=\"dd/MM/yyyy\"\n                      selected={invoiceDate}\n                      onChange={(value) => {\n                        setinvoiceDate(value);\n                        let event = {\n                          target: {\n                            name: \"invoice_date\",\n                            value: value,\n                          },\n                        };\n                        handleChange(event);\n                      }}\n                    />\n                    <i className=\"feather icon-calendar\"></i>\n                    <ErrorMessage name=\"invoice_date\">\n                      {(msg) => (\n                        <div className=\"invalid-feedback d-block\">{msg}</div>\n                      )}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col lg={12} className=\"overflow-auto\">\n                  <Table className=\"purchase-grid\">\n                    <thead>\n                      <tr>\n                        <th>#</th>\n                        <th width=\"120\">Group</th>\n                        <th width=\"120\">Sub Group</th>\n                        <th width=\"120\">Item Name</th>\n                        <th>Unit Price</th>\n                        <th>Quantity</th>\n                        <th>VAT{\"(%)\"}</th>\n                        <th>Amount</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <FieldArray\n                        name=\"invoice_details\"\n                        render={(arrayHelpers) => (\n                          <React.Fragment>\n                            {values.invoice_details.map((item, index) => (\n                              <tr key={index}>\n                                <th scope=\"row\">{index + 1}</th>\n                                <td>\n                                  <Select\n                                    className=\"w-100 form-control-select\"\n                                    classNamePrefix=\"select\"\n                                    options={groupsList}\n                                    value={groupsList.find(\n                                      (i) =>\n                                        i.value ===\n                                        values?.invoice_details[index]\n                                          .invoice_group_id\n                                    )}\n                                    placeholder=\"Select\"\n                                    isSearchable={false}\n                                    isDisabled\n                                  />\n                                </td>\n                                <td>\n                                  <Select\n                                    className=\"w-100 form-control-select\"\n                                    classNamePrefix=\"select\"\n                                    options={getSubGroups(\n                                      values.invoice_details[index]\n                                        .invoice_group_id\n                                    )}\n                                    value={getSelectedSubGroup(\n                                      values.invoice_details[index]\n                                        .invoice_group_id,\n                                      values.invoice_details[index]\n                                        .invoice_sub_group_id\n                                    )}\n                                    placeholder=\"Select\"\n                                    isSearchable={false}\n                                    isDisabled\n                                  />\n                                </td>\n                                <td>\n                                  <Select\n                                    className=\"w-100 form-control-select\"\n                                    classNamePrefix=\"select\"\n                                    options={getSubItems(\n                                      values.invoice_details[index]\n                                        .invoice_group_id,\n                                      values.invoice_details[index]\n                                        .invoice_sub_group_id\n                                    )}\n                                    value={getSelectedSubItem(\n                                      values.invoice_details[index]\n                                        .invoice_group_id,\n                                      values.invoice_details[index]\n                                        .invoice_sub_group_id,\n                                      values.invoice_details[index]\n                                        .invoice_item_id\n                                    )}\n                                    placeholder=\"Select\"\n                                    isSearchable={false}\n                                    isDisabled\n                                  />\n                                </td>\n                                <td>\n                                  <Field\n                                    type=\"text\"\n                                    className=\"grid-input\"\n                                    name={`invoice_details.${index}.unit_price`}\n                                    value={\n                                      values.invoice_details[index].unit_price\n                                    }\n                                    disabled\n                                  />\n                                </td>\n                                <td>\n                                  <Field\n                                    type=\"text\"\n                                    className=\"grid-input\"\n                                    name={`invoice_details.${index}.quantity`}\n                                    value={\n                                      values.invoice_details[index].quantity\n                                    }\n                                    disabled\n                                  />\n                                </td>\n                                <td>\n                                  <Field\n                                    type=\"text\"\n                                    className=\"grid-input\"\n                                    value={values.invoice_details[index].vat_percentage}\n                                    disabled\n                                  />\n                                </td>\n                                <td>\n                                  <Field\n                                    type=\"text\"\n                                    className=\"grid-input\"\n                                    disabled\n                                    name={`invoice_details.${index}.amount`}\n                                  />\n                                </td>\n                              </tr>\n                            ))}\n                          </React.Fragment>\n                        )}\n                      />\n                      <tr>\n                        <td colSpan=\"6\">\n                          <div className=\"text-right\">\n                            <label className=\"mr-3\">Sub Total</label>\n                          </div>\n                        </td>\n                        <td>\n                          <Field\n                            type=\"text\"\n                            className=\"grid-input\"\n                            name=\"subtotal\"\n                            disabled\n                          />\n                        </td>\n                      </tr>\n                      <tr>\n                        <td colSpan=\"6\">\n                          <div className=\"text-right\">\n                            <label className=\"mr-3\">Discount Rounded</label>\n                          </div>\n                        </td>\n                        <td>\n                          <Field\n                            type=\"text\"\n                            className=\"grid-input\"\n                            name=\"discount\"\n                            disabled\n                            value={values.discount}\n                            onChange={(e) => {\n                              handleChange(e);\n                              let discountAmt = e.target.value\n                                ? e.target.value\n                                : 0;\n                              let vatamount =\n                                ((values.subtotal - discountAmt) *\n                                  props.entry.vat_percentage) /\n                                100;\n                              setFieldValue(\"vatamount\", vatamount);\n\n                              let totalamount =\n                                values.subtotal - discountAmt + vatamount;\n                              setFieldValue(\"totalamount\", totalamount);\n                            }}\n                          />\n                        </td>\n                      </tr>\n                      <tr>\n                        <td colSpan=\"6\">\n                          <div className=\"text-right\">\n                            <label className=\"mr-3\">VAT Amount</label>\n                          </div>\n                        </td>\n                        <td>\n                          <Field\n                            type=\"text\"\n                            disabled\n                            className=\"grid-input\"\n                            name=\"vatamount\"\n                          />\n                        </td>\n                      </tr>\n                      <tr>\n                        <td colSpan=\"6\">\n                          <div className=\"text-right\">\n                            <label className=\"mr-3\">Total</label>\n                          </div>\n                        </td>\n                        <td>\n                          <Field\n                            type=\"text\"\n                            disabled\n                            className=\"grid-input\"\n                            name=\"totalamount\"\n                          />\n                        </td>\n                      </tr>\n                    </tbody>\n                  </Table>\n                </Col>\n              </Row>\n              <div className=\"mt-4\">\n                <div className=\"checkbox d-flex p-0\">\n                  <input\n                    type=\"checkbox\"\n                    name=\"checkbox-fill-1\"\n                    id=\"checkbox-fill-a1\"\n                    onChange={() => setenableRecheck(!enableRecheck)}\n                  />\n                  <label htmlFor=\"checkbox-fill-a1\" className=\"cr\">\n                    Enable Reject Entry\n                  </label>\n                </div>\n              </div>\n              <div className=\"mt-2 text-center\">\n                <button\n                  type=\"button\"\n                  disabled={!enableRecheck}\n                  style={{ width: 100, fontWeight: \"bold\" }}\n                  className=\"btn btn-danger shadow-2 mt-3 mr-3\"\n                  onClick={() => {\n                    setStatusConfirm(true);\n                    setvalidatorAction(entryStatus.REJECTED);\n                  }}>\n                  Reject\n                </button>\n                <button\n                  type=\"button\"\n                  style={{ width: 100, fontWeight: \"bold\" }}\n                  className=\"btn btn-warning shadow-2 mt-3 mr-3\"\n                  onClick={() => {\n                    setStatusConfirm(true);\n                    setvalidatorAction(entryStatus.RECHECK);\n                  }}>\n                  Recheck\n                </button>\n                <button\n                  type=\"button\"\n                  style={{ width: 100, fontWeight: \"bold\" }}\n                  className=\"btn btn-primary shadow-2 mt-3\"\n                  onClick={() => {\n                    setStatusConfirm(true);\n                    setvalidatorAction(entryStatus.APPROVED);\n                  }}>\n                  Approve\n                </button>\n              </div>\n            </Form>\n          )}\n        </Formik>\n      </div>\n      <Modal\n        size=\"md\"\n        show={showStatusConfirm}\n        backdrop=\"static\"\n        keyboard={true}\n        backdropClassName=\"nested-modal\">\n        <Modal.Header>\n          <h5 className=\"card-title\">\n            {validatorAction === entryStatus.APPROVED\n              ? \"Approve\"\n              : validatorAction === entryStatus.RECHECK\n                ? \"Recheck\"\n                : \"Reject\"}{\" \"}\n            Entry\n          </h5>\n        </Modal.Header>\n        <Modal.Body>\n          <div>\n            <span>\n              Are you sure that to{\" \"}\n              {validatorAction === entryStatus.APPROVED\n                ? \"Approve\"\n                : validatorAction === entryStatus.RECHECK\n                  ? \"Recheck\"\n                  : \"Reject\"}\n              ?\n            </span>\n          </div>\n          <div className=\"mt-4\">\n            <textarea\n              ref={actionComment}\n              className=\"form-control\"\n              placeholder=\"Comment\"></textarea>\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <div>\n            <button\n              className=\"btn btn-outline-primary\"\n              onClick={() => setStatusConfirm(false)}>\n              Cancel\n            </button>\n            <button\n              className={`btn ${validatorAction === entryStatus.APPROVED\n                ? \"btn-primary\"\n                : validatorAction === entryStatus.RECHECK\n                  ? \"btn-warning\"\n                  : \"btn-danger\"\n                }`}\n              onClick={() => {\n                setStatusConfirm(false);\n                entryAction();\n              }}>\n              {validatorAction === entryStatus.APPROVED\n                ? \"Approve\"\n                : validatorAction === entryStatus.RECHECK\n                  ? \"Recheck\"\n                  : \"Reject\"}\n            </button>\n          </div>\n        </Modal.Footer>\n      </Modal>\n    </React.Fragment>\n  );\n};\n\nexport default PurchaseForm;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/pending-entries/forms/salesForm.js",["1043","1044"],"import React, {useState, useEffect, useRef} from \"react\";\nimport {Row, Col, Modal} from \"react-bootstrap\";\nimport {Formik, Field, Form, ErrorMessage} from \"formik\";\nimport * as Yup from \"yup\";\nimport DatePicker from \"react-datepicker\";\n\nimport {entryStatus} from \"../../../../enums/entryStatus\";\nimport {showNotification} from \"../../../../services/toasterService\";\nimport {callApi} from \"../../../../services/apiService\";\nimport {ApiConstants} from \"../../../../config/apiConstants\";\n\nconst SalesForm = (props) => {\n\tconst [isSubmitted, setIsSubmitted] = useState(false);\n\tconst [invoiceDate, setinvoiceDate] = useState(null);\n\tconst [salesData, setsalesData] = useState(null);\n\tconst [showStatusConfirm, setStatusConfirm] = React.useState(false);\n\tconst [validatorAction, setvalidatorAction] = React.useState(\"\");\n\tconst actionComment = useRef(null);\n\tconst [enableRecheck, setenableRecheck] = useState(false);\n\n\tconst SalesFormSchema = Yup.object().shape({\n\t\tinvoice_date: Yup.mixed().required(\"Please select Date\"),\n\t\tamount: Yup.string()\n\t\t\t.required(\"Please enter Amount\")\n\t\t\t.matches(/^[0-9]*$/, \"Please enter a valid Amount\"),\n\t\tcomments: Yup.string().required(\"Please enter Comment\"),\n\t\tinvoice_number: Yup.string().required(\"Please enter Invoice number\"),\n\t\tamount_exclude_vat: Yup.string(),\n\t\tvat_amount: Yup.string(),\n\t});\n\n\tuseEffect(() => {\n\t\tgetData();\n\t}, []);\n\n\tconst getData = () => {\n\t\tprops.onShowLoader(true);\n\t\tlet params = {entry_id: props.entry.id};\n\t\tcallApi(\"get\", ApiConstants.sales.getData, params, true)\n\t\t\t.then((response) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tsetsalesData(response.payload);\n\t\t\t\t\tsetinvoiceDate(new Date(response.payload.invoice_date));\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\tconst entryAction = () => {\n\t\tprops.onShowLoader(true);\n\t\tlet params = {\n\t\t\tentry_id: props.entry.id,\n\t\t\tstatus_id: validatorAction,\n\t\t\tcomment: actionComment.current.value,\n\t\t};\n\n\t\tcallApi(\"post\", ApiConstants.entry.setvalidatorstatus, params, true)\n\t\t\t.then((response) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tprops.onSuccess();\n\t\t\t\t\tshowNotification(\"Success\", response.message, \"success\");\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tprops.onShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<div>\n\t\t\t\t<Formik\n\t\t\t\t\tenableReinitialize={true}\n\t\t\t\t\tinitialValues={{\n\t\t\t\t\t\tinvoice_date: \"\",\n\t\t\t\t\t\tamount: salesData?.amount ? salesData?.amount : \"\",\n\t\t\t\t\t\tcomments: salesData?.comments ? salesData?.comments : \"\",\n\t\t\t\t\t\tinvoice_number: salesData?.invoice_number ? salesData?.invoice_number : \"\",\n\t\t\t\t\t\tamount_exclude_vat: salesData?.amount_exclude_vat ? salesData?.amount_exclude_vat : \"\",\n\t\t\t\t\t\tvat_amount: salesData?.vat_amount ? salesData?.vat_amount : \"\",\n\t\t\t\t\t}}\n\t\t\t\t\tvalidationSchema={SalesFormSchema}>\n\t\t\t\t\t{({errors}) => (\n\t\t\t\t\t\t<Form>\n\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t\t<div className=\"date-picker-container mb-3\">\n\t\t\t\t\t\t\t\t\t\t<DatePicker className={`form-control ${errors.invoice_date && isSubmitted ? \"is-invalid\" : \"\"}`} placeholderText=\"Date\" disabled dateFormat=\"dd/MM/yyyy\" selected={invoiceDate} />\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-calendar\"></i>\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"invoice_date\">{(msg) => <div className=\"invalid-feedback d-block\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" disabled className={`form-control ${errors.amount && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"Amount\" name=\"amount\" />\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"amount\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" disabled className={`form-control ${errors.comments && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"Comments\" name=\"comments\" />\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"comments\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" disabled className={`form-control ${errors.invoice_number && isSubmitted ? \"is-invalid\" : \"\"}`} placeholder=\"Invoice Number\" name=\"invoice_number\" />\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"invoice_number\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className={`form-control ${errors.amount_exclude_vat && isSubmitted ? \"is-invalid\" : \"\"}`} disabled placeholder=\"Amount Exclude Vat\" name=\"amount_exclude_vat\" />\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"amount_exclude_vat\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t<Field type=\"text\" className={`form-control ${errors.vat_amount && isSubmitted ? \"is-invalid\" : \"\"}`} disabled placeholder=\"Vat Amount\" name=\"vat_amount\" />\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"vat_amount\">{(msg) => <div className=\"invalid-feedback\">{msg}</div>}</ErrorMessage>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t<div className=\"mt-4\">\n\t\t\t\t\t\t\t\t<div className=\"checkbox d-flex p-0\">\n\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" name=\"checkbox-fill-1\" id=\"checkbox-fill-a1\" onChange={() => setenableRecheck(!enableRecheck)} />\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"checkbox-fill-a1\" className=\"cr\">\n\t\t\t\t\t\t\t\t\t\tEnable Reject Entry\n\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"mt-2 text-center\">\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\tdisabled={!enableRecheck}\n\t\t\t\t\t\t\t\t\tstyle={{width: 100, fontWeight: \"bold\"}}\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-danger shadow-2 mt-3 mr-3\"\n\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\tsetStatusConfirm(true);\n\t\t\t\t\t\t\t\t\t\tsetvalidatorAction(entryStatus.REJECTED);\n\t\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\tReject\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\tstyle={{width: 100, fontWeight: \"bold\"}}\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-warning shadow-2 mt-3 mr-3\"\n\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\tsetStatusConfirm(true);\n\t\t\t\t\t\t\t\t\t\tsetvalidatorAction(entryStatus.RECHECK);\n\t\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\tRecheck\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\tstyle={{width: 100, fontWeight: \"bold\"}}\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-primary shadow-2 mt-3\"\n\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\tsetStatusConfirm(true);\n\t\t\t\t\t\t\t\t\t\tsetvalidatorAction(entryStatus.APPROVED);\n\t\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\tApprove\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Form>\n\t\t\t\t\t)}\n\t\t\t\t</Formik>\n\t\t\t</div>\n\t\t\t<Modal size=\"md\" show={showStatusConfirm} backdrop=\"static\" keyboard={true} backdropClassName=\"nested-modal\">\n\t\t\t\t<Modal.Header>\n\t\t\t\t\t<h5 className=\"card-title\">\n\t\t\t\t\t\t{validatorAction === entryStatus.APPROVED ? \"Approve\" : validatorAction === entryStatus.RECHECK ? \"Recheck\" : \"Reject\"} Entry\n\t\t\t\t\t</h5>\n\t\t\t\t</Modal.Header>\n\t\t\t\t<Modal.Body>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<span>Are you sure you want to {validatorAction === entryStatus.APPROVED ? \"Approve\" : validatorAction === entryStatus.RECHECK ? \"Recheck\" : \"Reject\"} the Entry?</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"mt-4\">\n\t\t\t\t\t\t<textarea ref={actionComment} className=\"form-control\" placeholder=\"Comment\"></textarea>\n\t\t\t\t\t</div>\n\t\t\t\t</Modal.Body>\n\t\t\t\t<Modal.Footer>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<button className=\"btn btn-outline-primary\" onClick={() => setStatusConfirm(false)}>\n\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName={`btn ${validatorAction === entryStatus.APPROVED ? \"btn-primary\" : validatorAction === entryStatus.RECHECK ? \"btn-warning\" : \"btn-danger\"}`}\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tsetStatusConfirm(false);\n\t\t\t\t\t\t\t\tentryAction();\n\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t{validatorAction === entryStatus.APPROVED ? \"Approve\" : validatorAction === entryStatus.RECHECK ? \"Recheck\" : \"Reject\"}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</Modal.Footer>\n\t\t\t</Modal>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default SalesForm;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/rejected-entries/forms/purchaseForm.js",["1045","1046","1047"],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/rejected-entries/forms/expenditureForm.js",["1048","1049"],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/rejected-entries/forms/salesForm.js",["1050"],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/checked-entries/forms/purchaseForm.js",["1051","1052","1053","1054","1055","1056"],"import React, { useState, useEffect } from \"react\";\nimport { Row, Col, Table } from \"react-bootstrap\";\nimport { Formik, Field, Form, ErrorMessage, FieldArray } from \"formik\";\nimport * as Yup from \"yup\";\nimport DatePicker from \"react-datepicker\";\nimport Select from \"react-select\";\n\nimport { callApi } from \"../../../../services/apiService\";\nimport { ApiConstants } from \"../../../../config/apiConstants\";\nimport { entryStatus } from \"../../../../enums/entryStatus\";\nimport { showNotification } from \"../../../../services/toasterService\";\n\nconst PurchaseForm = (props) => {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [invoiceDate, setinvoiceDate] = useState(null);\n  const [purchaseData, setPurchaseData] = useState(null);\n  const [groupsList, setGroupsList] = useState([]);\n  const [suppliersList, setSuppliersList] = useState([]);\n\n  const PurchaseFormSchema = Yup.object().shape({\n    supplier_id: Yup.mixed().required(\"Please select Supplier\"),\n    trn: Yup.string(),\n    invoice_number: Yup.string().required(\"Please enter Invoice number\"),\n    invoice_date: Yup.mixed().required(\"Please select Date\"),\n    invoice_details: Yup.array().of(\n      Yup.object().shape({\n        invoice_group_id: Yup.string().required(\"Please select Group\"),\n        invoice_sub_group_id: Yup.string().required(\"Please select Sub Group\"),\n        invoice_item_id: Yup.string().required(\"Please select Item\"),\n        unit_price: Yup.string().required(\"Please enter Unit Price\"),\n        quantity: Yup.string().required(\"Please enter Quantity\"),\n        amount: Yup.string().required(\"Please enter Amount\"),\n      })\n    ),\n    subtotal: Yup.string(),\n    discount: Yup.string(),\n    vatamount: Yup.string(),\n    totalamount: Yup.string(),\n  });\n\n  useEffect(() => {\n    invoicePurchaseGroups();\n    getSuppliers();\n  }, []);\n\n  useEffect(() => {\n    if (groupsList.length) {\n      getData();\n    }\n  }, [groupsList]);\n\n  const getData = () => {\n    props.onShowLoader(true);\n    let params = { entry_id: props.entry.id };\n    callApi(\"get\", ApiConstants.purchase.getData, params, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          setPurchaseData(response.payload);\n          setinvoiceDate(new Date(response.payload?.header?.invoice_date));\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const invoicePurchaseGroups = () => {\n    props.onShowLoader(true);\n    callApi(\"get\", ApiConstants.lookups.invoicepurchasegroups, null, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          let data = response.payload.map((i) => {\n            return { ...i, value: i.id, label: i.name };\n          });\n          setGroupsList(data);\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const getSuppliers = () => {\n    props.onShowLoader(true);\n    callApi(\"get\", ApiConstants.lookups.getSuppliers, null)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          let suppliers = response.payload.map((i) => {\n            return { ...i, value: i.id, label: i.name };\n          });\n          setSuppliersList(suppliers);\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const getSubGroups = (groupId) => {\n    let selectedGroup = groupsList.find((i) => i.id === groupId);\n    let subGroups = selectedGroup\n      ? selectedGroup.invoice_sub_groups.map((i) => {\n          return { ...i, value: i.id, label: i.name };\n        })\n      : [];\n    return subGroups;\n  };\n\n  const getSelectedSubGroup = (groupId, selectedId) => {\n    let selectedGroup = groupsList.find((i) => i.id === groupId);\n    let subGroups = selectedGroup\n      ? selectedGroup.invoice_sub_groups.map((i) => {\n          return { ...i, value: i.id, label: i.name };\n        })\n      : [];\n\n    let selectedSubGroup = null;\n    if (subGroups && selectedId) {\n      selectedSubGroup = subGroups.find((i) => i.id === selectedId);\n    }\n    return selectedSubGroup;\n  };\n\n  const getSubItems = (groupId, subgroupId) => {\n    let selectedGroup = groupsList.find((i) => i.id === groupId);\n    let subGroups = selectedGroup ? selectedGroup.invoice_sub_groups : [];\n    let selectedSubGroup = subGroups.find((i) => i.id === subgroupId);\n    let subItems = selectedSubGroup\n      ? selectedSubGroup.invoice_items.map((i) => {\n          return { ...i, value: i.id, label: i.name };\n        })\n      : [];\n    return subItems;\n  };\n\n  const getSelectedSubItem = (groupId, subgroupId, selectedId) => {\n    let selectedGroup = groupsList.find((i) => i.id === groupId);\n    let subGroups = selectedGroup ? selectedGroup.invoice_sub_groups : [];\n    let selectedSubGroup = subGroups.find((i) => i.id === subgroupId);\n    let subItems = selectedSubGroup\n      ? selectedSubGroup.invoice_items.map((i) => {\n          return { ...i, value: i.id, label: i.name };\n        })\n      : [];\n\n    let selectedSubItem = null;\n    if (subItems && selectedId) {\n      selectedSubItem = subItems.find((i) => i.id === selectedId);\n    }\n    return selectedSubItem;\n  };\n\n  const calculateTotal = (\n    values,\n    setFieldValue,\n    index,\n    fieldValue,\n    fieldType\n  ) => {\n    let amount = 0;\n    if (fieldType === \"unit_price\")\n      amount = values.invoice_details[index].quantity * fieldValue;\n    if (fieldType === \"quantity\")\n      amount = values.invoice_details[index].unit_price * fieldValue;\n\n    setFieldValue(`invoice_details.${index}.amount`, amount);\n    values.invoice_details[index].amount = amount;\n\n    let subtotal = values.invoice_details.reduce((sum, item) => {\n      return sum + item.amount;\n    }, 0);\n    setFieldValue(\"subtotal\", subtotal);\n    values.subtotal = subtotal;\n\n    let discountAmt = values.discount ? values.discount : 0;\n    let vatamount =\n      ((values.subtotal - discountAmt) * props.entry.vat_percentage) / 100;\n    setFieldValue(\"vatamount\", vatamount);\n\n    let totalamount = values.subtotal - discountAmt + vatamount;\n    setFieldValue(\"totalamount\", totalamount);\n  };\n\n  return (\n    <React.Fragment>\n      <div>\n        <Formik\n          enableReinitialize={true}\n          initialValues={{\n            supplier_id: purchaseData?.header?.supplier_id\n              ? purchaseData.header.supplier_id\n              : \"\",\n            trn: purchaseData?.header?.supplier_trn\n              ? purchaseData.header.supplier_trn\n              : \"\",\n            invoice_number: purchaseData?.header?.invoice_number\n              ? purchaseData.header.invoice_number\n              : \"\",\n            invoice_date: \"\",\n            invoice_details: purchaseData?.details\n              ? purchaseData.details.map((i) => {\n                  return {\n                    invoice_group_id: i.invoice_group_id,\n                    invoice_sub_group_id: i.invoice_sub_group_id,\n                    invoice_item_id: i.invoice_item_id,\n                    unit_price: i.price,\n                    quantity: i.qty,\n                    amount: i.amount,\n                  };\n                })\n              : [],\n            subtotal: purchaseData?.header?.sub_total\n              ? purchaseData.header.sub_total\n              : \"\",\n            discount: purchaseData?.header?.discount\n              ? purchaseData.header.discount\n              : \"0\",\n            vatamount: purchaseData?.header?.vat_amount\n              ? purchaseData.header.vat_amount\n              : \"\",\n            totalamount: purchaseData?.header?.total_amount\n              ? purchaseData.header.total_amount\n              : \"\",\n          }}\n          validationSchema={PurchaseFormSchema}>\n          {({ errors, handleChange, setFieldValue, values }) => (\n            <Form>\n              <Row>\n                <Col xs={6}>\n                  <div className=\"input-group mb-3\">\n                    <Select\n                      className={`w-100 form-control-select ${\n                        errors.supplier_id && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      classNamePrefix=\"select\"\n                      options={suppliersList}\n                      placeholder=\"Supplier\"\n                      isSearchable={false}\n                      isDisabled\n                      value={suppliersList.find(\n                        (i) => i.value === values?.supplier_id\n                      )}\n                    />\n                    <ErrorMessage name=\"supplier_id\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n                <Col xs={6}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      disabled\n                      className={`form-control ${\n                        errors.trn && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholder=\"TRN\"\n                      name=\"trn\"\n                    />\n                    <ErrorMessage name=\"trn\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n                <Col xs={6}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      disabled\n                      className={`form-control ${\n                        errors.invoice_number && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholder=\"Invoice Number\"\n                      name=\"invoice_number\"\n                    />\n                    <ErrorMessage name=\"invoice_number\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n                <Col xs={6}>\n                  <div className=\"date-picker-container mb-3\">\n                    <DatePicker\n                      className={`form-control ${\n                        errors.invoice_date && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholderText=\"Date\"\n                      disabled\n                      dateFormat=\"dd/MM/yyyy\"\n                      selected={invoiceDate}\n                      onChange={(value) => {\n                        setinvoiceDate(value);\n                        let event = {\n                          target: {\n                            name: \"invoice_date\",\n                            value: value,\n                          },\n                        };\n                        handleChange(event);\n                      }}\n                    />\n                    <i className=\"feather icon-calendar\"></i>\n                    <ErrorMessage name=\"invoice_date\">\n                      {(msg) => (\n                        <div className=\"invalid-feedback d-block\">{msg}</div>\n                      )}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col lg={12}>\n                  <Table className=\"purchase-grid\">\n                    <thead>\n                      <tr>\n                        <th>#</th>\n                        <th width=\"120\">Group</th>\n                        <th width=\"120\">Sub Group</th>\n                        <th width=\"120\">Item Name</th>\n                        <th>Unit Price</th>\n                        <th>Quantity</th>\n                        <th>Amount</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <FieldArray\n                        name=\"invoice_details\"\n                        render={(arrayHelpers) => (\n                          <React.Fragment>\n                            {values.invoice_details.map((item, index) => (\n                              <tr key={index}>\n                                <td scope=\"row\">{index + 1}</td>\n                                <td>\n                                  <Select\n                                    className=\"w-100 form-control-select\"\n                                    classNamePrefix=\"select\"\n                                    options={groupsList}\n                                    value={groupsList.find(\n                                      (i) =>\n                                        i.value ===\n                                        values?.invoice_details[index]\n                                          .invoice_group_id\n                                    )}\n                                    placeholder=\"Select\"\n                                    isSearchable={false}\n                                    isDisabled\n                                  />\n                                </td>\n                                <td>\n                                  <Select\n                                    className=\"w-100 form-control-select\"\n                                    classNamePrefix=\"select\"\n                                    options={getSubGroups(\n                                      values.invoice_details[index]\n                                        .invoice_group_id\n                                    )}\n                                    value={getSelectedSubGroup(\n                                      values.invoice_details[index]\n                                        .invoice_group_id,\n                                      values.invoice_details[index]\n                                        .invoice_sub_group_id\n                                    )}\n                                    placeholder=\"Select\"\n                                    isSearchable={false}\n                                    isDisabled\n                                  />\n                                </td>\n                                <td>\n                                  <Select\n                                    className=\"w-100 form-control-select\"\n                                    classNamePrefix=\"select\"\n                                    options={getSubItems(\n                                      values.invoice_details[index]\n                                        .invoice_group_id,\n                                      values.invoice_details[index]\n                                        .invoice_sub_group_id\n                                    )}\n                                    value={getSelectedSubItem(\n                                      values.invoice_details[index]\n                                        .invoice_group_id,\n                                      values.invoice_details[index]\n                                        .invoice_sub_group_id,\n                                      values.invoice_details[index]\n                                        .invoice_item_id\n                                    )}\n                                    placeholder=\"Select\"\n                                    isSearchable={false}\n                                    isDisabled\n                                  />\n                                </td>\n                                <td>\n                                  <Field\n                                    type=\"text\"\n                                    className=\"grid-input\"\n                                    name={`invoice_details.${index}.unit_price`}\n                                    value={\n                                      values.invoice_details[index].unit_price\n                                    }\n                                    disabled\n                                  />\n                                </td>\n                                <td>\n                                  <Field\n                                    type=\"text\"\n                                    className=\"grid-input\"\n                                    name={`invoice_details.${index}.quantity`}\n                                    value={\n                                      values.invoice_details[index].quantity\n                                    }\n                                    disabled\n                                  />\n                                </td>\n                                <td>\n                                  <Field\n                                    type=\"text\"\n                                    className=\"grid-input\"\n                                    disabled\n                                    name={`invoice_details.${index}.amount`}\n                                  />\n                                </td>\n                              </tr>\n                            ))}\n                          </React.Fragment>\n                        )}\n                      />\n                      <tr>\n                        <td colSpan=\"6\">\n                          <div className=\"text-right\">\n                            <label className=\"mr-3\">Sub Total</label>\n                          </div>\n                        </td>\n                        <td>\n                          <Field\n                            type=\"text\"\n                            className=\"grid-input\"\n                            name=\"subtotal\"\n                            disabled\n                          />\n                        </td>\n                      </tr>\n                      <tr>\n                        <td colSpan=\"6\">\n                          <div className=\"text-right\">\n                            <label className=\"mr-3\">Discount Rounded</label>\n                          </div>\n                        </td>\n                        <td>\n                          <Field\n                            type=\"text\"\n                            className=\"grid-input\"\n                            name=\"discount\"\n                            disabled\n                            value={values.discount}\n                            onChange={(e) => {\n                              handleChange(e);\n                              let discountAmt = e.target.value\n                                ? e.target.value\n                                : 0;\n                              let vatamount =\n                                ((values.subtotal - discountAmt) *\n                                  props.entry.vat_percentage) /\n                                100;\n                              setFieldValue(\"vatamount\", vatamount);\n\n                              let totalamount =\n                                values.subtotal - discountAmt + vatamount;\n                              setFieldValue(\"totalamount\", totalamount);\n                            }}\n                          />\n                        </td>\n                      </tr>\n                      <tr>\n                        <td colSpan=\"6\">\n                          <div className=\"text-right\">\n                            <label className=\"mr-3\">VAT Amount</label>\n                          </div>\n                        </td>\n                        <td>\n                          <Field\n                            type=\"text\"\n                            disabled\n                            className=\"grid-input\"\n                            name=\"vatamount\"\n                          />\n                        </td>\n                      </tr>\n                      <tr>\n                        <td colSpan=\"6\">\n                          <div className=\"text-right\">\n                            <label className=\"mr-3\">Total</label>\n                          </div>\n                        </td>\n                        <td>\n                          <Field\n                            type=\"text\"\n                            disabled\n                            className=\"grid-input\"\n                            name=\"totalamount\"\n                          />\n                        </td>\n                      </tr>\n                    </tbody>\n                  </Table>\n                </Col>\n              </Row>\n            </Form>\n          )}\n        </Formik>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default PurchaseForm;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/checked-entries/forms/expenditureForm.js",["1057","1058","1059","1060"],"import React, { useState, useEffect } from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport DatePicker from \"react-datepicker\";\nimport Select from \"react-select\";\n\nimport { callApi } from \"../../../../services/apiService\";\nimport { ApiConstants } from \"../../../../config/apiConstants\";\nimport { entryStatus } from \"../../../../enums/entryStatus\";\nimport { showNotification } from \"../../../../services/toasterService\";\n\nconst ExpenditureForm = (props) => {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [invoiceDate, setinvoiceDate] = useState(null);\n  const [expenditureData, setexpenditureData] = useState(null);\n  const [groupsList, setGroupsList] = useState([]);\n  const [subGroupsList, setSubGroupsList] = useState([]);\n  const [itemsList, setItemsList] = useState([]);\n\n  const ExpenditureFormSchema = Yup.object().shape({\n    invoice_date: Yup.mixed().required(\"Please select Date\"),\n    amount: Yup.string()\n      .required(\"Please enter Amount\")\n      .matches(/^[0-9].*$/, \"Please enter a valid Amount\"),\n    comments: Yup.string().required(\"Please enter Comment\"),\n    invoice_number: Yup.string().required(\"Please enter Invoice number\"),\n    invoice_group_id: Yup.string().required(\"Please enter Group\"),\n    invoice_sub_group_id: Yup.string().required(\"Please enter Sub Group\"),\n    invoice_item_id: Yup.string().required(\"Please select Item\"),\n  });\n\n  useEffect(() => {\n    invoiceExpGroups();\n  }, []);\n\n  useEffect(() => {\n    if (groupsList.length) getData();\n  }, [groupsList]);\n\n  const getData = () => {\n    props.onShowLoader(true);\n    let params = { entry_id: props.entry.id };\n    callApi(\"get\", ApiConstants.expenditure.getData, params, true)\n      .then((response) => {\n        console.log(response.payload);\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          setexpenditureData(response.payload);\n          setinvoiceDate(new Date(response.payload.invoice_date));\n          let group = groupsList.find(\n            (i) => i.id === response.payload.invoice_group_id\n          );\n          onChangeGroups(group);\n          let subgroup = group.invoice_sub_groups.find(\n            (i) => i.id === response.payload.invoice_sub_group_id\n          );\n          onChangeSubGroups(subgroup);\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const invoiceExpGroups = () => {\n    props.onShowLoader(true);\n    callApi(\"get\", ApiConstants.lookups.invoiceexpgroups, null)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          let data = response.payload.map((i) => {\n            return { ...i, value: i.id, label: i.name };\n          });\n          setGroupsList(data);\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const onChangeGroups = (value) => {\n    let subGroups = value?.invoice_sub_groups?.map((i) => {\n      return { ...i, value: i.id, label: i.name };\n    });\n    setSubGroupsList(subGroups);\n  };\n\n  const onChangeSubGroups = (value) => {\n    let items = value?.invoice_items?.map((i) => {\n      return { ...i, value: i.id, label: i.name };\n    });\n    setItemsList(items);\n  };\n\n  return (\n    <React.Fragment>\n      <div>\n        <Formik\n          enableReinitialize={true}\n          initialValues={{\n            invoice_date: expenditureData?.invoice_date\n              ? new Date(expenditureData?.invoice_date)\n              : \"\",\n            amount: expenditureData?.amount ? expenditureData?.amount : \"\",\n            vat_amount: expenditureData?.vat_amount ? expenditureData?.vat_amount : \"\",\n            comments: expenditureData?.comments\n              ? expenditureData?.comments\n              : \"\",\n            invoice_number: expenditureData?.invoice_number\n              ? expenditureData?.invoice_number\n              : \"\",\n            invoice_group_id: expenditureData?.invoice_group_id\n              ? expenditureData?.invoice_group_id\n              : \"\",\n            invoice_sub_group_id: expenditureData?.invoice_sub_group_id\n              ? expenditureData?.invoice_sub_group_id\n              : \"\",\n            invoice_item_id: expenditureData?.invoice_item_id\n              ? expenditureData?.invoice_item_id\n              : \"\",\n          }}\n          validationSchema={ExpenditureFormSchema}>\n          {({ errors, handleChange, values }) => (\n            <Form>\n              <Row>\n                <Col xs={12}>\n                  <div className=\"date-picker-container mb-3\">\n                    <DatePicker\n                      className={`form-control ${errors.invoice_date && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                      placeholderText=\"Date\"\n                      dateFormat=\"dd/MM/yyyy\"\n                      disabled\n                      selected={invoiceDate}\n                      onChange={(value) => {\n                        setinvoiceDate(value);\n                        let event = {\n                          target: {\n                            name: \"invoice_date\",\n                            value: value,\n                          },\n                        };\n                        handleChange(event);\n                      }}\n                    />\n                    <i className=\"feather icon-calendar\"></i>\n                    <ErrorMessage name=\"invoice_date\">\n                      {(msg) => (\n                        <div className=\"invalid-feedback d-block\">{msg}</div>\n                      )}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      disabled\n                      className={`form-control ${errors.amount && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                      placeholder=\"Amount\"\n                      name=\"amount\"\n                    />\n                    <ErrorMessage name=\"amount\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      disabled\n                      className={`form-control ${errors.vat_amount && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                      placeholder=\"VAT Amount\"\n                      name=\"vat_amount\"\n                    />\n                    <ErrorMessage name=\"vat_amount\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      disabled\n                      className={`form-control ${errors.comments && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                      placeholder=\"Comments\"\n                      name=\"comments\"\n                    />\n                    <ErrorMessage name=\"comments\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      disabled\n                      className={`form-control ${errors.invoice_number && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                      placeholder=\"Invoice Number\"\n                      name=\"invoice_number\"\n                    />\n                    <ErrorMessage name=\"invoice_number\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Select\n                      className={`w-100 form-control-select ${errors.invoice_group_id && isSubmitted\n                        ? \"is-invalid\"\n                        : \"\"\n                        }`}\n                      classNamePrefix=\"select\"\n                      options={groupsList}\n                      placeholder=\"Group\"\n                      isDisabled\n                      isSearchable={false}\n                      value={groupsList.find(\n                        (i) => i.value === values?.invoice_group_id\n                      )}\n                    />\n                    <ErrorMessage name=\"invoice_group_id\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Select\n                      className={`w-100 form-control-select ${errors.invoice_sub_group_id && isSubmitted\n                        ? \"is-invalid\"\n                        : \"\"\n                        }`}\n                      classNamePrefix=\"select\"\n                      options={subGroupsList}\n                      placeholder=\"Sub Group\"\n                      isSearchable={false}\n                      isDisabled\n                      value={subGroupsList.find(\n                        (i) => i.value === values?.invoice_sub_group_id\n                      )}\n                    />\n                    <ErrorMessage name=\"invoice_sub_group_id\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Select\n                      className={`w-100 form-control-select ${errors.invoice_item_id && isSubmitted\n                        ? \"is-invalid\"\n                        : \"\"\n                        }`}\n                      classNamePrefix=\"select\"\n                      options={itemsList}\n                      placeholder=\"Items\"\n                      isDisabled\n                      isSearchable={false}\n                      value={itemsList.find(\n                        (i) => i.value === values?.invoice_item_id\n                      )}\n                    />\n                    <ErrorMessage name=\"invoice_item_id\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n              </Row>\n            </Form>\n          )}\n        </Formik>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default ExpenditureForm;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/checked-entries/forms/salesForm.js",["1061","1062"],"import React, { useState, useEffect } from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport DatePicker from \"react-datepicker\";\n\nimport { callApi } from \"../../../../services/apiService\";\nimport { ApiConstants } from \"../../../../config/apiConstants\";\nimport { showNotification } from \"../../../../services/toasterService\";\n\nconst SalesForm = (props) => {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [invoiceDate, setinvoiceDate] = useState(null);\n  const [salesData, setsalesData] = useState(null);\n\n  const SalesFormSchema = Yup.object().shape({\n    invoice_date: Yup.mixed().required(\"Please select Date\"),\n    amount: Yup.string()\n      .required(\"Please enter Amount\")\n      .matches(/^[0-9]*$/, \"Please enter a valid Amount\"),\n    comments: Yup.string().required(\"Please enter Comment\"),\n    invoice_number: Yup.string().required(\"Please enter Invoice number\"),\n    amount_exclude_vat: Yup.string(),\n    vat_amount: Yup.string(),\n  });\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = () => {\n    props.onShowLoader(true);\n    let params = { entry_id: props.entry.id };\n    callApi(\"get\", ApiConstants.sales.getData, params, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          setsalesData(response.payload);\n          setinvoiceDate(new Date(response.payload.invoice_date));\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  return (\n    <React.Fragment>\n      <div>\n        <Formik\n          enableReinitialize={true}\n          initialValues={{\n            invoice_date: \"\",\n            amount: salesData?.amount ? salesData?.amount : \"\",\n            comments: salesData?.comments ? salesData?.comments : \"\",\n            invoice_number: salesData?.invoice_number\n              ? salesData?.invoice_number\n              : \"\",\n            amount_exclude_vat: salesData?.amount_exclude_vat\n              ? salesData?.amount_exclude_vat\n              : \"\",\n            vat_amount: salesData?.vat_amount ? salesData?.vat_amount : \"\",\n          }}\n          validationSchema={SalesFormSchema}>\n          {({ errors }) => (\n            <Form>\n              <Row>\n                <Col xs={12}>\n                  <div className=\"date-picker-container mb-3\">\n                    <DatePicker\n                      className={`form-control ${\n                        errors.invoice_date && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholderText=\"Date\"\n                      disabled\n                      dateFormat=\"dd/MM/yyyy\"\n                      selected={invoiceDate}\n                    />\n                    <i className=\"feather icon-calendar\"></i>\n                    <ErrorMessage name=\"invoice_date\">\n                      {(msg) => (\n                        <div className=\"invalid-feedback d-block\">{msg}</div>\n                      )}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      disabled\n                      className={`form-control ${\n                        errors.amount && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholder=\"Amount\"\n                      name=\"amount\"\n                    />\n                    <ErrorMessage name=\"amount\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      disabled\n                      className={`form-control ${\n                        errors.comments && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholder=\"Comments\"\n                      name=\"comments\"\n                    />\n                    <ErrorMessage name=\"comments\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      disabled\n                      className={`form-control ${\n                        errors.invoice_number && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholder=\"Invoice Number\"\n                      name=\"invoice_number\"\n                    />\n                    <ErrorMessage name=\"invoice_number\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      className={`form-control ${\n                        errors.amount_exclude_vat && isSubmitted\n                          ? \"is-invalid\"\n                          : \"\"\n                      }`}\n                      disabled\n                      placeholder=\"Amount Exclude Vat\"\n                      name=\"amount_exclude_vat\"\n                    />\n                    <ErrorMessage name=\"amount_exclude_vat\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      className={`form-control ${\n                        errors.vat_amount && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      disabled\n                      placeholder=\"Vat Amount\"\n                      name=\"vat_amount\"\n                    />\n                    <ErrorMessage name=\"vat_amount\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n              </Row>\n            </Form>\n          )}\n        </Formik>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default SalesForm;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/validator-checked-entries/widget.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/validator-pending-entries/widget.js",["1063","1064","1065","1066","1067"],"import React, {useState, useEffect} from \"react\";\nimport {Accordion, Card, ListGroup, Row, Col, Modal} from \"react-bootstrap\";\nimport {Grid, GridColumn as Column} from \"@progress/kendo-react-grid\";\nimport {process} from \"@progress/kendo-data-query\";\nimport moment from \"moment\";\nimport DatePicker from \"react-datepicker\";\nimport Select from \"react-select\";\n\nimport {callApi} from \"../../../services/apiService\";\nimport {ApiConstants} from \"../../../config/apiConstants\";\nimport {showNotification} from \"../../../services/toasterService\";\nimport Spinner from \"../../../components/Spinner\";\nimport Preview from \"../../../components/Preview\";\nimport {entryTypeList} from \"../../../enums/entryTypeList\";\nimport {entryTypes} from \"../../../enums/entryTypes\";\nimport FileIcon from \"../../../components/FileIcon\";\nimport SalesForm from \"./forms/salesForm\";\nimport ExpenditureForm from \"./forms/expenditureForm\";\nimport PurchaseForm from \"./forms/purchaseForm\";\n\nconst PendingEntriesWidget = (props) => {\n\tconst [showLoader, setShowLoader] = useState(false);\n\tconst [entriesList, setEntriesList] = useState([]);\n\t// const [startDate, setStartDate] = useState(null);\n\t// const [endDate, setEndDate] = useState(null);\n\tconst [showPreview, setshowPreview] = useState(false);\n\tconst [selectedEntry, setselectedEntry] = useState(null);\n\tconst [selectedEntryType, setselectedEntryType] = useState(\"\");\n\tconst [showDeleteConfirm, setDeleteConfirm] = React.useState(false);\n\tconst [windowWidth, setWindowWidth] = useState(window.innerWidth);\n\n\tconst [gridState, setgridState] = useState({\n\t\tskip: 0,\n\t\ttake: 10,\n\t});\n\tconst [gridData, setgridData] = useState(null);\n\n\t// const pagerSettings = {\n\t//   buttonCount: 5,\n\t//   info: true,\n\t//   type: \"numeric\",\n\t//   pageSizes: true,\n\t//   previousNext: true,\n\t// };\n\n\tuseEffect(() => {\n\t\tgetData();\n\t}, []);\n\n\tuseEffect(() => {\n\t\tsetWindowWidth(window.innerWidth > 992);\n\t\tloadGridData();\n\t}, [entriesList, gridState]);\n\n\tconst loadGridData = () => {\n\t\tlet updatedData = process(entriesList, gridState);\n\t\tsetgridData(updatedData);\n\t};\n\n\t// const pageChange = (event) => {\n\t//   let updatedState = {\n\t//     ...gridState,\n\t//     skip: event.page.skip,\n\t//     take: event.page.take,\n\t//   };\n\t//   setgridState({ ...updatedState });\n\t// };\n\n\tconst getData = () => {\n\t\tsetShowLoader(true);\n\t\tcallApi(\"get\", ApiConstants.admin.adminvalidatorpendinglist, {row_count: props.row_count}, true)\n\t\t\t.then((response) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\t// console.log(response.payload);\n\t\t\t\t\tsetEntriesList(response.payload);\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\tconst viewEntry = (entry) => {\n\t\tsetselectedEntry(entry);\n\t\tsetselectedEntryType(entry.entry_type);\n\t\tsetshowPreview(true);\n\t};\n\n\tconst closeEntryModal = () => {\n\t\tsetshowPreview(false);\n\t\tsetselectedEntryType(\"\");\n\t};\n\n\tconst onEntrySubmit = () => {\n\t\tcloseEntryModal();\n\t\tgetData();\n\t};\n\n\tconst deleteEntry = (entry) => {\n\t\tsetselectedEntry(entry);\n\t\tsetDeleteConfirm(true);\n\t};\n\n\tconst deleteData = () => {\n\t\tsetShowLoader(true);\n\t\tcallApi(\"post\", ApiConstants.entry.validatordeleteentry, {entry_id: selectedEntry.id}, true)\n\t\t\t.then((response) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tif (response && response.status_code === 200) {\n\t\t\t\t\tshowNotification(\"Success\", response.message, \"success\");\n\t\t\t\t\tgetData();\n\t\t\t\t} else {\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t});\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t{showLoader && <Spinner />}\n\t\t\t{windowWidth && (\n\t\t\t\t<Row>\n\t\t\t\t\t<Col xl={12}>\n\t\t\t\t\t\t<Grid data={gridData} style={{height: 270}}>\n\t\t\t\t\t\t\t<Column field=\"id\" title=\"#\" width=\"40px\" cell={(props) => <td>{props.dataIndex + 1}</td>} />\n\t\t\t\t\t\t\t<Column field=\"name\" title=\"Client Name\" width=\"150px\" />\n\t\t\t\t\t\t\t<Column field=\"validator_name\" title=\"Validator Name\" width=\"150px\" />\n\t\t\t\t\t\t\t<Column field=\"checker_name\" title=\"Checker Name\" width=\"150px\" />\n\t\t\t\t\t\t\t{/* <Column\n              field=\"created_at\"\n              width=\"130\"\n              title=\"Date\"\n              cell={(props) => (\n                <td>\n                  <div>\n                    {moment(props.dataItem.created_at).format(\"DD-MMM-YYYY\")}\n                  </div>\n                </td>\n              )}\n            /> */}\n\t\t\t\t\t\t\t<Column\n\t\t\t\t\t\t\t\tfield=\"invoice_date\"\n\t\t\t\t\t\t\t\tfilterable={false}\n\t\t\t\t\t\t\t\twidth=\"130\"\n\t\t\t\t\t\t\t\ttitle=\"Invoice Date\"\n\t\t\t\t\t\t\t\tcell={(props) => (\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<div>{moment(props.dataItem.invoice_date).format(\"DD-MMM-YYYY\")}</div>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{/* <Column\n                field=\"file_path\"\n                title=\"Document\"\n                width=\"95\"\n                cell={(props) => (\n                  <td>\n                    <div className=\"text-center\">\n                      <FileIcon className=\"mr-2\" source={props.dataItem.file_path} style={{ width: 25 }} />\n                    </div>\n                  </td>\n                )}\n              /> */}\n\t\t\t\t\t\t\t<Column\n\t\t\t\t\t\t\t\tfield=\"View\"\n\t\t\t\t\t\t\t\ttitle=\"View\"\n\t\t\t\t\t\t\t\twidth=\"80\"\n\t\t\t\t\t\t\t\tcell={(props) => (\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<div className=\"action-panel\">\n\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn-icon btn btn-outline-primary\" title=\"View\" onClick={() => viewEntry(props.dataItem)}>\n\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-eye\"></i>\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Column\n\t\t\t\t\t\t\t\tfield=\"Actions\"\n\t\t\t\t\t\t\t\ttitle=\"Actions\"\n\t\t\t\t\t\t\t\tfilterable={false}\n\t\t\t\t\t\t\t\twidth=\"80\"\n\t\t\t\t\t\t\t\tcell={(props) => (\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t{props.dataItem.requested_for_delete > 0 && (\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"action-panel\">\n\t\t\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"btn-icon btn btn-outline-danger\"\n\t\t\t\t\t\t\t\t\t\t\t\t\ttitle=\"Delete\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeleteEntry(props.dataItem);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-trash\"></i>\n\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t)}\n\n\t\t\t<div>\n\t\t\t\t{!windowWidth && (\n\t\t\t\t\t<Accordion defaultActiveKey=\"0\">\n\t\t\t\t\t\t{entriesList &&\n\t\t\t\t\t\t\tentriesList.length > 0 &&\n\t\t\t\t\t\t\tentriesList.map((row) => (\n\t\t\t\t\t\t\t\t<Card key={row.id}>\n\t\t\t\t\t\t\t\t\t<Accordion.Toggle style={{backgroundColor: \"#7599b1\"}} as={Card.Header} eventKey={row.id}>\n\t\t\t\t\t\t\t\t\t\t{row.name}\n\t\t\t\t\t\t\t\t\t</Accordion.Toggle>\n\t\t\t\t\t\t\t\t\t<Accordion.Collapse eventKey={row.id}>\n\t\t\t\t\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"action-panel\" style={{dispaly: \"flex\", justifyContent: \"flex-end\", marginBottom: 16}}>\n\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn btn-outline-primary\" title=\"View\" onClick={() => viewEntry(row)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\tView <i className=\"feather icon-eye\"></i>\n\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<ListGroup>\n\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>Validator:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span> {row.validator_name}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>Checker:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span> {row.checker_name}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>Entry Date:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span> {moment(row.invoice_date).format(\"DD-MMM-YYYY\")}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t</ListGroup>\n\t\t\t\t\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t\t\t\t</Accordion.Collapse>\n\t\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t</Accordion>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t<Modal size={selectedEntryType === entryTypes.PURCHASE ? \"xl\" : \"lg\"} show={showPreview} backdrop=\"static\" keyboard={true}>\n\t\t\t\t<Modal.Body className=\"p-0\">\n\t\t\t\t\t<button type=\"button\" className=\"btn-icon btn close-btn\" onClick={closeEntryModal}>\n\t\t\t\t\t\t<i className=\"feather icon-x-circle\"></i>\n\t\t\t\t\t</button>\n\t\t\t\t\t<div className=\"px-4 py-5\">\n\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t<Col className={selectedEntryType === entryTypes.PURCHASE ? \"col-lg-4\" : \"col-lg-6\"}>\n\t\t\t\t\t\t\t\t<Preview source={selectedEntry?.file_path} containerStyles={{backgroundColor: \"#f5f5f5\", padding: 10}} zoom={true} />\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t<Col className={selectedEntryType === entryTypes.PURCHASE ? \"col-lg-8\" : \"col-lg-6\"}>\n\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t<Col className={selectedEntryType === entryTypes.PURCHASE ? \"col-lg-6\" : \"col-lg-12\"}>\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"w-100 form-control-select\"\n\t\t\t\t\t\t\t\t\t\t\t\tclassNamePrefix=\"select\"\n\t\t\t\t\t\t\t\t\t\t\t\tisDisabled\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={entryTypeList.find((i) => i.value === selectedEntry?.entry_type)}\n\t\t\t\t\t\t\t\t\t\t\t\toptions={entryTypeList}\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Entry type\"\n\t\t\t\t\t\t\t\t\t\t\t\tisSearchable={false}\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(data) => setselectedEntryType(data.value)}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t<Col lg={12}>\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group\">\n\t\t\t\t\t\t\t\t\t\t\t{selectedEntryType === entryTypes.SALE && <SalesForm entry={selectedEntry} onSuccess={onEntrySubmit} onShowLoader={setShowLoader} />}\n\t\t\t\t\t\t\t\t\t\t\t{selectedEntryType === entryTypes.EXPENDITURE && <ExpenditureForm entry={selectedEntry} onSuccess={onEntrySubmit} onShowLoader={setShowLoader} />}\n\t\t\t\t\t\t\t\t\t\t\t{selectedEntryType === entryTypes.PURCHASE && <PurchaseForm entry={selectedEntry} onSuccess={onEntrySubmit} onShowLoader={setShowLoader} />}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</div>\n\t\t\t\t</Modal.Body>\n\t\t\t</Modal>\n\t\t\t<Modal size=\"md\" show={showDeleteConfirm} backdrop=\"static\" keyboard={true}>\n\t\t\t\t<Modal.Header>\n\t\t\t\t\t<h5 className=\"card-title\">Confirm Delete</h5>\n\t\t\t\t</Modal.Header>\n\t\t\t\t<Modal.Body>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<span>Are you sure that to delete this entry?</span>\n\t\t\t\t\t</div>\n\t\t\t\t</Modal.Body>\n\t\t\t\t<Modal.Footer>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<button className=\"btn btn-outline-primary\" onClick={() => setDeleteConfirm(false)}>\n\t\t\t\t\t\t\tNo\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn btn-primary\"\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tsetDeleteConfirm(false);\n\t\t\t\t\t\t\t\tdeleteData();\n\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\tYes\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</Modal.Footer>\n\t\t\t</Modal>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default PendingEntriesWidget;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/checker-pending-entries/widget.js",["1068","1069","1070"],"import React, { useState, useEffect } from \"react\";\nimport { Accordion, Card, ListGroup, Row, Col, Modal, OverlayTrigger, Popover } from \"react-bootstrap\";\nimport { Grid, GridColumn as Column } from \"@progress/kendo-react-grid\";\nimport moment from \"moment\";\nimport Select from \"react-select\";\n\nimport { callApi } from \"../../../services/apiService\";\nimport { ApiConstants } from \"../../../config/apiConstants\";\nimport Spinner from \"../../../components/Spinner\";\nimport Preview from \"../../../components/Preview\";\nimport { entryTypeList } from \"../../../enums/entryTypeList\";\nimport { entryTypes } from \"../../../enums/entryTypes\";\nimport { entryStatus } from \"../../../enums/entryStatus\";\nimport FileIcon from \"../../../components/FileIcon\";\nimport { showNotification } from \"../../../services/toasterService\";\nimport SalesForm from \"./forms/salesForm\";\nimport ExpenditureForm from \"./forms/expenditureForm\";\nimport PurchaseForm from \"./forms/purchaseForm\";\n\nconst PendingEntriesWidget = (props) => {\n  const [showLoader, setShowLoader] = useState(false);\n  const [entriesList, setEntriesList] = useState([]);\n  const [showPreview, setshowPreview] = useState(false);\n  const [selectedEntry, setselectedEntry] = useState(null);\n  const [selectedEntryType, setselectedEntryType] = useState(\"\");\n\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth > 992);\n\n  React.useEffect(() => {\n    getData();\n    setWindowWidth(window.innerWidth > 992);\n  }, []);\n\n  const getData = () => {\n    setShowLoader(true);\n    callApi(\"get\", ApiConstants.admin.admincheckerpendinglist, { row_count: props.row_count }, true)\n      .then((response) => {\n        setShowLoader(false);\n        if (response && response.status_code === 200) {\n          let temp = response.payload;\n          setEntriesList(temp);\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        setShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const viewEntry = (entry) => {\n    setselectedEntry(entry);\n    if (entry?.entry_status_id === entryStatus.RECHECK) {\n      setselectedEntryType(entry.entry_type);\n    }\n    setshowPreview(true);\n  };\n\n  const closeEntryModal = () => {\n    setshowPreview(false);\n    setselectedEntryType(\"\");\n  };\n\n  const onEntrySubmit = () => {\n    closeEntryModal();\n    getData();\n  };\n\n  return (\n    <React.Fragment>\n      {showLoader && <Spinner />}\n      {windowWidth && (\n        <Row>\n          <Col xl={12}>\n            <Grid data={entriesList} style={{ height: 270 }}>\n              <Column field=\"id\" title=\"#\" width=\"40px\" cell={(props) => <td>{props.dataIndex + 1}</td>} />\n              <Column field=\"name\" title=\"Client Name\" width=\"150px\" />\n              <Column field=\"checker_name\" title=\"Checker Name\" width=\"150px\" />\n              <Column\n                field=\"created_at\"\n                width=\"130\"\n                title=\"Entry Date\"\n                cell={(props) => (\n                  <td>\n                    <div>{moment(props.dataItem.created_at).format(\"DD-MMM-YYYY\")}</div>\n                  </td>\n                )}\n              />\n              {/* <Column\n              field=\"file_path\"\n              title=\"Document\"\n              width=\"95\"\n              cell={(props) => (\n                <td>\n                  <div className=\"text-center\">\n                    <FileIcon\n                      className=\"mr-2\"\n                      source={props.dataItem.file_path}\n                      style={{ width: 25 }}\n                    />\n                  </div>\n                </td>\n              )}\n            /> */}\n              <Column\n                field=\"Actions\"\n                title=\"Actions\"\n                width=\"120\"\n                cell={(props) => (\n                  <td>\n                    <div className={`text-center ${props.dataItem.entry_status_id === entryStatus.RECHECK ? \"text-warning\" : props.dataItem.entry_status_id === entryStatus.REJECTED ? \"text-danger\" : \"\"}`}>\n                      {props.dataItem.entry_status_id === entryStatus.RECHECK ? \"Recheck\" : props.dataItem.entry_status_id === entryStatus.REJECTED ? \"Rejected\" : \"\"}\n\n                      {(props.dataItem.entry_status_id === entryStatus.RECHECK || props.dataItem.entry_status_id === entryStatus.REJECTED) && (\n                        <span>\n                          &nbsp;&nbsp;\n                          <OverlayTrigger\n                            trigger=\"click\"\n                            placement=\"top\"\n                            rootClose={true}\n                            overlay={\n                              <Popover id=\"popover-basic\">\n                                <Popover.Content>\n                                  <div className=\"p-2\">{props.dataItem?.comment}</div>\n                                </Popover.Content>\n                              </Popover>\n                            }\n                          >\n                            <i className=\"feather icon-info text-primary\" style={{ fontSize: 16, cursor: \"pointer\" }}></i>\n                          </OverlayTrigger>\n                        </span>\n                      )}\n                    </div>\n                  </td>\n                )}\n              />\n              <Column\n                field=\"View\"\n                title=\"View\"\n                width=\"70\"\n                cell={(props) => (\n                  <td>\n                    <div className=\"action-panel\">\n                      <button type=\"button\" className=\"btn-icon btn btn-outline-primary\" title=\"View\" onClick={() => viewEntry(props.dataItem)}>\n                        <i className=\"feather icon-eye\"></i>\n                      </button>\n                    </div>\n                  </td>\n                )}\n              />\n            </Grid>\n          </Col>\n        </Row>\n      )}\n\n      <div>\n        {!windowWidth && (\n          <Accordion defaultActiveKey=\"0\">\n            {entriesList &&\n              entriesList.length > 0 &&\n              entriesList.map((row) => (\n                <Card key={row.id}>\n                  <Accordion.Toggle style={{ backgroundColor: \"#7599b1\" }} as={Card.Header} eventKey={row.id}>\n                    {row.name}\n                  </Accordion.Toggle>\n                  <Accordion.Collapse eventKey={row.id}>\n                    <Card.Body>\n                      <div className=\"action-panel\" style={{ dispaly: \"flex\", justifyContent: \"flex-end\", marginBottom: 16 }}>\n                        <button type=\"button\" className=\"btn btn-outline-primary\" title=\"View\" onClick={() => viewEntry(row)}>\n                          View <i className=\"feather icon-eye\"></i>\n                        </button>\n                      </div>\n                      <ListGroup>\n                        <ListGroup.Item>\n                          <span style={{ padding: \"0 16px 0 8px\" }}>Checker:</span>\n                          <span> {row.checker_name}</span>\n                        </ListGroup.Item>\n                        <ListGroup.Item>\n                          <span style={{ padding: \"0 16px 0 8px\" }}>Invoice Date:</span>\n                          <span> {moment(row.invoice_date).format(\"DD-MMM-YYYY\")}</span>\n                        </ListGroup.Item>\n                      </ListGroup>\n                    </Card.Body>\n                  </Accordion.Collapse>\n                </Card>\n              ))}\n          </Accordion>\n        )}\n      </div>\n\n      <Modal size={selectedEntryType === entryTypes.PURCHASE ? \"xl\" : \"lg\"} show={showPreview} backdrop=\"static\" keyboard={true}>\n        <Modal.Body className=\"p-0\">\n          <button type=\"button\" className=\"btn-icon btn close-btn\" onClick={closeEntryModal}>\n            <i className=\"feather icon-x-circle\"></i>\n          </button>\n          <div className=\"px-4 py-5\">\n            <Row>\n              <Col className={selectedEntryType === entryTypes.PURCHASE ? \"col-lg-4\" : \"col-lg-6\"}>\n                <Preview source={selectedEntry?.file_path} containerStyles={{ backgroundColor: \"#f5f5f5\", padding: 10 }} zoom={true} />\n              </Col>\n              <Col className={selectedEntryType === entryTypes.PURCHASE ? \"col-lg-8\" : \"col-lg-6\"}>\n                <Row>\n                  <Col className={selectedEntryType === entryTypes.PURCHASE ? \"col-lg-6\" : \"col-lg-12\"}>\n                    <div className=\"input-group mb-3\">\n                      <Select\n                        className=\"w-100 form-control-select\"\n                        classNamePrefix=\"select\"\n                        options={entryTypeList}\n                        placeholder=\"Entry type\"\n                        isSearchable={false}\n                        isDisabled={selectedEntry?.entry_status_id === entryStatus.RECHECK}\n                        value={entryTypeList.find((i) => i.value === selectedEntryType)}\n                        onChange={(data) => setselectedEntryType(data.value)}\n                      />\n                    </div>\n                  </Col>\n                </Row>\n                <Row>\n                  <Col lg={12}>\n                    <div className=\"input-group\">\n                      {selectedEntryType === entryTypes.SALE && <SalesForm entry={selectedEntry} onSuccess={onEntrySubmit} onShowLoader={setShowLoader} />}\n                      {selectedEntryType === entryTypes.EXPENDITURE && <ExpenditureForm entry={selectedEntry} onSuccess={onEntrySubmit} onShowLoader={setShowLoader} />}\n                      {selectedEntryType === entryTypes.PURCHASE && <PurchaseForm entry={selectedEntry} onSuccess={onEntrySubmit} onShowLoader={setShowLoader} />}\n                    </div>\n                  </Col>\n                </Row>\n              </Col>\n            </Row>\n          </div>\n        </Modal.Body>\n      </Modal>\n    </React.Fragment>\n  );\n};\n\nexport default PendingEntriesWidget;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/clientList/form.js",["1071","1072","1073","1074","1075","1076"],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/dashboard/admin/charts/ClusteredChart.js",["1077"],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/dashboard/admin/charts/BarChart.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/dashboard/validator/charts/ClusteredChart.js",["1078"],"import React, { useEffect } from \"react\";\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\n\nimport * as moment from \"moment\";\n\nam4core.useTheme(am4themes_animated);\n\nconst ClusteredChart = (props) => {\n  useEffect(() => {\n    let chart = am4core.create(\"vat-payable-chart\", am4charts.XYChart);\n\n    // Add data\n    chart.data = props.data;\n    // chart.padding(40, 40, 40, 40);\n\n    let categoryAxis = chart.yAxes.push(new am4charts.CategoryAxis());\n    categoryAxis.renderer.grid.template.location = 0;\n    categoryAxis.dataFields.category = \"client_name\";\n    categoryAxis.renderer.minGridDistance = 10;\n    categoryAxis.renderer.inversed = true;\n    categoryAxis.renderer.grid.template.disabled = true;\n\n    let valueAxis = chart.xAxes.push(new am4charts.ValueAxis());\n    valueAxis.renderer.grid.template.strokeOpacity = 0;\n    valueAxis.renderer.baseGrid.disabled = true;\n    valueAxis.min = getMinVal(props.data);\n    valueAxis.max = getMaxVal(props.data);\n    valueAxis.strictMinMax = true;\n    valueAxis.renderer.minGridDistance = 50;\n\n    let series = chart.series.push(new am4charts.ColumnSeries());\n    series.dataFields.categoryY = \"client_name\";\n    series.dataFields.valueX = \"vat_amount\";\n    series.tooltipText = \"{valueX.value}\";\n    series.columns.template.strokeOpacity = 0;\n    series.columns.template.column.cornerRadiusBottomLeft = 15;\n    series.columns.template.column.cornerRadiusBottomRight = 15;\n    series.columns.template.column.cornerRadiusTopLeft = 15;\n    series.columns.template.column.cornerRadiusTopRight = 15;\n    series.columns.template.height = 30;\n    series.columns.template.fill = am4core.color(\"#476678\");\n\n    let labelBullet = series.bullets.push(new am4charts.LabelBullet());\n    labelBullet.label.horizontalCenter = \"middle\";\n    labelBullet.label.fill = am4core.color(\"#fff\");\n    labelBullet.label.adapter.add(\"dx\", (dx, target) => {\n      if (target.dataItem.valueX < 0) {\n        return 50;\n      } else {\n        return -50;\n      }\n    });\n    labelBullet.label.adapter.add(\"text\", (text, target) => {\n      return parseFloat(target.dataItem.valueX).toFixed(2) + \" AED\";\n    });\n  });\n\n  const getMaxVal = (data) => {\n    let max =\n      Math.max.apply(\n        Math,\n        data.map((obj) => {\n          return obj.vat_amount;\n        })\n      ) + 50;\n    return max;\n  };\n\n  const getMinVal = (data) => {\n    let min =\n      Math.min.apply(\n        Math,\n        data.map((obj) => {\n          return obj.vat_amount;\n        })\n      ) - 50;\n    return min;\n  };\n\n  return (\n    <div\n      id=\"vat-payable-chart\"\n      style={{\n        width: \"100%\",\n        height:\n          (props.data?.length ? 30 * props.data?.length + 100 : 100) + \"px\",\n      }}\n    />\n  );\n};\n\nexport default ClusteredChart;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/other-widgets/portal-subscription/index.js",["1079","1080","1081"],"import React, {useState, useEffect} from \"react\";\r\nimport {Accordion, Card, ListGroup, Row, Col, Badge} from \"react-bootstrap\";\r\nimport {Grid, GridColumn as Column} from \"@progress/kendo-react-grid\";\r\nimport moment from \"moment\";\r\n\r\nimport {callApi} from \"../../../../services/apiService\";\r\nimport {ApiConstants} from \"../../../../config/apiConstants\";\r\nimport Spinner from \"../../../../components/Spinner\";\r\nimport {showNotification} from \"../../../../services/toasterService\";\r\n\r\nconst PortalSubscriptionExpiry = (props) => {\r\n\tconst [showLoader, setShowLoader] = useState(false);\r\n\tconst [notificationList, setNotificationList] = useState([]);\r\n\tconst [windowWidth, setWindowWidth] = useState(window.innerWidth > 992);\r\n\r\n\tReact.useEffect(() => {\r\n\t\tgetData();\r\n\t\tsetWindowWidth(window.innerWidth > 992);\r\n\t}, []);\r\n\r\n\tconst getData = React.useCallback(() => {\r\n\t\tsetShowLoader(true);\r\n\t\tcallApi(\"get\", ApiConstants.admin.expirydatelist, {row_count: props.row_count}, true)\r\n\t\t\t.then((response) => {\r\n\t\t\t\tsetShowLoader(false);\r\n\t\t\t\tif (response && response.status_code === 200) {\r\n\t\t\t\t\tlet notificationData = response?.payload;\r\n\t\t\t\t\tconsole.log(new Date(notificationData[0].to));\r\n\t\t\t\t\t// console.log(notificationData);\r\n\t\t\t\t\tnotificationData = notificationData\r\n\t\t\t\t\t\t.map((data) => ({\r\n\t\t\t\t\t\t\t...data,\r\n\t\t\t\t\t\t\tstatus: new Date(data.to).setHours(0, 0, 0, 0) < new Date().setHours(0, 0, 0, 0) ? \"Expired\" : \"Expiring Today\",\r\n\t\t\t\t\t\t}))\r\n\t\t\t\t\t\t.filter((data) => new Date(data.to).setHours(0, 0, 0, 0) < new Date().setHours(0, 0, 0, 0));\r\n\t\t\t\t\tsetNotificationList(notificationData);\r\n\t\t\t\t\t// console.log(response);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tsetShowLoader(false);\r\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\r\n\t\t\t});\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t{showLoader && <Spinner />}\r\n\t\t\t{windowWidth && (\r\n\t\t\t\t<Row>\r\n\t\t\t\t\t<Col xl={12}>\r\n\t\t\t\t\t\t<Grid data={notificationList} style={{height: 270}}>\r\n\t\t\t\t\t\t\t<Column field=\"id\" title=\"#\" width=\"40px\" cell={(props) => <td>{props.dataIndex + 1}</td>} />\r\n\t\t\t\t\t\t\t<Column field=\"name\" title=\"Client Name\" width=\"150px\" />\r\n\t\t\t\t\t\t\t<Column\r\n\t\t\t\t\t\t\t\tfield=\"created_at\"\r\n\t\t\t\t\t\t\t\ttitle=\"Status\"\r\n\t\t\t\t\t\t\t\tcell={(props) => (\r\n\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t<Badge variant={props.dataItem.status === \"Expired\" ? \"danger\" : \"warning\"}>{props.dataItem.status}</Badge>\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<Column\r\n\t\t\t\t\t\t\t\tfield=\"to\"\r\n\t\t\t\t\t\t\t\ttitle=\"Expiry Date\"\r\n\t\t\t\t\t\t\t\tcell={(props) => (\r\n\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t<div>{moment(props.dataItem.to).format(\"DD-MMM-YYYY\") === \"Invalid date\" ? \"Unsubscribed\" : moment(props.dataItem.to).format(\"DD-MMM-YYYY\")}</div>\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t</Row>\r\n\t\t\t)}\r\n\r\n\t\t\t<div>\r\n\t\t\t\t{!windowWidth && (\r\n\t\t\t\t\t<Accordion defaultActiveKey=\"0\">\r\n\t\t\t\t\t\t{notificationList &&\r\n\t\t\t\t\t\t\tnotificationList.length > 0 &&\r\n\t\t\t\t\t\t\tnotificationList.map((row) => (\r\n\t\t\t\t\t\t\t\t<Card key={row.id}>\r\n\t\t\t\t\t\t\t\t\t<Accordion.Toggle style={{backgroundColor: \"#7599b1\"}} as={Card.Header} eventKey={row.name}>\r\n\t\t\t\t\t\t\t\t\t\t{row.name} <Badge variant={row.status === \"Expired\" ? \"danger\" : \"warning\"}>{row.status}</Badge>\r\n\t\t\t\t\t\t\t\t\t</Accordion.Toggle>\r\n\t\t\t\t\t\t\t\t\t<Accordion.Collapse eventKey={row.name}>\r\n\t\t\t\t\t\t\t\t\t\t<Card.Body>\r\n\t\t\t\t\t\t\t\t\t\t\t<ListGroup>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>Client:</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span> {row.name}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>Expiry Date:</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span> {moment(props.dataItem.to).format(\"DD-MMM-YYYY\") === \"Invalid date\" ? \"Unsubscribed\" : moment(props.dataItem.to).format(\"DD-MMM-YYYY\")}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t</ListGroup>\r\n\t\t\t\t\t\t\t\t\t\t</Card.Body>\r\n\t\t\t\t\t\t\t\t\t</Accordion.Collapse>\r\n\t\t\t\t\t\t\t\t</Card>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t</Accordion>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default PortalSubscriptionExpiry;\r\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/other-widgets/trade-license/index.js",["1082","1083"],"import React, {useState, useEffect} from \"react\";\r\nimport {Accordion, Card, ListGroup, Row, Col, Badge} from \"react-bootstrap\";\r\nimport {Grid, GridColumn as Column} from \"@progress/kendo-react-grid\";\r\nimport moment from \"moment\";\r\n\r\nimport {callApi} from \"../../../../services/apiService\";\r\nimport {ApiConstants} from \"../../../../config/apiConstants\";\r\nimport Spinner from \"../../../../components/Spinner\";\r\nimport {showNotification} from \"../../../../services/toasterService\";\r\n\r\nconst TradeLicenseExpiry = (props) => {\r\n\tconst [showLoader, setShowLoader] = useState(false);\r\n\tconst [tradeLicenseExpiryList, setTradeLicenseExpiryList] = useState([]);\r\n\tconst [windowWidth, setWindowWidth] = useState(window.innerWidth > 992);\r\n\r\n\tconst getData = React.useCallback(() => {\r\n\t\tsetShowLoader(true);\r\n\t\tcallApi(\"get\", ApiConstants.admin.tradelicenseexpirydate, {row_count: props.row_count}, true)\r\n\t\t\t.then((response) => {\r\n\t\t\t\tsetShowLoader(false);\r\n\t\t\t\tif (response && response.status_code === 200) {\r\n\t\t\t\t\tlet trade_license_expiry = response?.payload;\r\n\t\t\t\t\ttrade_license_expiry = trade_license_expiry.map((data) => ({\r\n\t\t\t\t\t\t...data,\r\n\t\t\t\t\t\tstatus: new Date(data.trade_license_expiry).setHours(0, 0, 0, 0) < new Date().setHours(0, 0, 0, 0) ? \"Expired\" : \"Expiring Today\",\r\n\t\t\t\t\t}));\r\n\t\t\t\t\tsetTradeLicenseExpiryList(trade_license_expiry);\r\n\t\t\t\t\t// console.log(trade_license_expiry);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tsetShowLoader(false);\r\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\r\n\t\t\t});\r\n\t}, []);\r\n\r\n\tReact.useEffect(() => {\r\n\t\tgetData();\r\n\t\tsetWindowWidth(window.innerWidth > 992);\r\n\t}, [getData]);\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t{showLoader && <Spinner />}\r\n\t\t\t{windowWidth && (\r\n\t\t\t\t<Row>\r\n\t\t\t\t\t<Col xl={12}>\r\n\t\t\t\t\t\t<Grid data={tradeLicenseExpiryList} style={{height: 270}}>\r\n\t\t\t\t\t\t\t<Column field=\"id\" title=\"#\" width=\"40px\" cell={(props) => <td>{props.dataIndex + 1}</td>} />\r\n\t\t\t\t\t\t\t<Column field=\"name\" title=\"Client Name\" width=\"150px\" />\r\n\t\t\t\t\t\t\t<Column\r\n\t\t\t\t\t\t\t\tfield=\"created_at\"\r\n\t\t\t\t\t\t\t\ttitle=\"Status\"\r\n\t\t\t\t\t\t\t\tcell={(props) => (\r\n\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t<Badge variant={props.dataItem.status === \"Expired\" ? \"danger\" : \"warning\"}>{props.dataItem.status}</Badge>\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<Column\r\n\t\t\t\t\t\t\t\tfield=\"to\"\r\n\t\t\t\t\t\t\t\ttitle=\"Expiry Date\"\r\n\t\t\t\t\t\t\t\tcell={(props) => (\r\n\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t<div>{moment(props.dataItem.trade_license_expiry).format(\"DD-MMM-YYYY\")}</div>\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t</Row>\r\n\t\t\t)}\r\n\r\n\t\t\t<div>\r\n\t\t\t\t{!windowWidth && (\r\n\t\t\t\t\t<Accordion defaultActiveKey=\"0\">\r\n\t\t\t\t\t\t{tradeLicenseExpiryList &&\r\n\t\t\t\t\t\t\ttradeLicenseExpiryList.length > 0 &&\r\n\t\t\t\t\t\t\ttradeLicenseExpiryList.map((row) => (\r\n\t\t\t\t\t\t\t\t<Card key={row.id}>\r\n\t\t\t\t\t\t\t\t\t<Accordion.Toggle style={{backgroundColor: \"#7599b1\"}} as={Card.Header} eventKey={row.name}>\r\n\t\t\t\t\t\t\t\t\t\t{row.name} <Badge variant={row.status === \"Expired\" ? \"danger\" : \"warning\"}>{row.status}</Badge>\r\n\t\t\t\t\t\t\t\t\t</Accordion.Toggle>\r\n\t\t\t\t\t\t\t\t\t<Accordion.Collapse eventKey={row.name}>\r\n\t\t\t\t\t\t\t\t\t\t<Card.Body>\r\n\t\t\t\t\t\t\t\t\t\t\t<ListGroup>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>Client:</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span> {row.name}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>Expiry Date:</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span> {moment(row.trade_license_expiry).format(\"DD-MMM-YYYY\")}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t</ListGroup>\r\n\t\t\t\t\t\t\t\t\t\t</Card.Body>\r\n\t\t\t\t\t\t\t\t\t</Accordion.Collapse>\r\n\t\t\t\t\t\t\t\t</Card>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t</Accordion>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default TradeLicenseExpiry;\r\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/admin/other-widgets/vat-submission-due-date/index.js",["1084","1085"],"import React, {useState, useEffect} from \"react\";\r\nimport {Accordion, Card, ListGroup, Row, Col, Badge} from \"react-bootstrap\";\r\nimport {Grid, GridColumn as Column} from \"@progress/kendo-react-grid\";\r\nimport moment from \"moment\";\r\n\r\nimport {callApi} from \"../../../../services/apiService\";\r\nimport {ApiConstants} from \"../../../../config/apiConstants\";\r\nimport Spinner from \"../../../../components/Spinner\";\r\nimport {showNotification} from \"../../../../services/toasterService\";\r\n\r\nconst VatSubmissionDueDate = (props) => {\r\n\tconst [showLoader, setShowLoader] = useState(false);\r\n\tconst [vatSubmissionList, setVATSubmissionList] = useState([]);\r\n\tconst [windowWidth, setWindowWidth] = useState(window.innerWidth > 992);\r\n\r\n\tconst getData = React.useCallback(() => {\r\n\t\tsetShowLoader(true);\r\n\t\tcallApi(\"get\", ApiConstants.admin.expirydatelist, {row_count: props.row_count}, true)\r\n\t\t\t.then((response) => {\r\n\t\t\t\tsetShowLoader(false);\r\n\t\t\t\tif (response && response.status_code === 200) {\r\n\t\t\t\t\tlet vatDAta = response?.payload;\r\n\t\t\t\t\tvatDAta = vatDAta\r\n\t\t\t\t\t\t.map((data) => ({\r\n\t\t\t\t\t\t\t...data,\r\n\t\t\t\t\t\t\tvatSubmission: data?.start_year ? new Date(new Date(data?.start_year, data?.start_month + data?.vat_period-1).getTime() + 27 * 24 * 60 * 60 * 1000).setHours(0, 0, 0, 0) : null,\r\n\t\t\t\t\t\t\tstatus: new Date(new Date(data?.start_year, data?.start_month + data?.vat_period-1).getTime() + 27 * 24 * 60 * 60 * 1000).setHours(0, 0, 0, 0) < new Date().setHours(0, 0, 0, 0) ? \"Expired\" : \"Expiring Today\",\r\n\t\t\t\t\t\t}))\r\n\t\t\t\t\t\t.filter((data) => data.vatSubmission)\r\n\t\t\t\t\t\t.filter((data) => new Date(new Date(data?.start_year, data?.start_month + data?.vat_period-1).getTime() + 27 * 24 * 60 * 60 * 1000).setHours(0, 0, 0, 0) < new Date().setHours(0, 0, 0, 0));\r\n\t\t\t\t\t// console.log({vatDAta});\r\n\t\t\t\t\tsetVATSubmissionList(vatDAta);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tsetShowLoader(false);\r\n\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\r\n\t\t\t});\r\n\t}, []);\r\n\r\n\tReact.useEffect(() => {\r\n\t\tgetData();\r\n\t\tsetWindowWidth(window.innerWidth > 992);\r\n\t}, [getData]);\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t{showLoader && <Spinner />}\r\n\t\t\t{windowWidth && (\r\n\t\t\t\t<Row>\r\n\t\t\t\t\t<Col xl={12}>\r\n\t\t\t\t\t\t<Grid data={vatSubmissionList} style={{height: 270}}>\r\n\t\t\t\t\t\t\t<Column field=\"id\" title=\"#\" width=\"40px\" cell={(props) => <td>{props.dataIndex + 1}</td>} />\r\n\t\t\t\t\t\t\t<Column field=\"name\" title=\"Client Name\" width=\"150px\" />\r\n\t\t\t\t\t\t\t<Column\r\n\t\t\t\t\t\t\t\tfield=\"created_at\"\r\n\t\t\t\t\t\t\t\ttitle=\"Status\"\r\n\t\t\t\t\t\t\t\tcell={(props) => (\r\n\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t<Badge variant={props.dataItem.status === \"Expired\" ? \"danger\" : \"warning\"}>{props.dataItem.status}</Badge>\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<Column\r\n\t\t\t\t\t\t\t\tfield=\"to\"\r\n\t\t\t\t\t\t\t\ttitle=\"Expiry Date\"\r\n\t\t\t\t\t\t\t\tcell={(props) => (\r\n\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t<div>{moment(props.dataItem.vatSubmission).format(\"DD-MMM-YYYY\")}</div>\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t</Row>\r\n\t\t\t)}\r\n\r\n\t\t\t<div>\r\n\t\t\t\t{!windowWidth && (\r\n\t\t\t\t\t<Accordion defaultActiveKey=\"0\">\r\n\t\t\t\t\t\t{vatSubmissionList &&\r\n\t\t\t\t\t\t\tvatSubmissionList.length > 0 &&\r\n\t\t\t\t\t\t\tvatSubmissionList.map((row) => (\r\n\t\t\t\t\t\t\t\t<Card key={row.id}>\r\n\t\t\t\t\t\t\t\t\t<Accordion.Toggle style={{backgroundColor: \"#7599b1\"}} as={Card.Header} eventKey={row.name}>\r\n\t\t\t\t\t\t\t\t\t\t{row.name} <Badge variant={row.status === \"Expired\" ? \"danger\" : \"warning\"}>{row.status}</Badge>\r\n\t\t\t\t\t\t\t\t\t</Accordion.Toggle>\r\n\t\t\t\t\t\t\t\t\t<Accordion.Collapse eventKey={row.name}>\r\n\t\t\t\t\t\t\t\t\t\t<Card.Body>\r\n\t\t\t\t\t\t\t\t\t\t\t<ListGroup>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>Client:</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span> {row.name}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>Expiry Date:</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span> {moment(row.vatSubmission).format(\"DD-MMM-YYYY\")}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t</ListGroup>\r\n\t\t\t\t\t\t\t\t\t\t</Card.Body>\r\n\t\t\t\t\t\t\t\t\t</Accordion.Collapse>\r\n\t\t\t\t\t\t\t\t</Card>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t</Accordion>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default VatSubmissionDueDate;\r\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/dashboard/validator/charts/BarChart.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/approved-entries/widget.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/rejected-entries/widget.js",[],["1086","1087"],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/pending-entries/widget.js",["1088","1089","1090","1091","1092","1093","1094","1095","1096"],"import React, { useState, useEffect } from \"react\";\nimport { Row, Col, Accordion, Card, ListGroup, Modal } from \"react-bootstrap\";\nimport { Grid, GridColumn as Column } from \"@progress/kendo-react-grid\";\nimport { process } from \"@progress/kendo-data-query\";\nimport moment from \"moment\";\nimport DatePicker from \"react-datepicker\";\nimport Select from \"react-select\";\n\nimport { callApi } from \"../../../services/apiService\";\nimport { ApiConstants } from \"../../../config/apiConstants\";\nimport { showNotification } from \"../../../services/toasterService\";\nimport Spinner from \"../../../components/Spinner\";\nimport Preview from \"../../../components/Preview\";\nimport { entryTypeList } from \"../../../enums/entryTypeList\";\nimport { entryTypes } from \"../../../enums/entryTypes\";\nimport FileIcon from \"../../../components/FileIcon\";\nimport SalesForm from \"./forms/salesForm\";\nimport ExpenditureForm from \"./forms/expenditureForm\";\nimport PurchaseForm from \"./forms/purchaseForm\";\n\nconst PendingEntriesWidget = (props) => {\n  const [showLoader, setShowLoader] = useState(false);\n  const [entriesList, setEntriesList] = useState([]);\n  const [startDate, setStartDate] = useState(null);\n  const [endDate, setEndDate] = useState(null);\n  const [showPreview, setshowPreview] = useState(false);\n  const [selectedEntry, setselectedEntry] = useState(null);\n  const [selectedEntryType, setselectedEntryType] = useState(\"\");\n  const [showDeleteConfirm, setDeleteConfirm] = React.useState(false);\n\n  const [gridState, setgridState] = useState({\n    skip: 0,\n    take: 10,\n  });\n  const [gridData, setgridData] = useState(null);\n\n  const pagerSettings = {\n    buttonCount: 5,\n    info: true,\n    type: \"numeric\",\n    pageSizes: true,\n    previousNext: true,\n  };\n\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth > 992);\n\n  React.useEffect(() => {\n    getData();\n    setWindowWidth(window.innerWidth > 992);\n  }, []);\n\n  useEffect(() => {\n    loadGridData();\n  }, [entriesList, gridState]);\n\n  const loadGridData = () => {\n    let updatedData = process(entriesList, gridState);\n    setgridData(updatedData);\n  };\n\n  const pageChange = (event) => {\n    let updatedState = {\n      ...gridState,\n      skip: event.page.skip,\n      take: event.page.take,\n    };\n    setgridState({ ...updatedState });\n  };\n\n  const getData = () => {\n    setShowLoader(true);\n    callApi(\"get\", ApiConstants.entry.validatorpendinglist, {}, true)\n      .then((response) => {\n        setShowLoader(false);\n        if (response && response.status_code === 200) {\n          setEntriesList(response.payload);\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        setShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const viewEntry = (entry) => {\n    setselectedEntry(entry);\n    setselectedEntryType(entry.entry_type);\n    setshowPreview(true);\n  };\n\n  const closeEntryModal = () => {\n    setshowPreview(false);\n    setselectedEntryType(\"\");\n  };\n\n  const onEntrySubmit = () => {\n    closeEntryModal();\n    getData();\n  };\n\n  const deleteEntry = (entry) => {\n    setselectedEntry(entry);\n    setDeleteConfirm(true);\n  };\n\n  const deleteData = () => {\n    setShowLoader(true);\n    callApi(\"post\", ApiConstants.entry.validatordeleteentry, { entry_id: selectedEntry.id }, true)\n      .then((response) => {\n        setShowLoader(false);\n        if (response && response.status_code === 200) {\n          showNotification(\"Success\", response.message, \"success\");\n          getData();\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        setShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  return (\n\t\t<React.Fragment>\n\t\t\t{showLoader && <Spinner />}\n\t\t\t{windowWidth && (\n\t\t\t\t<Row>\n\t\t\t\t\t<Col xl={12}>\n\t\t\t\t\t\t<Grid data={gridData} style={{height: 270}}>\n\t\t\t\t\t\t\t{/* <Column\n              field=\"id\"\n              title=\"#\"\n              width=\"40px\"\n              cell={(props) => <td>{props.dataIndex + 1}</td>}\n            /> */}\n\t\t\t\t\t\t\t<Column field=\"user_name\" title=\"Client Name\" width={150} />\n\t\t\t\t\t\t\t<Column field=\"checker_name\" title=\"Checker Name\" width={150} />\n\t\t\t\t\t\t\t{/* <Column\n              field=\"created_at\"\n              width=\"130\"\n              title=\"Date\"\n              cell={(props) => (\n                <td>\n                  <div>\n                    {moment(props.dataItem.created_at).format(\"DD-MMM-YYYY\")}\n                  </div>\n                </td>\n              )}\n            /> */}\n\t\t\t\t\t\t\t<Column\n\t\t\t\t\t\t\t\tfield=\"invoice_date\"\n\t\t\t\t\t\t\t\tfilterable={false}\n\t\t\t\t\t\t\t\twidth=\"110\"\n\t\t\t\t\t\t\t\ttitle=\"Invoice Date\"\n\t\t\t\t\t\t\t\tcell={(props) => (\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<div>{moment(props.dataItem.invoice_date).format(\"DD-MMM-YYYY\")}</div>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{/* <Column\n\t\t\t\t\t\t\t\tfield=\"file_path\"\n\t\t\t\t\t\t\t\ttitle=\"Document\"\n\t\t\t\t\t\t\t\twidth=\"95\"\n\t\t\t\t\t\t\t\tcell={(props) => (\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t\t\t\t\t<FileIcon className=\"mr-2\" source={props.dataItem.file_path} style={{width: 25}} />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t/> */}\n\t\t\t\t\t\t\t<Column\n\t\t\t\t\t\t\t\tfield=\"View\"\n\t\t\t\t\t\t\t\ttitle=\"View\"\n\t\t\t\t\t\t\t\twidth=\"70\"\n\t\t\t\t\t\t\t\tcell={(props) => (\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<div className=\"action-panel\">\n\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn-icon btn btn-outline-primary\" title=\"View\" onClick={() => viewEntry(props.dataItem)}>\n\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-eye\"></i>\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Column\n\t\t\t\t\t\t\t\tfield=\"Actions\"\n\t\t\t\t\t\t\t\ttitle=\"Actions\"\n\t\t\t\t\t\t\t\tfilterable={false}\n\t\t\t\t\t\t\t\twidth=\"70\"\n\t\t\t\t\t\t\t\tcell={(props) => (\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t{props.dataItem.requested_for_delete > 0 && (\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"action-panel\">\n\t\t\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"btn-icon btn btn-outline-danger\"\n\t\t\t\t\t\t\t\t\t\t\t\t\ttitle=\"Delete\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeleteEntry(props.dataItem);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-trash\"></i>\n\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t)}\n\n\t\t\t<div>\n\t\t\t\t{!windowWidth && (\n\t\t\t\t\t<Accordion defaultActiveKey=\"0\">\n\t\t\t\t\t\t{entriesList &&\n\t\t\t\t\t\t\tentriesList.length > 0 &&\n\t\t\t\t\t\t\tentriesList.map((row) => (\n\t\t\t\t\t\t\t\t<Card key={row.id}>\n\t\t\t\t\t\t\t\t\t<Accordion.Toggle style={{backgroundColor: \"#7599b1\"}} as={Card.Header} eventKey={row.id}>\n\t\t\t\t\t\t\t\t\t\t{row.user_name}\n\t\t\t\t\t\t\t\t\t</Accordion.Toggle>\n\t\t\t\t\t\t\t\t\t<Accordion.Collapse eventKey={row.id}>\n\t\t\t\t\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"action-panel\" style={{dispaly: \"flex\", justifyContent: \"flex-end\", marginBottom: 16}}>\n\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn btn-outline-primary\" title=\"View\" onClick={() => viewEntry(row)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\tView <i className=\"feather icon-eye\"></i>\n\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<ListGroup>\n\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>Checker:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span> {row.checker_name}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>Action:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span></span>\n\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{padding: \"0 16px 0 8px\"}}>Entry Date:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span> {moment(row.invoice_date).format(\"DD-MMM-YYYY\")}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t\t\t\t</ListGroup>\n\t\t\t\t\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t\t\t\t</Accordion.Collapse>\n\t\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t</Accordion>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t<Modal size={selectedEntryType === entryTypes.PURCHASE ? \"xl\" : \"lg\"} show={showPreview} backdrop=\"static\" keyboard={true}>\n\t\t\t\t<Modal.Body className=\"p-0\">\n\t\t\t\t\t<button type=\"button\" className=\"btn-icon btn close-btn\" onClick={closeEntryModal}>\n\t\t\t\t\t\t<i className=\"feather icon-x-circle\"></i>\n\t\t\t\t\t</button>\n\t\t\t\t\t<div className=\"px-4 py-5\">\n\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t<Col className={selectedEntryType === entryTypes.PURCHASE ? \"col-lg-4\" : \"col-lg-6\"}>\n\t\t\t\t\t\t\t\t<Preview source={selectedEntry?.file_path} containerStyles={{backgroundColor: \"#f5f5f5\", padding: 10}} zoom={true} />\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t<Col className={selectedEntryType === entryTypes.PURCHASE ? \"col-lg-8\" : \"col-lg-6\"}>\n\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t<Col className={selectedEntryType === entryTypes.PURCHASE ? \"col-lg-6\" : \"col-lg-12\"}>\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"w-100 form-control-select\"\n\t\t\t\t\t\t\t\t\t\t\t\tclassNamePrefix=\"select\"\n\t\t\t\t\t\t\t\t\t\t\t\tisDisabled\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={entryTypeList.find((i) => i.value === selectedEntry?.entry_type)}\n\t\t\t\t\t\t\t\t\t\t\t\toptions={entryTypeList}\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Entry type\"\n\t\t\t\t\t\t\t\t\t\t\t\tisSearchable={false}\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(data) => setselectedEntryType(data.value)}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t<Col lg={12}>\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group\">\n\t\t\t\t\t\t\t\t\t\t\t{selectedEntryType === entryTypes.SALE && <SalesForm entry={selectedEntry} onSuccess={onEntrySubmit} onShowLoader={setShowLoader} />}\n\t\t\t\t\t\t\t\t\t\t\t{selectedEntryType === entryTypes.EXPENDITURE && <ExpenditureForm entry={selectedEntry} onSuccess={onEntrySubmit} onShowLoader={setShowLoader} />}\n\t\t\t\t\t\t\t\t\t\t\t{selectedEntryType === entryTypes.PURCHASE && <PurchaseForm entry={selectedEntry} onSuccess={onEntrySubmit} onShowLoader={setShowLoader} />}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</div>\n\t\t\t\t</Modal.Body>\n\t\t\t</Modal>\n\t\t\t<Modal size=\"md\" show={showDeleteConfirm} backdrop=\"static\" keyboard={true}>\n\t\t\t\t<Modal.Header>\n\t\t\t\t\t<h5 className=\"card-title\">Confirm Delete</h5>\n\t\t\t\t</Modal.Header>\n\t\t\t\t<Modal.Body>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<span>Are you sure that to delete this entry?</span>\n\t\t\t\t\t</div>\n\t\t\t\t</Modal.Body>\n\t\t\t\t<Modal.Footer>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<button className=\"btn btn-outline-primary\" onClick={() => setDeleteConfirm(false)}>\n\t\t\t\t\t\t\tNo\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn btn-primary\"\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tsetDeleteConfirm(false);\n\t\t\t\t\t\t\t\tdeleteData();\n\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\tYes\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</Modal.Footer>\n\t\t\t</Modal>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default PendingEntriesWidget;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/approved-entries/widget.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/pending-entries/widget.js",["1097"],"import React, { useState } from \"react\";\r\nimport { Accordion, Card, ListGroup, Row, Col, Modal, OverlayTrigger, Popover } from \"react-bootstrap\";\r\nimport { Grid, GridColumn as Column } from \"@progress/kendo-react-grid\";\r\nimport moment from \"moment\";\r\nimport Select from \"react-select\";\r\n\r\nimport { callApi } from \"../../../services/apiService\";\r\nimport { ApiConstants } from \"../../../config/apiConstants\";\r\nimport Spinner from \"../../../components/Spinner\";\r\nimport Preview from \"../../../components/Preview\";\r\nimport { entryTypeList } from \"../../../enums/entryTypeList\";\r\nimport { entryTypes } from \"../../../enums/entryTypes\";\r\nimport { entryStatus } from \"../../../enums/entryStatus\";\r\nimport FileIcon from \"../../../components/FileIcon\";\r\nimport { showNotification } from \"../../../services/toasterService\";\r\nimport SalesForm from \"./forms/salesForm\";\r\nimport ExpenditureForm from \"./forms/expenditureForm\";\r\nimport PurchaseForm from \"./forms/purchaseForm\";\r\n\r\nconst PendingEntriesWidget = (props) => {\r\n  const [showLoader, setShowLoader] = useState(false);\r\n  const [entriesList, setEntriesList] = useState([]);\r\n  const [showPreview, setshowPreview] = useState(false);\r\n  const [selectedEntry, setselectedEntry] = useState(null);\r\n  const [selectedEntryType, setselectedEntryType] = useState(\"\");\r\n\r\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth > 992);\r\n  const [hidePurchaseCombo, setHidePurchaseCombo] = useState(false);\r\n\r\n  const getData = React.useCallback(() => {\r\n    setShowLoader(true);\r\n    callApi(\"get\", ApiConstants.entry.checkerpendinglist, { row_count: props.row_count }, true)\r\n      .then((response) => {\r\n        setShowLoader(false);\r\n        if (response && response.status_code === 200) {\r\n          let temp = response.payload;\r\n          setEntriesList(temp);\r\n        } else {\r\n          showNotification(\"Error\", response.message, \"error\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setShowLoader(false);\r\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\r\n      });\r\n  }, [props.row_count]);\r\n\r\n  React.useEffect(() => {\r\n    getData();\r\n    setWindowWidth(window.innerWidth > 992);\r\n  }, [getData]);\r\n\r\n  const viewEntry = (entry) => {\r\n    setselectedEntry(entry);\r\n    if (entry?.entry_status_id === entryStatus.RECHECK) {\r\n      setselectedEntryType(entry.entry_type);\r\n    }\r\n    setshowPreview(true);\r\n  };\r\n\r\n  const closeEntryModal = () => {\r\n    setshowPreview(false);\r\n    setselectedEntryType(\"\");\r\n  };\r\n\r\n  const onEntrySubmit = () => {\r\n    closeEntryModal();\r\n    getData();\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {showLoader && <Spinner />}\r\n      {windowWidth && (\r\n        <Row>\r\n          <Col xl={12}>\r\n            <Grid data={entriesList} style={{ height: 270 }}>\r\n              <Column field=\"id\" title=\"#\" width=\"40px\" cell={(props) => <td>{props.dataIndex + 1}</td>} />\r\n              <Column field=\"name\" title=\"Client Name\" width=\"150px\" />\r\n              <Column field=\"created_at\" width=\"130\" title=\"Entry Date\" cell={(props) => <td>{moment(props.dataItem.created_at).format(\"DD-MMM-YYYY\")}</td>} />\r\n              {/* <Column\r\n                field=\"file_path\"\r\n                title=\"Document\"\r\n                width=\"95\"\r\n                cell={(props) => (\r\n                  <td className=\"text-center\">\r\n                    <FileIcon className=\"mr-2\" source={props.dataItem.file_path} style={{ width: 25 }} />\r\n                  </td>\r\n                )}\r\n              /> */}\r\n              <Column\r\n                field=\"Actions\"\r\n                title=\"Actions\"\r\n                width=\"120\"\r\n                cell={(props) => (\r\n                  <td>\r\n                    <div className={`text-center ${props.dataItem.entry_status_id === entryStatus.RECHECK ? \"text-warning\" : props.dataItem.entry_status_id === entryStatus.REJECTED ? \"text-danger\" : \"\"}`}>\r\n                      {props.dataItem.entry_status_id === entryStatus.RECHECK ? \"Recheck\" : props.dataItem.entry_status_id === entryStatus.REJECTED ? \"Rejected\" : \"\"}\r\n\r\n                      {(props.dataItem.entry_status_id === entryStatus.RECHECK || props.dataItem.entry_status_id === entryStatus.REJECTED) && (\r\n                        <span>\r\n                          &nbsp;&nbsp;\r\n                          <OverlayTrigger\r\n                            trigger=\"click\"\r\n                            placement=\"top\"\r\n                            rootClose={true}\r\n                            overlay={\r\n                              <Popover id=\"popover-basic\">\r\n                                <Popover.Content>\r\n                                  <div className=\"p-2\">{props.dataItem?.comment}</div>\r\n                                </Popover.Content>\r\n                              </Popover>\r\n                            }\r\n                          >\r\n                            <i className=\"feather icon-info text-primary\" style={{ fontSize: 16, cursor: \"pointer\" }}></i>\r\n                          </OverlayTrigger>\r\n                        </span>\r\n                      )}\r\n                    </div>\r\n                  </td>\r\n                )}\r\n              />\r\n              <Column\r\n                field=\"View\"\r\n                title=\"View\"\r\n                width=\"70\"\r\n                cell={(props) => (\r\n                  <td>\r\n                    <div className=\"action-panel\">\r\n                      <button type=\"button\" className=\"btn-icon btn btn-outline-primary\" title=\"View\" onClick={() => viewEntry(props.dataItem)}>\r\n                        <i className=\"feather icon-eye\"></i>\r\n                      </button>\r\n                    </div>\r\n                  </td>\r\n                )}\r\n              />\r\n            </Grid>\r\n          </Col>\r\n        </Row>\r\n      )}\r\n\r\n      <div>\r\n        {!windowWidth && (\r\n          <Accordion defaultActiveKey=\"0\">\r\n            {entriesList &&\r\n              entriesList.length > 0 &&\r\n              entriesList.map((row) => (\r\n                <Card key={row.id}>\r\n                  <Accordion.Toggle style={{ backgroundColor: \"#7599b1\" }} as={Card.Header} eventKey={row.id}>\r\n                    Client: {row.name}\r\n                  </Accordion.Toggle>\r\n                  <Accordion.Collapse eventKey={row.id}>\r\n                    <Card.Body>\r\n                      <div className=\"action-panel\" style={{ dispaly: \"flex\", justifyContent: \"flex-end\", marginBottom: 16 }}>\r\n                        <button type=\"button\" className=\"btn btn-outline-primary\" title=\"View\" onClick={() => viewEntry(row)}>\r\n                          View <i className=\"feather icon-eye\"></i>\r\n                        </button>\r\n                      </div>\r\n                      <ListGroup>\r\n                        <ListGroup.Item>\r\n                          <span style={{ padding: \"0 16px 0 8px\" }}>Action:</span>\r\n                          <span>\r\n                            <div className={`text-center ${row.entry_status_id === entryStatus.RECHECK ? \"text-warning\" : row.entry_status_id === entryStatus.REJECTED ? \"text-danger\" : \"\"}`}>\r\n                              {row.entry_status_id === entryStatus.RECHECK ? \"Recheck\" : row.entry_status_id === entryStatus.REJECTED ? \"Rejected\" : \"\"}\r\n\r\n                              {(row.entry_status_id === entryStatus.RECHECK || row.entry_status_id === entryStatus.REJECTED) && (\r\n                                <span>\r\n                                  &nbsp;&nbsp;\r\n                                  <OverlayTrigger\r\n                                    trigger=\"click\"\r\n                                    placement=\"top\"\r\n                                    rootClose={true}\r\n                                    overlay={\r\n                                      <Popover id=\"popover-basic\">\r\n                                        <Popover.Content>\r\n                                          <div className=\"p-2\">{row?.comment}</div>\r\n                                        </Popover.Content>\r\n                                      </Popover>\r\n                                    }\r\n                                  >\r\n                                    <i className=\"feather icon-info text-primary\" style={{ fontSize: 16, cursor: \"pointer\" }}></i>\r\n                                  </OverlayTrigger>\r\n                                </span>\r\n                              )}\r\n                            </div>\r\n                          </span>\r\n                        </ListGroup.Item>\r\n                        <ListGroup.Item>\r\n                          <span style={{ padding: \"0 16px 0 8px\" }}>Entry Date:</span>\r\n                          <span> {moment(row.invoice_date).format(\"DD-MMM-YYYY\")}</span>\r\n                        </ListGroup.Item>\r\n                      </ListGroup>\r\n                    </Card.Body>\r\n                  </Accordion.Collapse>\r\n                </Card>\r\n              ))}\r\n          </Accordion>\r\n        )}\r\n      </div>\r\n\r\n      <Modal size={selectedEntryType === entryTypes.PURCHASE ? \"xl\" : \"lg\"} show={showPreview} backdrop=\"static\" keyboard={true}>\r\n        <Modal.Body className=\"p-0\">\r\n          <button type=\"button\" className=\"btn-icon btn close-btn\" onClick={closeEntryModal}>\r\n            <i className=\"feather icon-x-circle\"></i>\r\n          </button>\r\n          <div className=\"px-4 py-5\">\r\n            <Row>\r\n              <Col className={selectedEntryType === entryTypes.PURCHASE ? \"col-lg-4\" : \"col-lg-6\"}>\r\n                <Preview source={selectedEntry?.file_path} containerStyles={{ backgroundColor: \"#f5f5f5\", padding: 10 }} zoom={true} />\r\n              </Col>\r\n              <Col className={selectedEntryType === entryTypes.PURCHASE ? \"col-lg-8\" : \"col-lg-6\"}>\r\n              {!hidePurchaseCombo &&\r\n                <Row>\r\n                  <Col className={selectedEntryType === entryTypes.PURCHASE ? \"col-lg-6\" : \"col-lg-12\"}>\r\n                    <div className=\"input-group mb-3\">\r\n                      <Select\r\n                        className=\"w-100 form-control-select\"\r\n                        classNamePrefix=\"select\"\r\n                        options={entryTypeList}\r\n                        placeholder=\"Entry type\"\r\n                        isSearchable={false}\r\n                        isDisabled={selectedEntry?.entry_status_id === entryStatus.RECHECK}\r\n                        value={entryTypeList.find((i) => i.value === selectedEntryType)}\r\n                        onChange={(data) => setselectedEntryType(data.value)}\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n                </Row>\r\n}\r\n                <Row>\r\n                  <Col lg={12}>\r\n                    <div className=\"input-group\">\r\n                      {selectedEntryType === entryTypes.SALE && <SalesForm entry={selectedEntry} onSuccess={onEntrySubmit} onShowLoader={setShowLoader} />}\r\n                      {selectedEntryType === entryTypes.EXPENDITURE && <ExpenditureForm entry={selectedEntry} onSuccess={onEntrySubmit} onShowLoader={setShowLoader} />}\r\n                      {selectedEntryType === entryTypes.PURCHASE && <PurchaseForm entry={selectedEntry}  setHideSelectBox={setHidePurchaseCombo} onSuccess={onEntrySubmit} onShowLoader={setShowLoader} />}\r\n                    </div>\r\n                  </Col>\r\n                </Row>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default PendingEntriesWidget;\r\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/checked-entries/widget.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/checker/checked-entries/widget.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/client/summary/widget.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/client/recent-entries/widget.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/client/pending-entries/widget.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/hooks/useOutsideClick.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/layouts/AdminLayout/BottomNav.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/enums/employeeStatus.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/usermanagement/validators/form.js",["1098"],"import React, { useState, useEffect } from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport DatePicker from \"react-datepicker\";\nimport moment from \"moment\";\nimport Select from \"react-select\";\n\nimport { showNotification } from \"../../../services/toasterService\";\nimport { callApi } from \"../../../services/apiService\";\nimport { ApiConstants } from \"../../../config/apiConstants\";\n\nconst UserForm = (props) => {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [countriesList, setCountriesList] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState(\"\");\n  const [join_date, setJoinDate] = useState(null);\n  const [userData, setUserData] = useState(null);\n\n  const UserFormSchema = Yup.object().shape({\n    name: Yup.string().required(\"Please enter Name\"),\n    email: Yup.string()\n      .required(\"Please enter Email \")\n      .email(\"Please enter a valid Email\"),\n    place: Yup.string().required(\"Please enter Place\"),\n    po_box: Yup.string().required(\"Please enter PO Box\"),\n    city: Yup.string().required(\"Please enter City\"),\n    country: Yup.string().required(\"Please select Country\"),\n    whatsappno: Yup.string()\n      .required(\"Please enter Whatsapp No\")\n      .matches(/^[0-9]*$/, \"Please enter a valid phone number\"),\n    mobile: Yup.string().matches(\n      /^[0-9]*$/,\n      \"Please enter a valid mobile number\"\n    ),\n    join_date: Yup.mixed().required(\"Please enter Join Date\"),\n    salary: Yup.string()\n      .required(\"Please enter Monthly Salary\")\n      .matches(/^[0-9]*$/, \"Please enter a valid Salary\"),\n  });\n\n  useEffect(() => {\n    getContries();\n    if (props.isEdit) {\n      getUserData(props?.dataItem?.id);\n    }\n  }, []);\n\n  const onSubmit = (values) => {\n    props.onShowLoader(true);\n    let params = {\n      email: values.email,\n      w_country_code: selectedCountry.phone_code,\n      whatsapp_no: values.whatsappno,\n      name: values.name,\n      country_id: parseInt(values.country),\n      country_code: selectedCountry.phone_code,\n      mobile: values.mobile,\n      join_date: moment(values.join_date).format(\"YYYY-MM-DD\"),\n      salary: values.salary,\n      p_o_box: values.po_box,\n      palce: values.place,\n      city: values.city,\n    };\n\n    props.isEdit\n      ? updateUser({ ...params, user_id: userData?.id })\n      : createUser(params);\n  };\n\n  const createUser = (params) => {\n    callApi(\"post\", ApiConstants.validator.register, params, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 201) {\n          props.onSuccess();\n          showNotification(\"Success\", response.message, \"success\");\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const updateUser = (params) => {\n    callApi(\"post\", ApiConstants.validator.updatebyadmin, params, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 201) {\n          props.onSuccess();\n          showNotification(\"Success\", response.message, \"success\");\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const getContries = () => {\n    props.onShowLoader(true);\n    callApi(\"get\", ApiConstants.lookups.getCountry, {})\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          setCountriesList(\n            response.payload?.map((i) => {\n              return { ...i, value: i.id, label: i.name };\n            })\n          );\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const onSelectCountry = (value) => {\n    setSelectedCountry(value);\n  };\n\n  const getUserData = (user_id) => {\n    props.onShowLoader(true);\n    callApi(\"get\", ApiConstants.user.getuser, { user_id }, true)\n      .then((response) => {\n        if (response && response.status_code === 200) {\n          setUserData(response.payload);\n          onSelectCountry(response.payload?.validator_user?.country);\n          if (response.payload?.validator_user?.join_date)\n            setJoinDate(new Date(response.payload?.validator_user?.join_date));\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n        props.onShowLoader(false);\n      })\n      .catch((error) => {\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n        props.onShowLoader(false);\n      });\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"card shadow-none mb-0 rounded\">\n        <div className=\"card-header\">\n          <h5 className=\"text-primary\">\n            {props.isEdit ? \"Update\" : \"Add\"} Validator\n          </h5>\n        </div>\n        <div className=\"card-body\">\n          <Formik\n            enableReinitialize={true}\n            initialValues={{\n              name: userData?.name ? userData.name : \"\",\n              email: userData?.email ? userData.email : \"\",\n              place: userData?.validator_user?.palce\n                ? userData?.validator_user.palce\n                : \"\",\n              po_box: userData?.validator_user?.p_o_box\n                ? userData?.validator_user.p_o_box\n                : \"\",\n              city: userData?.validator_user?.city\n                ? userData?.validator_user.city\n                : \"\",\n              country: userData?.validator_user?.country_id\n                ? userData?.validator_user.country_id\n                : \"\",\n              whatsappno: userData?.whatsapp_no ? userData.whatsapp_no : \"\",\n              mobile: userData?.validator_user?.mobile\n                ? userData?.validator_user.mobile\n                : \"\",\n              join_date: userData?.validator_user?.join_date\n                ? new Date(userData?.validator_user.join_date)\n                : \"\",\n              salary: userData?.validator_user?.salary\n                ? userData?.validator_user.salary\n                : \"\",\n            }}\n            validationSchema={UserFormSchema}\n            onSubmit={(values) => onSubmit(values)}>\n            {({ errors, handleChange, values }) => (\n              <Form>\n                <Row>\n                  <Col xs={12} xl={6}>\n                    <label>Name</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.name && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Name\"\n                        name=\"name\"\n                      />\n                      <ErrorMessage name=\"name\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Email</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.email && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Email\"\n                        name=\"email\"\n                      />\n                      <ErrorMessage name=\"email\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Place / Street name</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.place && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Place / Street name\"\n                        name=\"place\"\n                      />\n                      <ErrorMessage name=\"place\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>P O Box</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.po_box && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"P O Box\"\n                        name=\"po_box\"\n                      />\n                      <ErrorMessage name=\"po_box\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>City</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.city && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"City\"\n                        name=\"city\"\n                      />\n                      <ErrorMessage name=\"city\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Country</label>\n                    <div className=\"input-group mb-3\">\n                      <Select\n                        className={`w-100 form-control-select ${\n                          errors.country && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        classNamePrefix=\"select\"\n                        value={countriesList.find(\n                          (i) => i.id === values.country\n                        )}\n                        options={countriesList}\n                        placeholder=\"Select Country\"\n                        isSearchable={false}\n                        onChange={(value) => {\n                          onSelectCountry(value);\n                          let event = {\n                            target: {\n                              name: \"country\",\n                              value: value.id,\n                            },\n                          };\n                          handleChange(event);\n                        }}\n                      />\n                      <ErrorMessage name=\"country\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Whatsapp No</label>\n                    <div className=\"input-group mb-3\">\n                      <div className=\"input-group-prepend bg-light\">\n                        <span\n                          className={`input-group-text ${\n                            errors.whatsappno && isSubmitted\n                              ? \"border border-danger\"\n                              : \"\"\n                          }`}\n                          id=\"country-code\"\n                          style={{ fontSize: 14 }}>\n                          {selectedCountry.phone_code}\n                        </span>\n                      </div>\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.whatsappno && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Whatsapp No\"\n                        name=\"whatsappno\"\n                      />\n                      <ErrorMessage name=\"whatsappno\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Mobile Number</label>\n                    <div className=\"input-group mb-3\">\n                      <div className=\"input-group-prepend bg-light\">\n                        <span\n                          className={`input-group-text ${\n                            errors.mobile && isSubmitted\n                              ? \"border border-danger\"\n                              : \"\"\n                          }`}\n                          id=\"country-code\"\n                          style={{ fontSize: 14 }}>\n                          {selectedCountry.phone_code}\n                        </span>\n                      </div>\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.mobile && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Mobile Number\"\n                        name=\"mobile\"\n                      />\n                      <ErrorMessage name=\"mobile\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Joining Date</label>\n                    <div className=\"date-picker-container mb-3\">\n                      <DatePicker\n                        className={`form-control ${\n                          errors.join_date && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholderText=\"Joining Date\"\n                        dateFormat=\"dd/MM/yyyy\"\n                        selected={join_date}\n                        onChange={(value) => {\n                          setJoinDate(value);\n                          let event = {\n                            target: {\n                              name: \"join_date\",\n                              value: value,\n                            },\n                          };\n                          handleChange(event);\n                        }}\n                      />\n                      <i className=\"feather icon-calendar\"></i>\n                      <ErrorMessage name=\"join_date\">\n                        {(msg) => (\n                          <div className=\"invalid-feedback d-block\">{msg}</div>\n                        )}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Monthly Salary</label>\n                    <div className=\"input-group mb-3\">\n                      <div className=\"input-group-prepend bg-light\">\n                        <span\n                          className={`input-group-text ${\n                            errors.salary && isSubmitted\n                              ? \"border border-danger\"\n                              : \"\"\n                          }`}\n                          id=\"country-code\"\n                          style={{ fontSize: 14 }}>\n                          {selectedCountry.currency_code}\n                        </span>\n                      </div>\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.salary && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Monthly Salary\"\n                        name=\"salary\"\n                      />\n                      <ErrorMessage name=\"salary\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                </Row>\n\n                <div className=\"mt-3 text-center\">\n                  <button\n                    type=\"submit\"\n                    style={{ width: 180, fontWeight: \"bold\" }}\n                    className=\"btn btn-primary shadow-2 mt-3\"\n                    onClick={() => setIsSubmitted(true)}>\n                    {props.isEdit ? \"Update\" : \"Create Account\"}\n                  </button>\n                </div>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default UserForm;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/dashboard/client/charts/BarChart.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/usermanagement/admin/form.js",["1099"],"import React, { useState, useEffect } from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport DatePicker from \"react-datepicker\";\nimport moment from \"moment\";\nimport Select from \"react-select\";\n\nimport { showNotification } from \"../../../services/toasterService\";\nimport { callApi } from \"../../../services/apiService\";\nimport { ApiConstants } from \"../../../config/apiConstants\";\n\nconst UserForm = (props) => {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [countriesList, setCountriesList] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState(\"\");\n  const [join_date, setJoinDate] = useState(null);\n  const [userData, setUserData] = useState(null);\n\n  const UserFormSchema = Yup.object().shape({\n    name: Yup.string().required(\"Please enter Name\"),\n    email: Yup.string()\n      .required(\"Please enter Email \")\n      .email(\"Please enter a valid Email\"),\n    place: Yup.string().required(\"Please enter Place\"),\n    po_box: Yup.string().required(\"Please enter PO Box\"),\n    city: Yup.string().required(\"Please enter City\"),\n    country: Yup.string().required(\"Please select Country\"),\n    whatsappno: Yup.string()\n      .required(\"Please enter Whatsapp No\")\n      .matches(/^[0-9]*$/, \"Please enter a valid phone number\"),\n    mobile: Yup.string().matches(\n      /^[0-9]*$/,\n      \"Please enter a valid mobile number\"\n    ),\n    join_date: Yup.mixed().required(\"Please select Join Date\"),\n    salary: Yup.string()\n      .required(\"Please enter Monthly Salary\")\n      .matches(/^[0-9]*$/, \"Please enter a valid Salary\"),\n  });\n\n  useEffect(() => {\n    getContries();\n    if (props.isEdit) {\n      getUserData(props?.dataItem?.id);\n    }\n  }, []);\n\n  const onSubmit = (values) => {\n    props.onShowLoader(true);\n\n    let params = {\n      email: values.email,\n      w_country_code: selectedCountry.phone_code,\n      whatsapp_no: values.whatsappno,\n      name: values.name,\n      country_id: parseInt(values.country),\n      country_code: selectedCountry.phone_code,\n      mobile: values.mobile,\n      join_date: moment(values.join_date).format(\"YYYY-MM-DD\"),\n      salary: values.salary,\n      p_o_box: values.po_box,\n      palce: values.place,\n      city: values.city,\n    };\n\n    props.isEdit\n      ? updateUser({ ...params, user_id: userData?.id })\n      : createUser(params);\n  };\n\n  const createUser = (params) => {\n    callApi(\"post\", ApiConstants.admin.register, params, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 201) {\n          props.onSuccess();\n          showNotification(\"Success\", response.message, \"success\");\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const updateUser = (params) => {\n    callApi(\"post\", ApiConstants.admin.updatebyadmin, params, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 201) {\n          props.onSuccess();\n          showNotification(\"Success\", response.message, \"success\");\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const getContries = () => {\n    props.onShowLoader(true);\n    callApi(\"get\", ApiConstants.lookups.getCountry, {})\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          setCountriesList(\n            response.payload?.map((i) => {\n              return { ...i, value: i.id, label: i.name };\n            })\n          );\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const onSelectCountry = (value) => {\n    setSelectedCountry(value);\n  };\n\n  const getUserData = (user_id) => {\n    props.onShowLoader(true);\n    callApi(\"get\", ApiConstants.user.getuser, { user_id }, true)\n      .then((response) => {\n        if (response && response.status_code === 200) {\n          setUserData(response.payload);\n          onSelectCountry(response.payload?.admin_user?.country);\n          if (response.payload?.admin_user?.join_date)\n            setJoinDate(new Date(response.payload?.admin_user?.join_date));\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n        props.onShowLoader(false);\n      })\n      .catch((error) => {\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n        props.onShowLoader(false);\n      });\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"card shadow-none mb-0 rounded\">\n        <div className=\"card-header\">\n          <h5 className=\"text-primary\">\n            {props.isEdit ? \"Update\" : \"Add\"} Admin User\n          </h5>\n        </div>\n        <div className=\"card-body\">\n          <Formik\n            enableReinitialize={true}\n            initialValues={{\n              name: userData?.name ? userData.name : \"\",\n              email: userData?.email ? userData.email : \"\",\n              place: userData?.admin_user?.palce\n                ? userData?.admin_user.palce\n                : \"\",\n              po_box: userData?.admin_user?.p_o_box\n                ? userData?.admin_user.p_o_box\n                : \"\",\n              city: userData?.admin_user?.city ? userData?.admin_user.city : \"\",\n              country: userData?.admin_user?.country_id\n                ? userData?.admin_user.country_id\n                : \"\",\n              whatsappno: userData?.whatsapp_no ? userData.whatsapp_no : \"\",\n              mobile: userData?.admin_user?.mobile\n                ? userData?.admin_user.mobile\n                : \"\",\n              join_date: userData?.admin_user?.join_date\n                ? new Date(userData?.admin_user.join_date)\n                : \"\",\n              salary: userData?.admin_user?.salary\n                ? userData?.admin_user.salary\n                : \"\",\n            }}\n            validationSchema={UserFormSchema}\n            onSubmit={(values) => onSubmit(values)}>\n            {({ errors, handleChange, values }) => (\n              <Form>\n                <Row>\n                  <Col xs={12} xl={6}>\n                    <label>Name</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.name && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Name\"\n                        name=\"name\"\n                      />\n                      <ErrorMessage name=\"name\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Email</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.email && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Email\"\n                        name=\"email\"\n                      />\n                      <ErrorMessage name=\"email\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Place / Street name</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.place && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Place / Street name\"\n                        name=\"place\"\n                      />\n                      <ErrorMessage name=\"place\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>P O Box</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.po_box && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"P O Box\"\n                        name=\"po_box\"\n                      />\n                      <ErrorMessage name=\"po_box\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>City</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.city && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"City\"\n                        name=\"city\"\n                      />\n                      <ErrorMessage name=\"city\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Country</label>\n                    <div className=\"input-group mb-3\">\n                      <Select\n                        className={`w-100 form-control-select ${\n                          errors.country && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        classNamePrefix=\"select\"\n                        value={countriesList.find(\n                          (i) => i.id === values.country\n                        )}\n                        options={countriesList}\n                        placeholder=\"Select Country\"\n                        isSearchable={false}\n                        onChange={(value) => {\n                          onSelectCountry(value);\n                          let event = {\n                            target: {\n                              name: \"country\",\n                              value: value.id,\n                            },\n                          };\n                          handleChange(event);\n                        }}\n                      />\n                      <ErrorMessage name=\"country\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Whatsapp No</label>\n                    <div className=\"input-group mb-3\">\n                      <div className=\"input-group-prepend bg-light\">\n                        <span\n                          className={`input-group-text ${\n                            errors.whatsappno && isSubmitted\n                              ? \"border border-danger\"\n                              : \"\"\n                          }`}\n                          id=\"country-code\"\n                          style={{ fontSize: 14 }}>\n                          {selectedCountry.phone_code}\n                        </span>\n                      </div>\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.whatsappno && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Whatsapp No\"\n                        name=\"whatsappno\"\n                      />\n                      <ErrorMessage name=\"whatsappno\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Mobile Number</label>\n                    <div className=\"input-group mb-3\">\n                      <div className=\"input-group-prepend bg-light\">\n                        <span\n                          className={`input-group-text ${\n                            errors.mobile && isSubmitted\n                              ? \"border border-danger\"\n                              : \"\"\n                          }`}\n                          id=\"country-code\"\n                          style={{ fontSize: 14 }}>\n                          {selectedCountry.phone_code}\n                        </span>\n                      </div>\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.mobile && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Mobile Number\"\n                        name=\"mobile\"\n                      />\n                      <ErrorMessage name=\"mobile\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Joining Date</label>\n                    <div className=\"date-picker-container mb-3\">\n                      <DatePicker\n                        className={`form-control ${\n                          errors.join_date && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholderText=\"Joining Date\"\n                        dateFormat=\"dd/MM/yyyy\"\n                        selected={join_date}\n                        onChange={(value) => {\n                          setJoinDate(value);\n                          let event = {\n                            target: {\n                              name: \"join_date\",\n                              value: value,\n                            },\n                          };\n                          handleChange(event);\n                        }}\n                      />\n                      <i className=\"feather icon-calendar\"></i>\n                      <ErrorMessage name=\"join_date\">\n                        {(msg) => (\n                          <div className=\"invalid-feedback d-block\">{msg}</div>\n                        )}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Monthly Salary</label>\n                    <div className=\"input-group mb-3\">\n                      <div className=\"input-group-prepend bg-light\">\n                        <span\n                          className={`input-group-text ${\n                            errors.salary && isSubmitted\n                              ? \"border border-danger\"\n                              : \"\"\n                          }`}\n                          id=\"country-code\"\n                          style={{ fontSize: 14 }}>\n                          {selectedCountry.currency_code}\n                        </span>\n                      </div>\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.salary && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Monthly Salary\"\n                        name=\"salary\"\n                      />\n                      <ErrorMessage name=\"salary\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                </Row>\n\n                <div className=\"mt-3 text-center\">\n                  <button\n                    type=\"submit\"\n                    style={{ width: 180, fontWeight: \"bold\" }}\n                    className=\"btn btn-primary shadow-2 mt-3\"\n                    onClick={() => setIsSubmitted(true)}>\n                    {props.isEdit ? \"Update\" : \"Create Account\"}\n                  </button>\n                </div>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default UserForm;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/usermanagement/checkers/form.js",["1100"],"import React, { useState, useEffect } from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport DatePicker from \"react-datepicker\";\nimport moment from \"moment\";\nimport Select from \"react-select\";\n\nimport { showNotification } from \"../../../services/toasterService\";\nimport { callApi } from \"../../../services/apiService\";\nimport { ApiConstants } from \"../../../config/apiConstants\";\n\nconst UserForm = (props) => {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [countriesList, setCountriesList] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState(\"\");\n  const [join_date, setJoinDate] = useState(null);\n  const [validatorsList, setValidatorsList] = useState([]);\n  const [userData, setUserData] = useState(null);\n\n  const UserFormSchema = Yup.object().shape({\n    name: Yup.string().required(\"Please enter Name\"),\n    email: Yup.string()\n      .required(\"Please enter Email \")\n      .email(\"Please enter a valid Email\"),\n    place: Yup.string().required(\"Please enter Place\"),\n    po_box: Yup.string().required(\"Please enter PO Box\"),\n    city: Yup.string().required(\"Please enter City\"),\n    country: Yup.string().required(\"Please select Country\"),\n    whatsappno: Yup.string()\n      .required(\"Please enter Whatsapp No\")\n      .matches(/^[0-9]*$/, \"Please enter a valid phone number\"),\n    mobile: Yup.string().matches(\n      /^[0-9]*$/,\n      \"Please enter a valid mobile number\"\n    ),\n    join_date: Yup.mixed().required(\"Please enter Join Date\"),\n    salary: Yup.string()\n      .required(\"Please enter Monthly Salary\")\n      .matches(/^[0-9]*$/, \"Please enter a valid Salary\"),\n    validatorid: Yup.string().required(\"Please select Validator\"),\n  });\n\n  useEffect(() => {\n    getContries();\n    getValidators();\n    if (props.isEdit) {\n      getUserData(props?.dataItem?.id);\n    }\n  }, []);\n\n  const onSubmit = (values) => {\n    props.onShowLoader(true);\n    let params = {\n      email: values.email,\n      w_country_code: selectedCountry.phone_code,\n      whatsapp_no: values.whatsappno,\n      name: values.name,\n      country_id: parseInt(values.country),\n      country_code: selectedCountry.phone_code,\n      mobile: values.mobile,\n      join_date: moment(values.join_date).format(\"YYYY-MM-DD\"),\n      salary: values.salary,\n      p_o_box: values.po_box,\n      palce: values.place,\n      city: values.city,\n      validator_user_id: values.validatorid,\n      image_id: userData?.profile_image_id,\n    };\n\n    props.isEdit\n      ? updateUser({ ...params, user_id: userData?.id })\n      : createUser(params);\n  };\n\n  const createUser = (params) => {\n    callApi(\"post\", ApiConstants.checker.register, params)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 201) {\n          props.onSuccess();\n          showNotification(\"Success\", response.message, \"success\");\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const updateUser = (params) => {\n    callApi(\"post\", ApiConstants.checker.updatebyadmin, params, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 201) {\n          props.onSuccess();\n          showNotification(\"Success\", response.message, \"success\");\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const getContries = () => {\n    props.onShowLoader(true);\n    callApi(\"get\", ApiConstants.lookups.getCountry, {})\n      .then((response) => {\n        if (response && response.status_code === 200) {\n          setCountriesList(\n            response.payload?.map((i) => {\n              return { ...i, value: i.id, label: i.name };\n            })\n          );\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n        props.onShowLoader(false);\n      })\n      .catch((error) => {\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n        props.onShowLoader(false);\n      });\n  };\n\n  const getValidators = () => {\n    callApi(\"get\", ApiConstants.lookups.getValidators, {})\n      .then((response) => {\n        if (response && response.status_code === 200) {\n          setValidatorsList(\n            response.payload?.map((i) => {\n              return { ...i, value: i.id, label: i.name };\n            })\n          );\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const onSelectCountry = (value) => {\n    setSelectedCountry(value);\n  };\n\n  const getUserData = (user_id) => {\n    props.onShowLoader(true);\n    callApi(\"get\", ApiConstants.user.getuser, { user_id }, true)\n      .then((response) => {\n        if (response && response.status_code === 200) {\n          setUserData(response.payload);\n          onSelectCountry(response.payload?.checker_user?.country);\n          if (response.payload?.checker_user?.join_date)\n            setJoinDate(new Date(response.payload?.checker_user?.join_date));\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n        props.onShowLoader(false);\n      })\n      .catch((error) => {\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n        props.onShowLoader(false);\n      });\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"card shadow-none mb-0 rounded\">\n        <div className=\"card-header\">\n          <h5 className=\"text-primary\">\n            {props.isEdit ? \"Update\" : \"Add\"} Checker\n          </h5>\n        </div>\n        <div className=\"card-body\">\n          <Formik\n            enableReinitialize={true}\n            initialValues={{\n              name: userData?.name ? userData.name : \"\",\n              email: userData?.email ? userData.email : \"\",\n              place: userData?.checker_user?.palce\n                ? userData?.checker_user.palce\n                : \"\",\n              po_box: userData?.checker_user?.p_o_box\n                ? userData?.checker_user.p_o_box\n                : \"\",\n              city: userData?.checker_user?.city\n                ? userData?.checker_user.city\n                : \"\",\n              country: userData?.checker_user?.country_id\n                ? userData?.checker_user.country_id\n                : \"\",\n              whatsappno: userData?.whatsapp_no ? userData.whatsapp_no : \"\",\n              mobile: userData?.checker_user?.mobile\n                ? userData?.checker_user.mobile\n                : \"\",\n              join_date: userData?.checker_user?.join_date\n                ? new Date(userData?.checker_user.join_date)\n                : \"\",\n              salary: userData?.checker_user?.salary\n                ? userData?.checker_user.salary\n                : \"\",\n              validatorid: userData?.checker_user?.validator_user_id\n                ? userData?.checker_user.validator_user_id\n                : \"\",\n            }}\n            validationSchema={UserFormSchema}\n            onSubmit={(values) => onSubmit(values)}>\n            {({ errors, handleChange, values }) => (\n              <Form>\n                <Row>\n                  <Col xs={12} xl={6}>\n                    <label>Name</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.name && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Name\"\n                        name=\"name\"\n                      />\n                      <ErrorMessage name=\"name\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Email</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.email && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Email\"\n                        name=\"email\"\n                      />\n                      <ErrorMessage name=\"email\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Place / Street name</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.place && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Place / Street name\"\n                        name=\"place\"\n                      />\n                      <ErrorMessage name=\"place\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>P O Box</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.po_box && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"P O Box\"\n                        name=\"po_box\"\n                      />\n                      <ErrorMessage name=\"po_box\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>City</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.city && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"City\"\n                        name=\"city\"\n                      />\n                      <ErrorMessage name=\"city\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Country</label>\n                    <div className=\"input-group mb-3\">\n                      <Select\n                        className={`w-100 form-control-select ${\n                          errors.country && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        classNamePrefix=\"select\"\n                        value={countriesList.find(\n                          (i) => i.id === values.country\n                        )}\n                        options={countriesList}\n                        placeholder=\"Select Country\"\n                        isSearchable={false}\n                        onChange={(value) => {\n                          onSelectCountry(value);\n                          let event = {\n                            target: {\n                              name: \"country\",\n                              value: value.id,\n                            },\n                          };\n                          handleChange(event);\n                        }}\n                      />\n                      <ErrorMessage name=\"country\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Whatsapp No</label>\n                    <div className=\"input-group mb-3\">\n                      <div className=\"input-group-prepend bg-light\">\n                        <span\n                          className={`input-group-text ${\n                            errors.whatsappno && isSubmitted\n                              ? \"border border-danger\"\n                              : \"\"\n                          }`}\n                          id=\"country-code\"\n                          style={{ fontSize: 14 }}>\n                          {selectedCountry.phone_code}\n                        </span>\n                      </div>\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.whatsappno && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Whatsapp No\"\n                        name=\"whatsappno\"\n                      />\n                      <ErrorMessage name=\"whatsappno\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Mobile Number</label>\n                    <div className=\"input-group mb-3\">\n                      <div className=\"input-group-prepend bg-light\">\n                        <span\n                          className={`input-group-text ${\n                            errors.mobile && isSubmitted\n                              ? \"border border-danger\"\n                              : \"\"\n                          }`}\n                          id=\"country-code\"\n                          style={{ fontSize: 14 }}>\n                          {selectedCountry.phone_code}\n                        </span>\n                      </div>\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.mobile && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Mobile Number\"\n                        name=\"mobile\"\n                      />\n                      <ErrorMessage name=\"mobile\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Joining Date</label>\n                    <div className=\"date-picker-container mb-3\">\n                      <DatePicker\n                        className={`form-control ${\n                          errors.join_date && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholderText=\"Joining Date\"\n                        dateFormat=\"dd/MM/yyyy\"\n                        selected={join_date}\n                        onChange={(value) => {\n                          setJoinDate(value);\n                          let event = {\n                            target: {\n                              name: \"join_date\",\n                              value: value,\n                            },\n                          };\n                          handleChange(event);\n                        }}\n                      />\n                      <i className=\"feather icon-calendar\"></i>\n                      <ErrorMessage name=\"join_date\">\n                        {(msg) => (\n                          <div className=\"invalid-feedback d-block\">{msg}</div>\n                        )}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Monthly Salary</label>\n                    <div className=\"input-group mb-3\">\n                      <div className=\"input-group-prepend bg-light\">\n                        <span\n                          className={`input-group-text ${\n                            errors.salary && isSubmitted\n                              ? \"border border-danger\"\n                              : \"\"\n                          }`}\n                          id=\"country-code\"\n                          style={{ fontSize: 14 }}>\n                          {selectedCountry.currency_code}\n                        </span>\n                      </div>\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.salary && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Monthly Salary\"\n                        name=\"salary\"\n                      />\n                      <ErrorMessage name=\"salary\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Validator</label>\n                    <div className=\"input-group mb-3\">\n                      <Select\n                        className={`w-100 form-control-select ${\n                          errors.validatorid && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        classNamePrefix=\"select\"\n                        value={validatorsList.find(\n                          (i) => i.id === values.validatorid\n                        )}\n                        options={validatorsList}\n                        placeholder=\"Select Validator\"\n                        isSearchable={false}\n                        onChange={(value) => {\n                          let event = {\n                            target: {\n                              name: \"validatorid\",\n                              value: value.id,\n                            },\n                          };\n                          handleChange(event);\n                        }}\n                      />\n                      <ErrorMessage name=\"validatorid\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                </Row>\n\n                <div className=\"mt-3 text-center\">\n                  <button\n                    type=\"submit\"\n                    style={{ width: 180, fontWeight: \"bold\" }}\n                    className=\"btn btn-primary shadow-2 mt-3\"\n                    onClick={() => setIsSubmitted(true)}>\n                    {props.isEdit ? \"Update\" : \"Create Account\"}\n                  </button>\n                </div>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default UserForm;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/profile/PlanHistory.js",["1101","1102","1103","1104"],"import React, { useState, useEffect } from \"react\";\nimport { Row, Col, Card } from \"react-bootstrap\";\nimport { Grid, GridColumn as Column } from \"@progress/kendo-react-grid\";\nimport { process } from \"@progress/kendo-data-query\";\nimport { PDFExport } from \"@progress/kendo-react-pdf\";\nimport moment from \"moment\";\n\nimport { callApi } from \"../../services/apiService\";\nimport { showNotification } from \"../../services/toasterService\";\nimport { ApiConstants } from \"../../config/apiConstants\";\nimport Invoice from \"../../components/Invoice\";\n\nconst PlanHistory = ({ userId, onShowLoader, userData }) => {\n  const [historyData, setHistoryData] = useState([]);\n  const [invoiceData, setInvoiceData] = useState(null);\n  const [gridState, setGridState] = useState({\n    skip: 0,\n    take: 5,\n  });\n  const [gridData, setGridData] = useState(null);\n\n  const pdfExportComponent = React.useRef(null);\n\n  const pagerSettings = {\n    buttonCount: 5,\n    info: true,\n    type: \"numeric\",\n    pageSizes: true,\n    previousNext: true,\n  };\n\n  useEffect(() => {\n    getPlanHistory();\n  }, []);\n\n  useEffect(() => {\n    loadGridData();\n  }, [historyData, gridState]);\n\n  const loadGridData = () => {\n    let updatedData = process(historyData, gridState);\n    setGridData(updatedData);\n  };\n\n  const pageChange = (event) => {\n    let updatedState = {\n      ...gridState,\n      skip: event.page.skip,\n      take: event.page.take,\n    };\n    setGridState(updatedState);\n  };\n\n  const getPlanHistory = () => {\n    onShowLoader(true);\n    callApi(\"get\", ApiConstants.plans.history, { user_id: userId })\n      .then((response) => {\n        onShowLoader(false);\n        if (response && response.status_code === 200) {\n          setHistoryData(response.payload);\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const downloadInvoice = (event, dataItem) => {\n    event.preventDefault();\n    onShowLoader(true);\n    setInvoiceData(dataItem);\n    setTimeout(() => {\n      if (pdfExportComponent.current) {\n        pdfExportComponent.current.save();\n      }\n      onShowLoader(false);\n    }, 500);\n  };\n\n  return (\n    <React.Fragment>\n      <Row>\n        <Col xl={12}>\n          <Card className=\"rounded\">\n            <Card.Header>\n              <h5 className=\"text-primary\">Payment History</h5>\n            </Card.Header>\n            <Card.Body className=\"p-4\">\n              <Grid\n                data={gridData}\n                skip={gridState.skip}\n                pageable={true}\n                pageSize={gridState.take}\n                pageable={pagerSettings}\n                onPageChange={pageChange}>\n                <Column\n                  field=\"id\"\n                  title=\"#\"\n                  width=\"60px\"\n                  filterable={false}\n                  cell={(props) => <td>{props.dataIndex + 1}</td>}\n                />\n                <Column\n                  field=\"plan_name\"\n                  width=\"180\"\n                  title=\"Plan Name\"\n                  cell={(props) => <td>VATZ - {props.dataItem.plan_name}</td>}\n                />\n                <Column field=\"ref\" width=\"140\" title=\"Reference\" />\n                <Column\n                  field=\"payment_date\"\n                  width=\"150\"\n                  title=\"Payment Date\"\n                  cell={(props) => (\n                    <td>\n                      <div>\n                        {moment(props.dataItem.payment_date).format(\n                          \"DD - MMM - YYYY\"\n                        )}\n                      </div>\n                    </td>\n                  )}\n                />\n                <Column\n                  field=\"from\"\n                  width=\"150\"\n                  title=\"From Date\"\n                  cell={(props) => (\n                    <td>\n                      <div>\n                        {moment(props.dataItem.from).format(\"DD - MMM - YYYY\")}\n                      </div>\n                    </td>\n                  )}\n                />\n                <Column\n                  field=\"to\"\n                  width=\"150\"\n                  title=\"To Date\"\n                  cell={(props) => (\n                    <td>\n                      <div>\n                        {moment(props.dataItem.to).format(\"DD - MMM - YYYY\")}\n                      </div>\n                    </td>\n                  )}\n                />\n                <Column\n                  field=\"payment_amount\"\n                  width=\"150\"\n                  title=\"Amount\"\n                  cell={(props) => (\n                    <td>\n                      <div>\n                        {props.dataItem.payment_currency}{\" \"}\n                        {props.dataItem.payment_amount}\n                      </div>\n                    </td>\n                  )}\n                />\n                <Column field=\"payment_type\" width=\"140\" title=\"Payment Type\" />\n                <Column\n                  field=\"payment_date\"\n                  width=\"160\"\n                  title=\"Invoice number\"\n                  cell={(props) => (\n                    <td>\n                      <div>\n                        VATZ-\n                        {moment(props.dataItem.payment_date).format(\"YYYY-MM-\")}\n                        {props.dataItem.id}\n                      </div>\n                    </td>\n                  )}\n                />\n                <Column\n                  field=\"action\"\n                  width=\"120\"\n                  title=\" \"\n                  cell={(props) => (\n                    <td>\n                      <a\n                        href=\"#\"\n                        className=\"text-primary\"\n                        onClick={(e) => downloadInvoice(e, props.dataItem)}>\n                        <i className=\"feather icon-download\" /> Download\n                      </a>\n                    </td>\n                  )}\n                />\n              </Grid>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n      {invoiceData && (\n        <div\n          style={{\n            position: \"absolute\",\n            left: \"-10000px\",\n            top: 0,\n          }}>\n          <PDFExport\n            ref={pdfExportComponent}\n            paperSize=\"A4\"\n            margin={30}\n            fileName={`TaxInvoice`}\n            author=\"VatzApp\">\n            <Invoice data={invoiceData} userData={userData} />\n          </PDFExport>\n        </div>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default PlanHistory;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/profile/forms/checkerForm.js",["1105"],"import React, { useState, useEffect } from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport Select from \"react-select\";\n\nimport { showNotification } from \"../../../services/toasterService\";\nimport { CONFIG } from \"../../../config/constant\";\nimport { callApi, callUploadApi } from \"../../../services/apiService\";\nimport { ApiConstants } from \"../../../config/apiConstants\";\nimport avatar1 from \"../../../assets/images/icons/company.png\";\n\nconst CheckerForm = (props) => {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [selectedCountry, setSelectedCountry] = useState(\"\");\n  const [countriesList, setCountriesList] = useState([]);\n  const [selectedDisplayPic, setSelectedDisplayPic] = useState(null);\n  const [previewImg, setPreviewImg] = useState(null);\n  const [dpErrors, setDpErrors] = useState(\"\");\n\n  const { userInfo } = props;\n\n  const FILE_SIZE = CONFIG.MAX_UPLOAD_SIZE;\n  const SUPPORTED_FORMATS = [\"jpg\", \"jpeg\", \"png\"];\n\n  const UserFormSchema = Yup.object().shape({\n    name: Yup.string().required(\"Please enter Name\"),\n    email: Yup.string()\n      .required(\"Please enter Email \")\n      .email(\"Please enter a valid Email\"),\n    place: Yup.string().required(\"Please enter Place\"),\n    po_box: Yup.string().required(\"Please enter PO Box\"),\n    city: Yup.string().required(\"Please enter City\"),\n    country: Yup.string().required(\"Please select Country\"),\n    whatsappno: Yup.string()\n      .required(\"Please enter Whatsapp No\")\n      .matches(/^[0-9]*$/, \"Please enter a valid phone number\"),\n    mobile: Yup.string().matches(\n      /^[0-9]*$/,\n      \"Please enter a valid mobile number\"\n    ),\n  });\n\n  useEffect(() => {\n    getContries();\n    onSelectCountry(userInfo?.checker_user?.country);\n  }, []);\n\n  const uploadFiles = (data) =>\n    new Promise((resolve, reject) => {\n      let formData = new FormData();\n      formData.append(\"file\", data);\n\n      return callUploadApi(formData)\n        .then((response) => {\n          if (response.status_code === 201) resolve(response);\n          else {\n            reject(response);\n            showNotification(\"Error\", response.message, \"error\");\n          }\n        })\n        .catch((error) => {\n          reject(error);\n          showNotification(\"Error\", \"File upload failed\", \"error\");\n        });\n    });\n\n  const onSubmit = (values) => {\n    props.onShowLoader(true);\n    let params = {\n      country_code: selectedCountry.phone_code,\n      mobile: values.mobile,\n      p_o_box: values.po_box,\n      palce: values.place,\n      city: values.city,\n      image_id: 0,\n    };\n    if (selectedDisplayPic) {\n      uploadFiles(selectedDisplayPic)\n        .then((response) => {\n          params.image_id = response.payload.file_id;\n          updateProfile(params);\n        })\n        .catch((error) => {\n          props.onShowLoader(false);\n        });\n    } else {\n      updateProfile(params);\n    }\n  };\n\n  const updateProfile = (params) => {\n    callApi(\"post\", ApiConstants.checker.update, params, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 201) {\n          props.onSuccess();\n          showNotification(\"Success\", response.message, \"success\");\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const onSelectCountry = (value) => {\n    setSelectedCountry(value);\n  };\n\n  const onFileChange = (event) => {\n    let file = event.target.files[0];\n    if (file) {\n      let regex = /(?:\\.([^.]+))?$/;\n      let ext = regex.exec(file.name)[1];\n\n      if (file.size >= FILE_SIZE) {\n        setDpErrors(\"Exceeds maximum file size (Max 50MB)\");\n        return;\n      }\n\n      if (!SUPPORTED_FORMATS.includes(ext?.toLowerCase())) {\n        setDpErrors(\"Unsupported Format\");\n        return;\n      }\n\n      let reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onloadend = (e) => {\n        setPreviewImg(reader.result);\n        setSelectedDisplayPic(file);\n      };\n      setDpErrors(\"\");\n    }\n  };\n\n  const getContries = () => {\n    props.onShowLoader(true);\n    callApi(\"get\", ApiConstants.lookups.getCountry, {})\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          setCountriesList(\n            response.payload?.map((i) => {\n              return { ...i, value: i.id, label: i.name };\n            })\n          );\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"card shadow-none mb-0 rounded\">\n        <div className=\"card-header\">\n          <h5 className=\"text-primary\">Edit Profile</h5>\n        </div>\n        <div className=\"card-body mx-4\">\n          <Formik\n            enableReinitialize={true}\n            initialValues={{\n              email: userInfo?.email ? userInfo.email : \"\",\n              name: userInfo?.name ? userInfo.name : \"\",\n              place: userInfo.checker_user?.palce\n                ? userInfo.checker_user.palce\n                : \"\",\n              po_box: userInfo.checker_user.p_o_box\n                ? userInfo.checker_user.p_o_box\n                : \"\",\n              city: userInfo.checker_user.city\n                ? userInfo.checker_user.city\n                : \"\",\n              country: userInfo.checker_user.country_id\n                ? userInfo.checker_user.country_id\n                : \"\",\n              mobile: userInfo.checker_user.mobile\n                ? userInfo.checker_user.mobile\n                : \"\",\n              whatsappno: userInfo.whatsapp_no ? userInfo.whatsapp_no : \"\",\n            }}\n            validationSchema={UserFormSchema}\n            onSubmit={(values) => onSubmit(values)}>\n            {({ errors, handleChange, values }) => (\n              <Form>\n                <Row>\n                  <Col xs={12}>\n                    <div className=\"mb-4 d-flex justify-content-center align-items-center\">\n                      <div\n                        className=\"profile-avatr\"\n                        style={{ width: 85, height: 85, position: \"relative\" }}>\n                        {selectedDisplayPic ? (\n                          <img\n                            src={previewImg}\n                            alt=\"user\"\n                            className=\"display_pic\"\n                          />\n                        ) : userInfo?.profile_image ? (\n                          <img\n                            src={\n                              CONFIG.API_BASE_URL +\n                              ApiConstants.file.view +\n                              \"?file_name=\" +\n                              userInfo?.profile_image.file_path\n                            }\n                            alt=\"user\"\n                            className=\"display_pic\"\n                          />\n                        ) : (\n                          <img src={avatar1} alt=\"user\" />\n                        )}\n                        <input\n                          type=\"file\"\n                          id=\"display-pic-input\"\n                          accept=\"image/jpg, image/jpeg, image/png\"\n                          onChange={onFileChange}\n                        />\n                        <label htmlFor=\"display-pic-input\">\n                          <span className=\"edit-icon\">\n                            <i className=\"feather icon-camera\" />\n                          </span>\n                        </label>\n                        <div className=\"dp-error-container\">{dpErrors}</div>\n                      </div>\n                      <div className=\"d-inline-block ml-3\">\n                        <h6>{userInfo?.name}</h6>\n                        <p className=\"m-b-0\">\n                          ID: VATZ{(\"000000\" + userInfo?.id).slice(-6)}\n                        </p>\n                      </div>\n                    </div>\n                  </Col>\n                </Row>\n                <Row>\n                  <Col xs={12} xl={6}>\n                    <label>Name</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.name && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Name\"\n                        name=\"name\"\n                        disabled\n                      />\n                      <ErrorMessage name=\"name\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Email</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.email && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Email\"\n                        name=\"email\"\n                        disabled\n                      />\n                      <ErrorMessage name=\"email\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Place / Street name</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.place && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Place / Street name\"\n                        name=\"place\"\n                      />\n                      <ErrorMessage name=\"place\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>P O Box</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.po_box && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"P O Box\"\n                        name=\"po_box\"\n                      />\n                      <ErrorMessage name=\"po_box\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>City</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.city && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"City\"\n                        name=\"city\"\n                      />\n                      <ErrorMessage name=\"city\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Country</label>\n                    <div className=\"input-group mb-3\">\n                      <Select\n                        className={`w-100 form-control-select ${\n                          errors.country && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        classNamePrefix=\"select\"\n                        options={countriesList}\n                        value={countriesList.find(\n                          (i) => i.id === values.country\n                        )}\n                        placeholder=\"Select Country\"\n                        isSearchable={false}\n                        isDisabled\n                        onChange={(value) => {\n                          onSelectCountry(value);\n                          let event = {\n                            target: {\n                              name: \"country\",\n                              value: value.id,\n                            },\n                          };\n                          handleChange(event);\n                        }}\n                      />\n                      <ErrorMessage name=\"country\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Whatsapp Number</label>\n\n                    <div className=\"input-group mb-3\">\n                      <div className=\"input-group-prepend bg-light\">\n                        <span\n                          className={`input-group-text ${\n                            errors.whatsappno && isSubmitted\n                              ? \"border border-danger\"\n                              : \"\"\n                          }`}\n                          id=\"country-code\"\n                          style={{ fontSize: 14 }}>\n                          {selectedCountry.phone_code}\n                        </span>\n                      </div>\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.whatsappno && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Whatsapp Number\"\n                        name=\"whatsappno\"\n                        disabled\n                      />\n                      <ErrorMessage name=\"whatsappno\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Mobile Number</label>\n                    <div className=\"input-group mb-3\">\n                      <div className=\"input-group-prepend bg-light\">\n                        <span\n                          className={`input-group-text ${\n                            errors.mobile && isSubmitted\n                              ? \"border border-danger\"\n                              : \"\"\n                          }`}\n                          id=\"country-code\"\n                          style={{ fontSize: 14 }}>\n                          {selectedCountry.phone_code}\n                        </span>\n                      </div>\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.mobile && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Mobile Number\"\n                        name=\"mobile\"\n                      />\n                      <ErrorMessage name=\"mobile\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                </Row>\n\n                <div className=\"mt-3 text-center\">\n                  <button\n                    type=\"submit\"\n                    style={{ width: 180, fontWeight: \"bold\" }}\n                    className=\"btn btn-primary shadow-2 mt-3\"\n                    onClick={() => setIsSubmitted(true)}>\n                    Update\n                  </button>\n                </div>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default CheckerForm;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/profile/forms/validatorForm.js",["1106"],"import React, { useState, useEffect } from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport Select from \"react-select\";\n\nimport { showNotification } from \"../../../services/toasterService\";\nimport { CONFIG } from \"../../../config/constant\";\nimport { callApi, callUploadApi } from \"../../../services/apiService\";\nimport { ApiConstants } from \"../../../config/apiConstants\";\nimport avatar1 from \"../../../assets/images/icons/company.png\";\n\nconst ValidatorForm = (props) => {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [selectedCountry, setSelectedCountry] = useState(\"\");\n  const [countriesList, setCountriesList] = useState([]);\n  const [selectedDisplayPic, setSelectedDisplayPic] = useState(null);\n  const [previewImg, setPreviewImg] = useState(null);\n  const [dpErrors, setDpErrors] = useState(\"\");\n\n  const { userInfo } = props;\n\n  const FILE_SIZE = CONFIG.MAX_UPLOAD_SIZE;\n  const SUPPORTED_FORMATS = [\"jpg\", \"jpeg\", \"png\"];\n\n  const UserFormSchema = Yup.object().shape({\n    name: Yup.string().required(\"Please enter Name\"),\n    email: Yup.string()\n      .required(\"Please enter Email \")\n      .email(\"Please enter a valid Email\"),\n    place: Yup.string().required(\"Please enter Place\"),\n    po_box: Yup.string().required(\"Please enter PO Box\"),\n    city: Yup.string().required(\"Please enter City\"),\n    country: Yup.string().required(\"Please select Country\"),\n    whatsappno: Yup.string()\n      .required(\"Please enter Whatsapp No\")\n      .matches(/^[0-9]*$/, \"Please enter a valid phone number\"),\n    mobile: Yup.string().matches(\n      /^[0-9]*$/,\n      \"Please enter a valid mobile number\"\n    ),\n  });\n\n  useEffect(() => {\n    getContries();\n    onSelectCountry(userInfo?.validator_user?.country);\n  }, []);\n\n  const uploadFiles = (data) =>\n    new Promise((resolve, reject) => {\n      let formData = new FormData();\n      formData.append(\"file\", data);\n\n      return callUploadApi(formData)\n        .then((response) => {\n          if (response.status_code === 201) resolve(response);\n          else {\n            reject(response);\n            showNotification(\"Error\", response.message, \"error\");\n          }\n        })\n        .catch((error) => {\n          reject(error);\n          showNotification(\"Error\", \"File upload failed\", \"error\");\n        });\n    });\n\n  const onSubmit = (values) => {\n    props.onShowLoader(true);\n    let params = {\n      country_code: selectedCountry.phone_code,\n      mobile: values.mobile,\n      p_o_box: values.po_box,\n      palce: values.place,\n      city: values.city,\n      image_id: 0,\n    };\n    if (selectedDisplayPic) {\n      uploadFiles(selectedDisplayPic)\n        .then((response) => {\n          params.image_id = response.payload.file_id;\n          updateProfile(params);\n        })\n        .catch((error) => {\n          props.onShowLoader(false);\n        });\n    } else {\n      updateProfile(params);\n    }\n  };\n\n  const updateProfile = (params) => {\n    callApi(\"post\", ApiConstants.validator.update, params, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 201) {\n          props.onSuccess();\n          showNotification(\"Success\", response.message, \"success\");\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const onSelectCountry = (value) => {\n    setSelectedCountry(value);\n  };\n\n  const onFileChange = (event) => {\n    let file = event.target.files[0];\n    if (file) {\n      let regex = /(?:\\.([^.]+))?$/;\n      let ext = regex.exec(file.name)[1];\n\n      if (file.size >= FILE_SIZE) {\n        setDpErrors(\"Exceeds maximum file size (Max 50MB)\");\n        return;\n      }\n\n      if (!SUPPORTED_FORMATS.includes(ext?.toLowerCase())) {\n        setDpErrors(\"Unsupported Format\");\n        return;\n      }\n\n      let reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onloadend = (e) => {\n        setPreviewImg(reader.result);\n        setSelectedDisplayPic(file);\n      };\n      setDpErrors(\"\");\n    }\n  };\n\n  const getContries = () => {\n    props.onShowLoader(true);\n    callApi(\"get\", ApiConstants.lookups.getCountry, {})\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          setCountriesList(\n            response.payload?.map((i) => {\n              return { ...i, value: i.id, label: i.name };\n            })\n          );\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"card shadow-none mb-0 rounded\">\n        <div className=\"card-header\">\n          <h5 className=\"text-primary\">Edit Profile</h5>\n        </div>\n        <div className=\"card-body mx-4\">\n          <Formik\n            enableReinitialize={true}\n            initialValues={{\n              email: userInfo?.email ? userInfo.email : \"\",\n              name: userInfo?.name ? userInfo.name : \"\",\n              place: userInfo.validator_user?.palce\n                ? userInfo.validator_user.palce\n                : \"\",\n              po_box: userInfo.validator_user.p_o_box\n                ? userInfo.validator_user.p_o_box\n                : \"\",\n              city: userInfo.validator_user.city\n                ? userInfo.validator_user.city\n                : \"\",\n              country: userInfo.validator_user.country_id\n                ? userInfo.validator_user.country_id\n                : \"\",\n              mobile: userInfo.validator_user.mobile\n                ? userInfo.validator_user.mobile\n                : \"\",\n              whatsappno: userInfo.whatsapp_no ? userInfo.whatsapp_no : \"\",\n            }}\n            validationSchema={UserFormSchema}\n            onSubmit={(values) => onSubmit(values)}>\n            {({ errors, handleChange, values }) => (\n              <Form>\n                <Row>\n                  <Col xs={12}>\n                    <div className=\"mb-4 d-flex justify-content-center align-items-center\">\n                      <div\n                        className=\"profile-avatr\"\n                        style={{ width: 85, height: 85, position: \"relative\" }}>\n                        {selectedDisplayPic ? (\n                          <img\n                            src={previewImg}\n                            alt=\"user\"\n                            className=\"display_pic\"\n                          />\n                        ) : userInfo?.profile_image ? (\n                          <img\n                            src={\n                              CONFIG.API_BASE_URL +\n                              ApiConstants.file.view +\n                              \"?file_name=\" +\n                              userInfo?.profile_image.file_path\n                            }\n                            alt=\"user\"\n                            className=\"display_pic\"\n                          />\n                        ) : (\n                          <img src={avatar1} alt=\"user\" />\n                        )}\n                        <input\n                          type=\"file\"\n                          id=\"display-pic-input\"\n                          accept=\"image/jpg, image/jpeg, image/png\"\n                          onChange={onFileChange}\n                        />\n                        <label htmlFor=\"display-pic-input\">\n                          <span className=\"edit-icon\">\n                            <i className=\"feather icon-camera\" />\n                          </span>\n                        </label>\n                        <div className=\"dp-error-container\">{dpErrors}</div>\n                      </div>\n                      <div className=\"d-inline-block ml-3\">\n                        <h6>{userInfo?.name}</h6>\n                        <p className=\"m-b-0\">\n                          ID: VATZ{(\"000000\" + userInfo?.id).slice(-6)}\n                        </p>\n                      </div>\n                    </div>\n                  </Col>\n                </Row>\n                <Row>\n                  <Col xs={12} xl={6}>\n                    <label>Name</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.name && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Name\"\n                        name=\"name\"\n                        disabled\n                      />\n                      <ErrorMessage name=\"name\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Email</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.email && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Email\"\n                        name=\"email\"\n                        disabled\n                      />\n                      <ErrorMessage name=\"email\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Place / Street name</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.place && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Place / Street name\"\n                        name=\"place\"\n                      />\n                      <ErrorMessage name=\"place\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>P O Box</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.po_box && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"P O Box\"\n                        name=\"po_box\"\n                      />\n                      <ErrorMessage name=\"po_box\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>City</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.city && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"City\"\n                        name=\"city\"\n                      />\n                      <ErrorMessage name=\"city\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Country</label>\n                    <div className=\"input-group mb-3\">\n                      <Select\n                        className={`w-100 form-control-select ${\n                          errors.country && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        classNamePrefix=\"select\"\n                        options={countriesList}\n                        value={countriesList.find(\n                          (i) => i.id === values.country\n                        )}\n                        placeholder=\"Select Country\"\n                        isSearchable={false}\n                        isDisabled\n                        onChange={(value) => {\n                          onSelectCountry(value);\n                          let event = {\n                            target: {\n                              name: \"country\",\n                              value: value.id,\n                            },\n                          };\n                          handleChange(event);\n                        }}\n                      />\n                      <ErrorMessage name=\"country\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Whatsapp Number</label>\n\n                    <div className=\"input-group mb-3\">\n                      <div className=\"input-group-prepend bg-light\">\n                        <span\n                          className={`input-group-text ${\n                            errors.whatsappno && isSubmitted\n                              ? \"border border-danger\"\n                              : \"\"\n                          }`}\n                          id=\"country-code\"\n                          style={{ fontSize: 14 }}>\n                          {selectedCountry.phone_code}\n                        </span>\n                      </div>\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.whatsappno && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Whatsapp Number\"\n                        name=\"whatsappno\"\n                        disabled\n                      />\n                      <ErrorMessage name=\"whatsappno\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Mobile Number</label>\n                    <div className=\"input-group mb-3\">\n                      <div className=\"input-group-prepend bg-light\">\n                        <span\n                          className={`input-group-text ${\n                            errors.mobile && isSubmitted\n                              ? \"border border-danger\"\n                              : \"\"\n                          }`}\n                          id=\"country-code\"\n                          style={{ fontSize: 14 }}>\n                          {selectedCountry.phone_code}\n                        </span>\n                      </div>\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.mobile && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Mobile Number\"\n                        name=\"mobile\"\n                      />\n                      <ErrorMessage name=\"mobile\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                </Row>\n\n                <div className=\"mt-3 text-center\">\n                  <button\n                    type=\"submit\"\n                    style={{ width: 180, fontWeight: \"bold\" }}\n                    className=\"btn btn-primary shadow-2 mt-3\"\n                    onClick={() => setIsSubmitted(true)}>\n                    Update\n                  </button>\n                </div>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default ValidatorForm;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/profile/forms/clientForm.js",["1107"],"import React, { useState, useEffect } from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport Select from \"react-select\";\n\nimport { showNotification } from \"../../../services/toasterService\";\nimport { CONFIG } from \"../../../config/constant\";\nimport { callApi, callUploadApi } from \"../../../services/apiService\";\nimport { ApiConstants } from \"../../../config/apiConstants\";\nimport avatar1 from \"../../../assets/images/icons/company.png\";\n\nconst ClientForm = (props) => {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [selectedCountry, setSelectedCountry] = useState(\"\");\n  const [countriesList, setCountriesList] = useState([]);\n  const [regionList, setRegionList] = useState([]);\n  const [selectedDisplayPic, setSelectedDisplayPic] = useState(null);\n  const [previewImg, setPreviewImg] = useState(null);\n  const [dpErrors, setDpErrors] = useState(\"\");\n\n  const { userInfo } = props;\n\n  const FILE_SIZE = CONFIG.MAX_UPLOAD_SIZE;\n  const SUPPORTED_FORMATS = [\n    \"pdf\",\n    \"jpg\",\n    \"jpeg\",\n    \"png\",\n    \"doc\",\n    \"docx\",\n    \"jfif\",\n    \"gif\",\n  ];\n\n  const UserFormSchema = Yup.object().shape({\n    name: Yup.string().required(\"Please enter Name\"),\n    email: Yup.string()\n      .required(\"Please enter Email \")\n      .email(\"Please enter a valid Email\"),\n    buildingName: Yup.string().required(\"Please enter Building Name\"),\n    region: Yup.string().required(\"Please select Region\"),\n    place: Yup.string().required(\"Please enter Place\"),\n    po_box: Yup.string().required(\"Please enter PO Box\"),\n    city: Yup.string().required(\"Please enter City\"),\n    country: Yup.string().required(\"Please select Country\"),\n    whatsappno: Yup.string()\n      .required(\"Please enter Whatsapp No\")\n      .matches(/^[0-9]*$/, \"Please enter a valid phone number\"),\n    landphone: Yup.string().matches(\n      /^[0-9]*$/,\n      \"Please enter a valid phone number\"\n    ),\n    mobile: Yup.string().matches(\n      /^[0-9]*$/,\n      \"Please enter a valid mobile number\"\n    ),\n    tradeLicenseNumber: Yup.string().required(\n      \"Please enter Trade License Number\"\n    ),\n    tradeFile: Yup.mixed()\n      .test(\"fileSize\", \"Exceeds maximum file size (Max 50MB)\", (value) => {\n        if (value) {\n          return value.size <= FILE_SIZE;\n        }\n        return true;\n      })\n      .test(\"fileFormat\", \"Unsupported Format\", (value) => {\n        if (value) {\n          let regex = /(?:\\.([^.]+))?$/;\n          let ext = regex.exec(value.name)[1];\n          return SUPPORTED_FORMATS.includes(ext?.toLowerCase());\n        }\n        return true;\n      }),\n    contact_person: Yup.string().required(\"Please enter Contact Person name\"),\n    cp_mobile: Yup.string()\n      .required(\"Please enter Contact Person number\")\n      .matches(/^[0-9]*$/, \"Please enter a valid mobile number\"),\n    ftaEmail: Yup.string().email(\"Please enter a valid FTA Email\"),\n    ftaPassword: Yup.string(),\n    trnNumber: Yup.string().required(\"Please enter TRN Number\"),\n    trnFile: Yup.mixed()\n      .test(\"fileSize\", \"Exceeds maximum file size (Max 50MB)\", (value) => {\n        if (value) {\n          return value.size <= FILE_SIZE;\n        }\n        return true;\n      })\n      .test(\"fileFormat\", \"Unsupported Format\", (value) => {\n        if (value) {\n          let regex = /(?:\\.([^.]+))?$/;\n          let ext = regex.exec(value.name)[1];\n          return SUPPORTED_FORMATS.includes(ext?.toLowerCase());\n        }\n        return true;\n      }),\n  });\n\n  useEffect(() => {\n    getContries();\n  }, []);\n\n  const uploadFiles = (data) =>\n    new Promise((resolve, reject) => {\n      let formData = new FormData();\n      formData.append(\"file\", data);\n\n      return callUploadApi(formData)\n        .then((response) => {\n          if (response.status_code === 201) resolve(response);\n          else {\n            reject(response);\n            showNotification(\"Error\", response.message, \"error\");\n          }\n        })\n        .catch((error) => {\n          reject(error);\n          showNotification(\"Error\", \"File upload failed\", \"error\");\n        });\n    });\n\n  const onSubmit = async (values) => {\n    props.onShowLoader(true);\n    let params = {\n      image_id: userInfo?.profile_image_id,\n      building_name: values.buildingName,\n      country_id: values.country,\n      region_id: values.region,\n      country_code: selectedCountry.phone_code,\n      mobile: values.mobile,\n      p_o_box: values.po_box,\n      palce: values.place,\n      city: values.city,\n      trade_license_image_id: userInfo?.client_user?.trade_license_image_id,\n      fta_email: values.ftaEmail,\n      fta_password: values.ftaPassword,\n      l_country_code: selectedCountry.phone_code,\n      landline: values.landphone,\n      contact_person: values.contact_person,\n      cp_country_code: selectedCountry.phone_code,\n      cp_mobile: values.cp_mobile,\n      tran_certificate_id: userInfo?.client_user?.tran_certificate_id,\n    };\n\n    if (values.tradeFile) {\n      await uploadFiles(values.tradeFile)\n        .then((response) => {\n          params.trade_license_image_id = response.payload.file_id;\n        })\n        .catch((error) => {});\n    }\n\n    if (values.trnFile) {\n      await uploadFiles(values.trnFile)\n        .then((response) => {\n          params.tran_certificate_id = response.payload.file_id;\n        })\n        .catch((error) => {});\n    }\n\n    if (selectedDisplayPic) {\n      await uploadFiles(selectedDisplayPic)\n        .then((response) => {\n          params.image_id = response.payload.file_id;\n        })\n        .catch((error) => {});\n    }\n\n    updateProfile(params);\n  };\n\n  const updateProfile = (params) => {\n    callApi(\"post\", ApiConstants.client.update, params, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 201) {\n          props.onSuccess();\n          showNotification(\"Success\", response.message, \"success\");\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const onSelectCountry = (value) => {\n    setSelectedCountry(value);\n\n    setRegionList(\n      value.regions?.map((i) => {\n        return { ...i, value: i.id, label: i.name };\n      })\n    );\n  };\n\n  const onFileChange = (event) => {\n    let file = event.target.files[0];\n    if (file) {\n      let regex = /(?:\\.([^.]+))?$/;\n      let ext = regex.exec(file.name)[1];\n\n      if (file.size >= FILE_SIZE) {\n        setDpErrors(\"Exceeds maximum file size (Max 50MB)\");\n        return;\n      }\n\n      if (!SUPPORTED_FORMATS.includes(ext?.toLowerCase())) {\n        setDpErrors(\"Unsupported Format\");\n        return;\n      }\n\n      let reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onloadend = (e) => {\n        setPreviewImg(reader.result);\n        setSelectedDisplayPic(file);\n      };\n      setDpErrors(\"\");\n    }\n  };\n\n  const getContries = () => {\n    props.onShowLoader(true);\n    callApi(\"get\", ApiConstants.lookups.getCountry, {})\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          setCountriesList(\n            response.payload?.map((i) => {\n              return { ...i, value: i.id, label: i.name };\n            })\n          );\n          let selectedCountry = response.payload?.find(\n            (i) => i.id === userInfo?.client_user?.country_id\n          );\n          onSelectCountry(selectedCountry);\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"card shadow-none mb-0 rounded\">\n        <div className=\"card-header\">\n          <h5 className=\"text-primary\">Edit Profile</h5>\n        </div>\n        <div className=\"card-body mx-4\">\n          <Formik\n            enableReinitialize={true}\n            initialValues={{\n              email: userInfo?.email ? userInfo.email : \"\",\n              name: userInfo?.name ? userInfo.name : \"\",\n              buildingName: userInfo.client_user?.building_name\n                ? userInfo.client_user.building_name\n                : \"\",\n              place: userInfo.client_user?.palce\n                ? userInfo.client_user.palce\n                : \"\",\n              po_box: userInfo.client_user.p_o_box\n                ? userInfo.client_user.p_o_box\n                : \"\",\n              city: userInfo.client_user.city ? userInfo.client_user.city : \"\",\n              country: userInfo.client_user.country_id\n                ? userInfo.client_user.country_id\n                : \"\",\n              region: userInfo.client_user.region_id\n                ? userInfo.client_user.region_id\n                : \"\",\n              mobile: userInfo.client_user.mobile\n                ? userInfo.client_user.mobile\n                : \"\",\n              whatsappno: userInfo.whatsapp_no ? userInfo.whatsapp_no : \"\",\n              landphone: userInfo.client_user.landline\n                ? userInfo.client_user.landline\n                : \"\",\n              tradeLicenseNumber: userInfo.client_user.trade_license_number\n                ? userInfo.client_user.trade_license_number\n                : \"\",\n              tradeFile: undefined,\n              trnNumber: userInfo.client_user.trn_number\n                ? userInfo.client_user.trn_number\n                : \"\",\n              trnFile: undefined,\n              contact_person: userInfo.client_user.contact_person\n                ? userInfo.client_user.contact_person\n                : \"\",\n              cp_mobile: userInfo.client_user.cp_mobile\n                ? userInfo.client_user.cp_mobile\n                : \"\",\n              ftaEmail: userInfo.client_user.fta_email\n                ? userInfo.client_user.fta_email\n                : \"\",\n              ftaPassword: userInfo.client_user.fta_password\n                ? userInfo.client_user.fta_password\n                : \"\",\n            }}\n            validationSchema={UserFormSchema}\n            onSubmit={(values) => onSubmit(values)}>\n            {({ errors, handleChange, values, setFieldValue }) => (\n              <Form>\n                <Row>\n                  <Col xs={12}>\n                    <div className=\"mb-4 d-flex justify-content-center align-items-center\">\n                      <div\n                        className=\"profile-avatr\"\n                        style={{ width: 85, height: 85, position: \"relative\" }}>\n                        {selectedDisplayPic ? (\n                          <img\n                            src={previewImg}\n                            alt=\"user\"\n                            className=\"display_pic\"\n                          />\n                        ) : userInfo?.profile_image ? (\n                          <img\n                            src={\n                              CONFIG.API_BASE_URL +\n                              ApiConstants.file.view +\n                              \"?file_name=\" +\n                              userInfo?.profile_image.file_path\n                            }\n                            alt=\"user\"\n                            className=\"display_pic\"\n                          />\n                        ) : (\n                          <img src={avatar1} alt=\"user\" />\n                        )}\n                        <input\n                          type=\"file\"\n                          id=\"display-pic-input\"\n                          accept=\"image/jpg, image/jpeg, image/png\"\n                          onChange={onFileChange}\n                        />\n                        <label htmlFor=\"display-pic-input\">\n                          <span className=\"edit-icon\">\n                            <i className=\"feather icon-camera\" />\n                          </span>\n                        </label>\n                        <div className=\"dp-error-container\">{dpErrors}</div>\n                      </div>\n                      <div className=\"d-inline-block ml-3\">\n                        <h6>{userInfo?.name}</h6>\n                        {userInfo?.id && (\n                          <p className=\"m-b-0\">\n                            ID: VATZ{(\"000000\" + userInfo?.id).slice(-6)}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  </Col>\n                </Row>\n                <Row>\n                  <Col xs={12} xl={6}>\n                    <label>Company Name</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.name && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Company Name\"\n                        name=\"name\"\n                        disabled\n                      />\n                      <ErrorMessage name=\"name\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Email</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.email && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Email\"\n                        name=\"email\"\n                        disabled\n                      />\n                      <ErrorMessage name=\"email\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Building Name</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.buildingName && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Building Name\"\n                        name=\"buildingName\"\n                      />\n                      <ErrorMessage name=\"buildingName\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Place / Street name</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.place && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Place / Street name\"\n                        name=\"place\"\n                      />\n                      <ErrorMessage name=\"place\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>P O Box</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.po_box && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"P O Box\"\n                        name=\"po_box\"\n                      />\n                      <ErrorMessage name=\"po_box\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>City</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.city && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"City\"\n                        name=\"city\"\n                      />\n                      <ErrorMessage name=\"city\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Country</label>\n                    <div className=\"input-group mb-3\">\n                      <Select\n                        className={`w-100 form-control-select ${\n                          errors.country && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        classNamePrefix=\"select\"\n                        options={countriesList}\n                        value={countriesList.find(\n                          (i) => i.id === values.country\n                        )}\n                        placeholder=\"Select Country\"\n                        isSearchable={false}\n                        isDisabled\n                        onChange={(value) => {\n                          onSelectCountry(value);\n                          let event = {\n                            target: {\n                              name: \"country\",\n                              value: value.id,\n                            },\n                          };\n                          handleChange(event);\n                        }}\n                      />\n                      <ErrorMessage name=\"country\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Region</label>\n                    <div className=\"input-group mb-3\">\n                      <Select\n                        className={`w-100 form-control-select ${\n                          errors.region && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        classNamePrefix=\"select\"\n                        options={regionList}\n                        placeholder=\"Select Region\"\n                        isSearchable\n                        value={regionList.find((i) => i.id === values?.region)}\n                        onChange={(value) => {\n                          let event = {\n                            target: {\n                              name: \"region\",\n                              value: value.id,\n                            },\n                          };\n                          handleChange(event);\n                        }}\n                      />\n                      <ErrorMessage name=\"region\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Whatsapp Number</label>\n\n                    <div className=\"input-group mb-3\">\n                      <div className=\"input-group-prepend bg-light\">\n                        <span\n                          className={`input-group-text ${\n                            errors.whatsappno && isSubmitted\n                              ? \"border border-danger\"\n                              : \"\"\n                          }`}\n                          id=\"country-code\"\n                          style={{ fontSize: 14 }}>\n                          {selectedCountry.phone_code}\n                        </span>\n                      </div>\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.whatsappno && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Whatsapp Number\"\n                        name=\"whatsappno\"\n                        disabled\n                      />\n                      <ErrorMessage name=\"whatsappno\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Land Line Number</label>\n                    <div className=\"input-group mb-3\">\n                      <div className=\"input-group-prepend bg-light\">\n                        <span\n                          className={`input-group-text ${\n                            errors.landphone && isSubmitted\n                              ? \"border border-danger\"\n                              : \"\"\n                          }`}\n                          id=\"country-code\"\n                          style={{ fontSize: 14 }}>\n                          {selectedCountry.phone_code}\n                        </span>\n                      </div>\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.landphone && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Land Line Number\"\n                        name=\"landphone\"\n                      />\n                      <ErrorMessage name=\"landphone\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Mobile Number</label>\n                    <div className=\"input-group mb-3\">\n                      <div className=\"input-group-prepend bg-light\">\n                        <span\n                          className={`input-group-text ${\n                            errors.mobile && isSubmitted\n                              ? \"border border-danger\"\n                              : \"\"\n                          }`}\n                          id=\"country-code\"\n                          style={{ fontSize: 14 }}>\n                          {selectedCountry.phone_code}\n                        </span>\n                      </div>\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.mobile && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Mobile Number\"\n                        name=\"mobile\"\n                      />\n                      <ErrorMessage name=\"mobile\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}></Col>\n                  <Col xs={12} xl={6}>\n                    <label>Trade License Number</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.tradeLicenseNumber && isSubmitted\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                        placeholder=\"Trade License Number\"\n                        name=\"tradeLicenseNumber\"\n                        disabled\n                      />\n                      <ErrorMessage name=\"tradeLicenseNumber\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Upload Trade License Copy</label>\n                    <div className=\"input-group\">\n                      <input\n                        id=\"tradeFile\"\n                        className={`form-control ${\n                          errors.tradeFile && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        type=\"file\"\n                        onChange={(event) => {\n                          setFieldValue(\n                            \"tradeFile\",\n                            event.currentTarget.files[0]\n                          );\n                        }}\n                      />\n                      {userInfo && userInfo?.client_user?.trade_license_image && (\n                        <div className=\"ml-2 mt-2\">\n                          <a\n                            target=\"_blank\" rel=\"noreferrer\"\n                            href={\n                              CONFIG.API_BASE_URL +\n                              ApiConstants.file.download +\n                              \"?file_name=\" +\n                              userInfo?.client_user?.trade_license_image\n                                .file_path\n                            }>\n                            Download\n                          </a>\n                        </div>\n                      )}\n                      <ErrorMessage name=\"tradeFile\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                    <div style={{ fontSize: 10 }} className=\"mb-3\">\n                      Supported file formats JPEG, PNG, Pdf, DOC, DOCX\n                    </div>\n                  </Col>\n\n                  <Col xs={12} xl={6}>\n                    <label>TRN</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.trnNumber && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"TRN\"\n                        name=\"trnNumber\"\n                        disabled\n                      />\n                      <ErrorMessage name=\"trnNumber\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Upload TRN Certificate</label>\n                    <div className=\"input-group\">\n                      <input\n                        id=\"trnFile\"\n                        className={`form-control ${\n                          errors.trnFile && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        type=\"file\"\n                        onChange={(event) => {\n                          setFieldValue(\n                            \"trnFile\",\n                            event.currentTarget.files[0]\n                          );\n                        }}\n                      />\n                      {userInfo &&\n                        userInfo?.client_user?.tran_certificate_image && (\n                          <div className=\"ml-2 mt-2\">\n                            <a\n                              target=\"_blank\" rel=\"noreferrer\"\n                              href={\n                                CONFIG.API_BASE_URL +\n                                ApiConstants.file.download +\n                                \"?file_name=\" +\n                                userInfo?.client_user?.tran_certificate_image\n                                  .file_path\n                              }>\n                              Download\n                            </a>\n                          </div>\n                        )}\n                      <ErrorMessage name=\"trnFile\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                    <div style={{ fontSize: 10 }} className=\"mb-3\">\n                      Supported file formats JPEG, PNG, Pdf, DOC, DOCX\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Contact Person</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.contact_person && isSubmitted\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                        placeholder=\"Contact Person\"\n                        name=\"contact_person\"\n                      />\n                      <ErrorMessage name=\"contact_person\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Contact Number</label>\n                    <div className=\"input-group mb-3\">\n                      <div className=\"input-group-prepend bg-light\">\n                        <span\n                          className={`input-group-text ${\n                            errors.cp_mobile && isSubmitted\n                              ? \"border border-danger\"\n                              : \"\"\n                          }`}\n                          id=\"country-code\"\n                          style={{ fontSize: 14 }}>\n                          {selectedCountry.phone_code}\n                        </span>\n                      </div>\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.cp_mobile && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Contact Number\"\n                        name=\"cp_mobile\"\n                      />\n                      <ErrorMessage name=\"cp_mobile\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12}>\n                    <hr />\n                    <label style={{ color: \"#096DA9\" }} className=\"mb-3\">\n                      FTA Login Details &nbsp;\n                      <i className=\"fa fa-info-circle\"></i>\n                    </label>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>FTA Email</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.ftaEmail && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"FTA Email\"\n                        name=\"ftaEmail\"\n                      />\n                      <ErrorMessage name=\"ftaEmail\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>FTA Password</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"password\"\n                        className={`form-control ${\n                          errors.ftaPassword && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"FTA Password\"\n                        name=\"ftaPassword\"\n                      />\n                      <ErrorMessage name=\"ftaPassword\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                </Row>\n\n                <div className=\"mt-3 text-center\">\n                  <button\n                    type=\"submit\"\n                    style={{ width: 180, fontWeight: \"bold\" }}\n                    className=\"btn btn-primary shadow-2 mt-3\"\n                    onClick={() => setIsSubmitted(true)}>\n                    Update\n                  </button>\n                </div>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default ClientForm;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/profile/forms/adminForm.js",["1108"],"import React, { useState, useEffect } from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport Select from \"react-select\";\n\nimport { showNotification } from \"../../../services/toasterService\";\nimport { CONFIG } from \"../../../config/constant\";\nimport { callApi, callUploadApi } from \"../../../services/apiService\";\nimport { ApiConstants } from \"../../../config/apiConstants\";\n\nimport avatar1 from \"../../../assets/images/icons/company.png\";\n\nconst AdminForm = (props) => {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [selectedCountry, setSelectedCountry] = useState(\"\");\n  const [countriesList, setCountriesList] = useState([]);\n  const [selectedDisplayPic, setSelectedDisplayPic] = useState(null);\n  const [previewImg, setPreviewImg] = useState(null);\n  const [dpErrors, setDpErrors] = useState(\"\");\n\n  const { userInfo } = props;\n\n  const FILE_SIZE = CONFIG.MAX_UPLOAD_SIZE;\n  const SUPPORTED_FORMATS = [\"jpg\", \"jpeg\", \"png\"];\n\n  const UserFormSchema = Yup.object().shape({\n    name: Yup.string().required(\"Please enter Name\"),\n    email: Yup.string()\n      .required(\"Please enter Email \")\n      .email(\"Please enter a valid Email\"),\n    place: Yup.string().required(\"Please enter Place\"),\n    po_box: Yup.string().required(\"Please enter PO Box\"),\n    city: Yup.string().required(\"Please enter City\"),\n    country: Yup.string().required(\"Please select Country\"),\n    whatsappno: Yup.string()\n      .required(\"Please enter Whatsapp No\")\n      .matches(/^[0-9]*$/, \"Please enter a valid phone number\"),\n    mobile: Yup.string().matches(\n      /^[0-9]*$/,\n      \"Please enter a valid mobile number\"\n    ),\n  });\n\n  useEffect(() => {\n    getContries();\n    onSelectCountry(userInfo?.admin_user?.country);\n  }, []);\n\n  const uploadFiles = (data) =>\n    new Promise((resolve, reject) => {\n      let formData = new FormData();\n      formData.append(\"file\", data);\n\n      return callUploadApi(formData)\n        .then((response) => {\n          if (response.status_code === 201) resolve(response);\n          else {\n            reject(response);\n            showNotification(\"Error\", response.message, \"error\");\n          }\n        })\n        .catch((error) => {\n          reject(error);\n          showNotification(\"Error\", \"File upload failed\", \"error\");\n        });\n    });\n\n  const onSubmit = (values) => {\n    props.onShowLoader(true);\n    let params = {\n      country_code: selectedCountry.phone_code,\n      mobile: values.mobile,\n      p_o_box: values.po_box,\n      palce: values.place,\n      city: values.city,\n      image_id: 0,\n    };\n    if (selectedDisplayPic) {\n      uploadFiles(selectedDisplayPic)\n        .then((response) => {\n          params.image_id = response.payload.file_id;\n          updateProfile(params);\n        })\n        .catch((error) => {\n          props.onShowLoader(false);\n        });\n    } else {\n      updateProfile(params);\n    }\n  };\n\n  const updateProfile = (params) => {\n    callApi(\"post\", ApiConstants.admin.update, params, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 201) {\n          props.onSuccess();\n          showNotification(\"Success\", response.message, \"success\");\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const onSelectCountry = (value) => {\n    setSelectedCountry(value);\n  };\n\n  const onFileChange = (event) => {\n    let file = event.target.files[0];\n    if (file) {\n      let regex = /(?:\\.([^.]+))?$/;\n      let ext = regex.exec(file.name)[1];\n\n      if (file.size >= FILE_SIZE) {\n        setDpErrors(\"Exceeds maximum file size (Max 50MB)\");\n        return;\n      }\n\n      if (!SUPPORTED_FORMATS.includes(ext?.toLowerCase())) {\n        setDpErrors(\"Unsupported Format\");\n        return;\n      }\n\n      let reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onloadend = (e) => {\n        setPreviewImg(reader.result);\n        setSelectedDisplayPic(file);\n      };\n      setDpErrors(\"\");\n    }\n  };\n\n  const getContries = () => {\n    props.onShowLoader(true);\n    callApi(\"get\", ApiConstants.lookups.getCountry, {})\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          setCountriesList(\n            response.payload?.map((i) => {\n              return { ...i, value: i.id, label: i.name };\n            })\n          );\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"card shadow-none mb-0 rounded\">\n        <div className=\"card-header\">\n          <h5 className=\"text-primary\">Edit Profile</h5>\n        </div>\n        <div className=\"card-body mx-4\">\n          <Formik\n            enableReinitialize={true}\n            initialValues={{\n              email: userInfo?.email ? userInfo.email : \"\",\n              name: userInfo?.name ? userInfo.name : \"\",\n              place: userInfo.admin_user?.palce\n                ? userInfo.admin_user.palce\n                : \"\",\n              po_box: userInfo.admin_user.p_o_box\n                ? userInfo.admin_user.p_o_box\n                : \"\",\n              city: userInfo.admin_user.city ? userInfo.admin_user.city : \"\",\n              country: userInfo.admin_user.country_id\n                ? userInfo.admin_user.country_id\n                : \"\",\n              mobile: userInfo.admin_user.mobile\n                ? userInfo.admin_user.mobile\n                : \"\",\n              whatsappno: userInfo.whatsapp_no ? userInfo.whatsapp_no : \"\",\n            }}\n            validationSchema={UserFormSchema}\n            onSubmit={(values) => onSubmit(values)}>\n            {({ errors, handleChange, values }) => (\n              <Form>\n                <Row>\n                  <Col xs={12}>\n                    <div className=\"mb-4 d-flex justify-content-center align-items-center\">\n                      <div\n                        className=\"profile-avatr\"\n                        style={{ width: 85, height: 85, position: \"relative\" }}>\n                        {selectedDisplayPic ? (\n                          <img\n                            src={previewImg}\n                            alt=\"user\"\n                            className=\"display_pic\"\n                          />\n                        ) : userInfo?.profile_image ? (\n                          <img\n                            src={\n                              CONFIG.API_BASE_URL +\n                              ApiConstants.file.view +\n                              \"?file_name=\" +\n                              userInfo?.profile_image.file_path\n                            }\n                            alt=\"user\"\n                            className=\"display_pic\"\n                          />\n                        ) : (\n                          <img src={avatar1} alt=\"user\" />\n                        )}\n                        <input\n                          type=\"file\"\n                          id=\"display-pic-input\"\n                          accept=\"image/jpg, image/jpeg, image/png\"\n                          onChange={onFileChange}\n                        />\n                        <label htmlFor=\"display-pic-input\">\n                          <span className=\"edit-icon\">\n                            <i className=\"feather icon-camera\" />\n                          </span>\n                        </label>\n                        <div className=\"dp-error-container\">{dpErrors}</div>\n                      </div>\n                      <div className=\"d-inline-block ml-3\">\n                        <h6>{userInfo?.name}</h6>\n                        <p className=\"m-b-0\">\n                          ID: VATZ{(\"000000\" + userInfo?.id).slice(-6)}\n                        </p>\n                      </div>\n                    </div>\n                  </Col>\n                </Row>\n                <Row>\n                  <Col xs={12} xl={6}>\n                    <label>Name</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.name && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Name\"\n                        name=\"name\"\n                        disabled\n                      />\n                      <ErrorMessage name=\"name\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Email</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.email && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Email\"\n                        name=\"email\"\n                        disabled\n                      />\n                      <ErrorMessage name=\"email\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Place / Street name</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.place && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Place / Street name\"\n                        name=\"place\"\n                      />\n                      <ErrorMessage name=\"place\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>P O Box</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.po_box && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"P O Box\"\n                        name=\"po_box\"\n                      />\n                      <ErrorMessage name=\"po_box\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>City</label>\n                    <div className=\"input-group mb-3\">\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.city && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"City\"\n                        name=\"city\"\n                      />\n                      <ErrorMessage name=\"city\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Country</label>\n                    <div className=\"input-group mb-3\">\n                      <Select\n                        className={`w-100 form-control-select ${\n                          errors.country && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        classNamePrefix=\"select\"\n                        options={countriesList}\n                        value={countriesList.find(\n                          (i) => i.id === values.country\n                        )}\n                        placeholder=\"Select Country\"\n                        isSearchable={false}\n                        isDisabled\n                        onChange={(value) => {\n                          onSelectCountry(value);\n                          let event = {\n                            target: {\n                              name: \"country\",\n                              value: value.id,\n                            },\n                          };\n                          handleChange(event);\n                        }}\n                      />\n                      <ErrorMessage name=\"country\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Whatsapp Number</label>\n\n                    <div className=\"input-group mb-3\">\n                      <div className=\"input-group-prepend bg-light\">\n                        <span\n                          className={`input-group-text ${\n                            errors.whatsappno && isSubmitted\n                              ? \"border border-danger\"\n                              : \"\"\n                          }`}\n                          id=\"country-code\"\n                          style={{ fontSize: 14 }}>\n                          {selectedCountry.phone_code}\n                        </span>\n                      </div>\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.whatsappno && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Whatsapp Number\"\n                        name=\"whatsappno\"\n                        disabled\n                      />\n                      <ErrorMessage name=\"whatsappno\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                  <Col xs={12} xl={6}>\n                    <label>Mobile Number</label>\n                    <div className=\"input-group mb-3\">\n                      <div className=\"input-group-prepend bg-light\">\n                        <span\n                          className={`input-group-text ${\n                            errors.mobile && isSubmitted\n                              ? \"border border-danger\"\n                              : \"\"\n                          }`}\n                          id=\"country-code\"\n                          style={{ fontSize: 14 }}>\n                          {selectedCountry.phone_code}\n                        </span>\n                      </div>\n                      <Field\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.mobile && isSubmitted ? \"is-invalid\" : \"\"\n                        }`}\n                        placeholder=\"Mobile Number\"\n                        name=\"mobile\"\n                      />\n                      <ErrorMessage name=\"mobile\">\n                        {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                      </ErrorMessage>\n                    </div>\n                  </Col>\n                </Row>\n\n                <div className=\"mt-3 text-center\">\n                  <button\n                    type=\"submit\"\n                    style={{ width: 180, fontWeight: \"bold\" }}\n                    className=\"btn btn-primary shadow-2 mt-3\"\n                    onClick={() => setIsSubmitted(true)}>\n                    Update\n                  </button>\n                </div>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default AdminForm;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/signup/SignUp.js",["1109","1110","1111","1112"],"import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport Select from \"react-select\";\n\nimport { callApi, callUploadApi } from \"../../services/apiService\";\nimport { ApiConstants } from \"../../config/apiConstants\";\nimport { CONFIG } from \"../../config/constant\";\nimport { showNotification } from \"../../services/toasterService\";\n\nimport logo from \"../../assets/svgs/logo.svg\";\n\nconst FILE_SIZE = CONFIG.MAX_UPLOAD_SIZE;\nconst SUPPORTED_FORMATS = [\n  \"pdf\",\n  \"jpg\",\n  \"jpeg\",\n  \"png\",\n  \"doc\",\n  \"docx\",\n  \"jfif\",\n  \"gif\",\n  \"bmp\",\n];\n\nconst SignUp = ({ close, openSignin, onShowLoader }) => {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [countriesList, setCountriesList] = useState([]);\n  const [emiratesList, setEmiratesList] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState(\"\");\n  const [selectedEmirate, setSelectedEmirate] = useState(\"\");\n\n  const SignUpSchema = Yup.object().shape({\n    companyName: Yup.string().required(\"Please enter Company Name\"),\n    buildingName: Yup.string().required(\"Please enter Building Name\"),\n    poBox: Yup.string(),\n    place: Yup.string(),\n    city: Yup.string(),\n    emairate: Yup.string().required(\"Please select Emirate\"),\n    country: Yup.string().required(\"Please select Country\"),\n    whatsappno: Yup.string()\n      .required(\"Please enter Whatsapp No\")\n      .matches(/^[0-9]*$/, \"Please enter a valid phone number\"),\n    landphone: Yup.string().matches(\n      /^[0-9]*$/,\n      \"Please enter a valid phone number\"\n    ),\n    mobile: Yup.string().matches(\n      /^[0-9]*$/,\n      \"Please enter a valid mobile number\"\n    ),\n    tradeLicenseNumber: Yup.string()\n      .required(\"Please enter Trade License Number\")\n      .matches(/^[ A-Za-z0-9/-]*$/, \"Alphanumeric, / and - are only allowed\"),\n    tradeFile: Yup.mixed()\n      .test(\"fileSize\", \"Exceeds maximum file size (Max 50 MB)\", (value) => {\n        if (value) {\n          return value.size <= FILE_SIZE;\n        }\n        return true;\n      })\n      .test(\"fileFormat\", \"Unsupported Format\", (value) => {\n        if (value) {\n          let regex = /(?:\\.([^.]+))?$/;\n          let ext = regex.exec(value.name)[1];\n          return SUPPORTED_FORMATS.includes(ext?.toLowerCase());\n        }\n        return true;\n      }),\n    vatPeriod: Yup.string(),\n    trnNumber: Yup.number()\n      .typeError(\"TRN must be a number\")\n      .required(\"Please enter TRN Number\")\n      .test(\n        \"len\",\n        \"15 digits required\",\n        (val) => val >= 0 && String(val).length === 15\n      ),\n    email: Yup.string()\n      .required(\"Please enter Email\")\n      .email(\"Please enter a valid Email\"),\n    password: Yup.string()\n      .required(\"Please enter Password\")\n      .matches(\n        /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{6,})/,\n        \"Must Contain 6 Characters, One Uppercase, One Lowercase, One Number and One Special Case Character\"\n      ),\n    conpassword: Yup.string()\n      .required(\"Please confirm Password\")\n      .oneOf([Yup.ref(\"password\")], \"Passwords are not matching\"),\n    contact_person: Yup.string().required(\"Please enter Contact Person name\"),\n    cp_mobile: Yup.string()\n      .required(\"Please enter Contact Person number\")\n      .matches(/^[0-9]*$/, \"Please enter a valid mobile number\"),\n    ftaEmail: Yup.string()\n      // .required(\"Please enter FTA Email\")\n      .email(\"Please enter a valid FTA Email\"),\n    ftaPassword: Yup.string(),\n    trnFile: Yup.mixed()\n      .test(\"fileSize\", \"Exceeds maximum file size (Max 50MB)\", (value) => {\n        if (value) {\n          return value.size <= FILE_SIZE;\n        }\n        return true;\n      })\n      .test(\"fileFormat\", \"Unsupported Format\", (value) => {\n        if (value) {\n          let regex = /(?:\\.([^.]+))?$/;\n          let ext = regex.exec(value.name)[1];\n          return SUPPORTED_FORMATS.includes(ext?.toLowerCase());\n        }\n        return true;\n      }),\n  });\n\n  useEffect(() => {\n    getContries();\n  }, []);\n\n  const onSignInClick = (e) => {\n    if (e) e.preventDefault();\n    close();\n    openSignin(e);\n  };\n\n  const getContries = () => {\n    onShowLoader(true);\n    callApi(\"get\", ApiConstants.lookups.getCountry, {})\n      .then((response) => {\n        onShowLoader(false);\n        if (response && response.status_code === 200) {\n          let updatedList = response.payload?.map((i) => {\n            return { ...i, value: i.id, label: i.name };\n          });\n          setCountriesList(updatedList);\n          onSelectCountry(updatedList[0]);\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const onSelectCountry = (value) => {\n    setSelectedCountry(value);\n    setSelectedEmirate(\"\");\n    setEmiratesList(\n      value.regions?.map((i) => {\n        return { ...i, value: i.id, label: i.name };\n      })\n    );\n  };\n\n  const uploadFiles = (data) =>\n    new Promise((resolve, reject) => {\n      let formData = new FormData();\n      formData.append(\"file\", data);\n\n      return callUploadApi(formData)\n        .then((response) => {\n          if (response.status_code === 201) resolve(response);\n          else {\n            reject(response);\n            showNotification(\"Error\", response.message, \"error\");\n          }\n        })\n        .catch((error) => {\n          reject(error);\n          showNotification(\"Error\", \"File upload failed\", \"error\");\n        });\n    });\n\n  const onSubmit = async (values) => {\n    onShowLoader(true);\n    let params = {\n      email: values.email,\n      w_country_code: selectedCountry.phone_code,\n      whatsapp_no: values.whatsappno,\n      name: values.companyName,\n      building_name: values.buildingName,\n      country_id: parseInt(values.country),\n      region_id: parseInt(values.emairate),\n      country_code: selectedCountry.phone_code,\n      mobile: values.mobile,\n      join_date: new Date(),\n      salary: 0,\n      p_o_box: values.poBox,\n      palce: values.place,\n      city: values.city,\n      trade_license_number: values.tradeLicenseNumber,\n      vat_period: values.vatPeriod,\n      trn_number: values.trnNumber,\n      trade_license_image_id: 0,\n      fta_email: values.ftaEmail,\n      fta_password: values.ftaPassword,\n      l_country_code: selectedCountry.phone_code,\n      landline: values.landphone,\n      contact_person: values.contact_person,\n      cp_country_code: selectedCountry.phone_code,\n      cp_mobile: values.cp_mobile,\n      tran_certificate_id: 0,\n      password: values.password,\n    };\n\n    if (values.tradeFile) {\n      await uploadFiles(values.tradeFile)\n        .then((response) => {\n          params.trade_license_image_id = response.payload.file_id;\n        })\n        .catch((error) => {});\n    }\n\n    if (values.trnFile) {\n      await uploadFiles(values.trnFile)\n        .then((response) => {\n          params.tran_certificate_id = response.payload.file_id;\n        })\n        .catch((error) => {});\n    }\n\n    let promiseStack = [];\n\n    if (values.tradeFile) {\n      promiseStack.push(uploadFiles(values.tradeFile));\n    } else {\n      params.trade_license_image_id = 0;\n    }\n\n    if (values.trnFile) {\n      promiseStack.push(uploadFiles(values.trnFile));\n    } else {\n      params.tran_certificate_id = 0;\n    }\n\n    if (promiseStack.length) {\n      Promise.all(promiseStack)\n        .then((response) => {\n          onShowLoader(false);\n          if (values.tradeFile) {\n            params.trade_license_image_id = response[0]?.payload?.file_id\n              ? response[0].payload.file_id\n              : 0;\n          }\n          if (values.trnFile) {\n            if (values.tradeFile) {\n              params.tran_certificate_id = response[1]?.payload?.file_id\n                ? response[1].payload.file_id\n                : 0;\n            } else {\n              params.tran_certificate_id = response[0]?.payload?.file_id\n                ? response[0].payload.file_id\n                : 0;\n            }\n          }\n          registerUser(params);\n        })\n        .catch((error) => {\n          onShowLoader(false);\n          registerUser(params);\n        });\n    } else {\n      registerUser(params);\n    }\n  };\n\n  const registerUser = (params) => {\n    onShowLoader(true);\n    callApi(\"post\", ApiConstants.client.register, params)\n      .then((response) => {\n        if (response && response.status_code === 201) {\n          showNotification(\"Success\", response.message, \"success\");\n          onSignInClick(null);\n        } else {\n          onShowLoader(false);\n          showNotification(\"Error\", response.message, \"error\");\n        }\n        onShowLoader(false);\n      })\n      .catch((error) => {\n        onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"auth-wrapper aut-bg-img\">\n        <div className=\"container\">\n          <div className=\"text-center mt-5\">\n            <h4 className=\"\">Get started</h4>\n          </div>\n          <div className=\"card shadow-none\">\n            <div className=\"card-body py-2\">\n              <div className=\"row\">\n                <div className=\"col-12\">\n                  <div className=\"mb-1 text-center \">\n                    <Link to=\"/home\">\n                      <img src={logo} alt=\"Logo\" style={{ height: 70 }} />\n                    </Link>\n                  </div>\n                  <h5 className=\"mb-4 text-left\" style={{ color: \"#096DA9\" }}>\n                    Sign up\n                  </h5>\n                  <Formik\n                    enableReinitialize={true}\n                    initialValues={{\n                      companyName: \"\",\n                      buildingName: \"\",\n                      poBox: \"\",\n                      place: \"\",\n                      city: \"\",\n                      emairate: \"\",\n                      country: selectedCountry.value,\n                      whatsappno: \"\",\n                      landphone: \"\",\n                      mobile: \"\",\n                      tradeLicenseNumber: \"\",\n                      tradeFile: undefined,\n                      trnNumber: \"\",\n                      email: \"\",\n                      password: \"\",\n                      conpassword: \"\",\n                      contact_person: \"\",\n                      cp_mobile: \"\",\n                      ftaEmail: \"\",\n                      ftaPassword: \"\",\n                      trnFile: undefined,\n                    }}\n                    validationSchema={SignUpSchema}\n                    onSubmit={(values) => onSubmit(values)}>\n                    {({ errors, handleChange, setFieldValue, values }) => (\n                      <Form>\n                        <div className=\"row form-container\">\n                          <div className=\"col-12 col-lg-6\">\n                            <label>Company Name</label>\n                            <div className=\"input-group mb-3\">\n                              <Field\n                                type=\"text\"\n                                className={`form-control ${\n                                  errors.companyName && isSubmitted\n                                    ? \"is-invalid\"\n                                    : \"\"\n                                }`}\n                                placeholder=\"Company Name\"\n                                name=\"companyName\"\n                              />\n                              <ErrorMessage name=\"companyName\">\n                                {(msg) => (\n                                  <div className=\"invalid-feedback\">{msg}</div>\n                                )}\n                              </ErrorMessage>\n                            </div>\n                          </div>\n                          <div className=\"col-12 col-lg-6\">\n                            <label>Building Name</label>\n                            <div className=\"input-group mb-3\">\n                              <Field\n                                type=\"text\"\n                                className={`form-control ${\n                                  errors.buildingName && isSubmitted\n                                    ? \"is-invalid\"\n                                    : \"\"\n                                }`}\n                                placeholder=\"Building Name\"\n                                name=\"buildingName\"\n                              />\n                              <ErrorMessage name=\"buildingName\">\n                                {(msg) => (\n                                  <div className=\"invalid-feedback\">{msg}</div>\n                                )}\n                              </ErrorMessage>\n                            </div>\n                          </div>\n                          <div className=\"col-12 col-lg-6\">\n                            <label>P O Box</label>\n                            <div className=\"input-group mb-3\">\n                              <Field\n                                type=\"text\"\n                                className={`form-control ${\n                                  errors.poBox && isSubmitted\n                                    ? \"is-invalid\"\n                                    : \"\"\n                                }`}\n                                placeholder=\"P O Box\"\n                                name=\"poBox\"\n                              />\n                              <ErrorMessage name=\"poBox\">\n                                {(msg) => (\n                                  <div className=\"invalid-feedback\">{msg}</div>\n                                )}\n                              </ErrorMessage>\n                            </div>\n                          </div>\n                          <div className=\"col-12 col-lg-6\">\n                            <label>Place / Street name</label>\n                            <div className=\"input-group mb-3\">\n                              <Field\n                                type=\"text\"\n                                className={`form-control ${\n                                  errors.place && isSubmitted\n                                    ? \"is-invalid\"\n                                    : \"\"\n                                }`}\n                                placeholder=\"Place / Street name\"\n                                name=\"place\"\n                              />\n                              <ErrorMessage name=\"place\">\n                                {(msg) => (\n                                  <div className=\"invalid-feedback\">{msg}</div>\n                                )}\n                              </ErrorMessage>\n                            </div>\n                          </div>\n                          <div className=\"col-12 col-lg-6\">\n                            <label>City</label>\n                            <div className=\"input-group mb-3\">\n                              <Field\n                                type=\"text\"\n                                className={`form-control ${\n                                  errors.city && isSubmitted ? \"is-invalid\" : \"\"\n                                }`}\n                                placeholder=\"City\"\n                                name=\"city\"\n                              />\n                              <ErrorMessage name=\"city\">\n                                {(msg) => (\n                                  <div className=\"invalid-feedback\">{msg}</div>\n                                )}\n                              </ErrorMessage>\n                            </div>\n                          </div>\n                          <div className=\"col-12 col-lg-6\">\n                            <label>Country</label>\n                            <div className=\"input-group mb-3\">\n                              <Select\n                                className={`w-100 form-control-select ${\n                                  errors.country && isSubmitted\n                                    ? \"is-invalid\"\n                                    : \"\"\n                                }`}\n                                classNamePrefix=\"select\"\n                                options={countriesList}\n                                placeholder=\"Select Country\"\n                                isDisabled\n                                isSearchable={false}\n                                value={selectedCountry}\n                                onChange={(value) => {\n                                  onSelectCountry(value);\n                                  let event = {\n                                    target: {\n                                      name: \"country\",\n                                      value: value.id,\n                                    },\n                                  };\n                                  handleChange(event);\n                                  setTimeout(() => {\n                                    setFieldValue(\"region\", \"\");\n                                  }, 100);\n                                }}\n                              />\n                              <ErrorMessage name=\"country\">\n                                {(msg) => (\n                                  <div className=\"invalid-feedback\">{msg}</div>\n                                )}\n                              </ErrorMessage>\n                            </div>\n                          </div>\n                          <div className=\"col-12 col-lg-6\">\n                            <label>Emirate</label>\n                            <div className=\"input-group mb-3\">\n                              <Select\n                                className={`w-100 form-control-select ${\n                                  errors.emairate && isSubmitted\n                                    ? \"is-invalid\"\n                                    : \"\"\n                                }`}\n                                classNamePrefix=\"select\"\n                                options={emiratesList}\n                                placeholder=\"Select Emirate\"\n                                isSearchable\n                                value={selectedEmirate}\n                                onChange={(value) => {\n                                  setSelectedEmirate(value);\n                                  let event = {\n                                    target: {\n                                      name: \"emairate\",\n                                      value: value.id,\n                                    },\n                                  };\n                                  handleChange(event);\n                                }}\n                              />\n                              <ErrorMessage name=\"emairate\">\n                                {(msg) => (\n                                  <div className=\"invalid-feedback\">{msg}</div>\n                                )}\n                              </ErrorMessage>\n                            </div>\n                          </div>\n                          <div className=\"col-12 col-lg-6\">\n                            <label>Whatsapp No</label>\n                            <div className=\"input-group mb-3\">\n                              <div className=\"input-group-prepend bg-light\">\n                                <span\n                                  className={`input-group-text ${\n                                    errors.whatsappno && isSubmitted\n                                      ? \"border border-danger\"\n                                      : \"\"\n                                  }`}\n                                  id=\"country-code\"\n                                  style={{ fontSize: 14 }}>\n                                  {selectedCountry.phone_code}\n                                </span>\n                              </div>\n                              <Field\n                                type=\"text\"\n                                className={`form-control ${\n                                  errors.whatsappno && isSubmitted\n                                    ? \"is-invalid\"\n                                    : \"\"\n                                }`}\n                                placeholder=\"Whatsapp No\"\n                                name=\"whatsappno\"\n                              />\n                              <ErrorMessage name=\"whatsappno\">\n                                {(msg) => (\n                                  <div className=\"invalid-feedback\">{msg}</div>\n                                )}\n                              </ErrorMessage>\n                            </div>\n                          </div>\n                          <div className=\"col-12 col-lg-6\">\n                            <label>Land Line Number</label>\n                            <div className=\"input-group mb-3\">\n                              <div className=\"input-group-prepend bg-light\">\n                                <span\n                                  className={`input-group-text ${\n                                    errors.landphone && isSubmitted\n                                      ? \"border border-danger\"\n                                      : \"\"\n                                  }`}\n                                  id=\"country-code\"\n                                  style={{ fontSize: 14 }}>\n                                  {selectedCountry.phone_code}\n                                </span>\n                              </div>\n                              <Field\n                                type=\"text\"\n                                className={`form-control ${\n                                  errors.landphone && isSubmitted\n                                    ? \"is-invalid\"\n                                    : \"\"\n                                }`}\n                                placeholder=\"Land Line Number\"\n                                name=\"landphone\"\n                              />\n                              <ErrorMessage name=\"landphone\">\n                                {(msg) => (\n                                  <div className=\"invalid-feedback\">{msg}</div>\n                                )}\n                              </ErrorMessage>\n                            </div>\n                          </div>\n                          <div className=\"col-12 col-lg-6\">\n                            <label>Mobile Number</label>\n                            <div className=\"input-group mb-3\">\n                              <div className=\"input-group-prepend bg-light\">\n                                <span\n                                  className={`input-group-text ${\n                                    errors.mobile && isSubmitted\n                                      ? \"border border-danger\"\n                                      : \"\"\n                                  }`}\n                                  id=\"country-code\"\n                                  style={{ fontSize: 14 }}>\n                                  {selectedCountry.phone_code}\n                                </span>\n                              </div>\n                              <Field\n                                type=\"text\"\n                                className={`form-control ${\n                                  errors.mobile && isSubmitted\n                                    ? \"is-invalid\"\n                                    : \"\"\n                                }`}\n                                placeholder=\"Mobile Number\"\n                                name=\"mobile\"\n                              />\n                              <ErrorMessage name=\"mobile\">\n                                {(msg) => (\n                                  <div className=\"invalid-feedback\">{msg}</div>\n                                )}\n                              </ErrorMessage>\n                            </div>\n                          </div>\n\n                          <div className=\"col-12 col-lg-6\">\n                            <label>Trade License Number</label>\n                            <div className=\"input-group mb-3\">\n                              <Field\n                                type=\"text\"\n                                className={`form-control ${\n                                  errors.tradeLicenseNumber && isSubmitted\n                                    ? \"is-invalid\"\n                                    : \"\"\n                                }`}\n                                placeholder=\"Trade License Number\"\n                                name=\"tradeLicenseNumber\"\n                              />\n                              <ErrorMessage name=\"tradeLicenseNumber\">\n                                {(msg) => (\n                                  <div className=\"invalid-feedback\">{msg}</div>\n                                )}\n                              </ErrorMessage>\n                            </div>\n                          </div>\n                          <div className=\"col-12 col-lg-6\">\n                            <label>Upload Trade License Copy</label>\n                            <div className=\"input-group\">\n                              <input\n                                id=\"tradeFile\"\n                                className={`form-control ${\n                                  errors.tradeFile && isSubmitted\n                                    ? \"is-invalid\"\n                                    : \"\"\n                                }`}\n                                type=\"file\"\n                                onChange={(event) => {\n                                  setFieldValue(\n                                    \"tradeFile\",\n                                    event.currentTarget.files[0]\n                                  );\n                                }}\n                              />\n\n                              <ErrorMessage name=\"tradeFile\">\n                                {(msg) => (\n                                  <div className=\"invalid-feedback\">{msg}</div>\n                                )}\n                              </ErrorMessage>\n                            </div>\n                            <div style={{ fontSize: 10 }} className=\"mb-3\">\n                              Supported file formats JPG, JPEG, PNG, BMP, PDF,\n                              DOC, DOCX\n                            </div>\n                          </div>\n                          <div className=\"col-12 col-lg-6\">\n                            <label>\n                              TRN{\" \"}\n                              <OverlayTrigger\n                                placement=\"top\"\n                                overlay={\n                                  <Tooltip id={`tooltip-top`}>\n                                    15 digits in length\n                                  </Tooltip>\n                                }>\n                                <i\n                                  className=\"fa fa-info-circle\"\n                                  style={{ cursor: \"pointer\" }}></i>\n                              </OverlayTrigger>\n                            </label>\n                            <div className=\"input-group mb-3\">\n                              <Field\n                                type=\"text\"\n                                className={`form-control ${\n                                  errors.trnNumber && isSubmitted\n                                    ? \"is-invalid\"\n                                    : \"\"\n                                }`}\n                                placeholder=\"TRN\"\n                                name=\"trnNumber\"\n                              />\n                              <ErrorMessage name=\"trnNumber\">\n                                {(msg) => (\n                                  <div className=\"invalid-feedback\">{msg}</div>\n                                )}\n                              </ErrorMessage>\n                            </div>\n                          </div>\n                          <div className=\"col-12 col-lg-6\">\n                            <label>Email</label>\n                            <div className=\"input-group mb-3\">\n                              <Field\n                                type=\"text\"\n                                className={`form-control ${\n                                  errors.email && isSubmitted\n                                    ? \"is-invalid\"\n                                    : \"\"\n                                }`}\n                                placeholder=\"Email\"\n                                name=\"email\"\n                              />\n                              <ErrorMessage name=\"email\">\n                                {(msg) => (\n                                  <div className=\"invalid-feedback\">{msg}</div>\n                                )}\n                              </ErrorMessage>\n                            </div>\n                          </div>\n                          <div className=\"col-12 col-lg-6\">\n                            <label>\n                              Password{\" \"}\n                              <OverlayTrigger\n                                placement=\"top\"\n                                overlay={\n                                  <Tooltip id={`tooltip-top`}>\n                                    1 upper case, 1 smaller case, 1 special\n                                    character and a number with minimum 6\n                                    characters in length\n                                  </Tooltip>\n                                }>\n                                <i\n                                  className=\"fa fa-info-circle\"\n                                  style={{ cursor: \"pointer\" }}></i>\n                              </OverlayTrigger>\n                            </label>\n\n                            <div className=\"input-group mb-4\">\n                              <Field\n                                type=\"password\"\n                                className={`form-control ${\n                                  errors.password && isSubmitted\n                                    ? \"is-invalid\"\n                                    : \"\"\n                                }`}\n                                placeholder=\"Password\"\n                                name=\"password\"\n                              />\n                              <ErrorMessage name=\"password\">\n                                {(msg) => (\n                                  <div className=\"invalid-feedback\">{msg}</div>\n                                )}\n                              </ErrorMessage>\n                            </div>\n                          </div>\n                          <div className=\"col-12 col-lg-6\">\n                            <label>Confirm Password</label>\n                            <div className=\"input-group mb-4\">\n                              <Field\n                                type=\"password\"\n                                className={`form-control ${\n                                  errors.conpassword && isSubmitted\n                                    ? \"is-invalid\"\n                                    : \"\"\n                                }`}\n                                placeholder=\"Confirm Password\"\n                                name=\"conpassword\"\n                              />\n                              <ErrorMessage name=\"conpassword\">\n                                {(msg) => (\n                                  <div className=\"invalid-feedback\">{msg}</div>\n                                )}\n                              </ErrorMessage>\n                            </div>\n                          </div>\n                          <div className=\"col-12 col-lg-6\">\n                            <label>Contact Person</label>\n                            <div className=\"input-group mb-3\">\n                              <Field\n                                type=\"text\"\n                                className={`form-control ${\n                                  errors.contact_person && isSubmitted\n                                    ? \"is-invalid\"\n                                    : \"\"\n                                }`}\n                                placeholder=\"Contact Person\"\n                                name=\"contact_person\"\n                              />\n                              <ErrorMessage name=\"contact_person\">\n                                {(msg) => (\n                                  <div className=\"invalid-feedback\">{msg}</div>\n                                )}\n                              </ErrorMessage>\n                            </div>\n                          </div>\n                          <div className=\"col-12 col-lg-6\">\n                            <label>Contact Number</label>\n                            <div className=\"input-group mb-3\">\n                              <div className=\"input-group-prepend bg-light\">\n                                <span\n                                  className={`input-group-text ${\n                                    errors.cp_mobile && isSubmitted\n                                      ? \"border border-danger\"\n                                      : \"\"\n                                  }`}\n                                  id=\"country-code\"\n                                  style={{ fontSize: 14 }}>\n                                  {selectedCountry.phone_code}\n                                </span>\n                              </div>\n                              <Field\n                                type=\"text\"\n                                className={`form-control ${\n                                  errors.cp_mobile && isSubmitted\n                                    ? \"is-invalid\"\n                                    : \"\"\n                                }`}\n                                placeholder=\"Contact Number\"\n                                name=\"cp_mobile\"\n                              />\n                              <ErrorMessage name=\"cp_mobile\">\n                                {(msg) => (\n                                  <div className=\"invalid-feedback\">{msg}</div>\n                                )}\n                              </ErrorMessage>\n                            </div>\n                          </div>\n                          <div className=\"col-12\">\n                            <hr />\n                          </div>\n                          <div className=\"col-12 my-2\">\n                            <label style={{ color: \"#096DA9\" }}>\n                              FTA Login Details &nbsp;\n                              <i className=\"fa fa-info-circle\"></i>\n                            </label>\n                          </div>\n\n                          <div className=\"col-12 col-lg-6\">\n                            <label>FTA Email</label>\n                            <div className=\"input-group mb-3\">\n                              <Field\n                                type=\"text\"\n                                className={`form-control ${\n                                  errors.ftaEmail && isSubmitted\n                                    ? \"is-invalid\"\n                                    : \"\"\n                                }`}\n                                placeholder=\"FTA Email\"\n                                name=\"ftaEmail\"\n                              />\n                              <ErrorMessage name=\"ftaEmail\">\n                                {(msg) => (\n                                  <div className=\"invalid-feedback\">{msg}</div>\n                                )}\n                              </ErrorMessage>\n                            </div>\n                          </div>\n                          <div className=\"col-12 col-lg-6\">\n                            <label>FTA Password</label>\n                            <div className=\"input-group mb-3\">\n                              <Field\n                                type=\"password\"\n                                className={`form-control ${\n                                  errors.ftaPassword && isSubmitted\n                                    ? \"is-invalid\"\n                                    : \"\"\n                                }`}\n                                placeholder=\"FTA Password\"\n                                name=\"ftaPassword\"\n                              />\n                              <ErrorMessage name=\"ftaPassword\">\n                                {(msg) => (\n                                  <div className=\"invalid-feedback\">{msg}</div>\n                                )}\n                              </ErrorMessage>\n                            </div>\n                          </div>\n                          <div className=\"col-12 col-lg-6\">\n                            <label>Upload TRN Certificate</label>\n                            <div className=\"input-group\">\n                              <input\n                                id=\"trnFile\"\n                                className={`form-control ${\n                                  errors.trnFile && isSubmitted\n                                    ? \"is-invalid\"\n                                    : \"\"\n                                }`}\n                                type=\"file\"\n                                onChange={(event) => {\n                                  setFieldValue(\n                                    \"trnFile\",\n                                    event.currentTarget.files[0]\n                                  );\n                                }}\n                              />\n                              <ErrorMessage name=\"trnFile\">\n                                {(msg) => (\n                                  <div className=\"invalid-feedback\">{msg}</div>\n                                )}\n                              </ErrorMessage>\n                            </div>\n                            <div style={{ fontSize: 10 }} className=\"mb-3\">\n                              Supported file formats JPG, JPEG, PNG, BMP, PDF,\n                              DOC, DOCX\n                            </div>\n                          </div>\n\n                          <div className=\"col-12 text-center\">\n                            <button\n                              type=\"submit\"\n                              style={{ width: 180, fontWeight: \"bold\" }}\n                              className=\"btn btn-primary shadow-2 my-4\"\n                              onClick={() => setIsSubmitted(true)}>\n                              Sign Up\n                            </button>\n                            <p className=\"mb-4 text-muted\">\n                              Allready have an account?\n                              <a\n                                style={{ color: \"#096DA9\", fontSize: 13 }}\n                                className=\"ml-2\"\n                                href=\"/home\"\n                                onClick={onSignInClick}>\n                                Login\n                              </a>\n                            </p>\n                          </div>\n                        </div>\n                      </Form>\n                    )}\n                  </Formik>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default SignUp;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/signin/client/SignIn.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/rejected-entries/forms/salesForm.js",["1113","1114"],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/rejected-entries/forms/expenditureForm.js",["1115","1116","1117"],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/validator/rejected-entries/forms/purchaseForm.js",["1118","1119","1120","1121","1122"],"import React, { useState, useEffect, useRef } from \"react\";\nimport { Row, Col, Table, Modal } from \"react-bootstrap\";\nimport { Formik, Field, Form, ErrorMessage, FieldArray } from \"formik\";\nimport * as Yup from \"yup\";\nimport DatePicker from \"react-datepicker\";\nimport Select from \"react-select\";\n\nimport { callApi } from \"../../../../services/apiService\";\nimport { ApiConstants } from \"../../../../config/apiConstants\";\nimport { entryStatus } from \"../../../../enums/entryStatus\";\nimport { showNotification } from \"../../../../services/toasterService\";\n\nconst PurchaseForm = (props) => {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [invoiceDate, setinvoiceDate] = useState(null);\n  const [purchaseData, setPurchaseData] = useState(null);\n  const [groupsList, setGroupsList] = useState([]);\n  const [suppliersList, setSuppliersList] = useState([]);\n  const [enableRecheck, setenableRecheck] = useState(false);\n  const [showStatusConfirm, setStatusConfirm] = React.useState(false);\n  const [validatorAction, setvalidatorAction] = React.useState(\"\");\n  const actionComment = useRef(null);\n\n  const PurchaseFormSchema = Yup.object().shape({\n    supplier_id: Yup.mixed().required(\"Please select Supplier\"),\n    trn: Yup.string(),\n    invoice_number: Yup.string().required(\"Please enter Invoice number\"),\n    invoice_date: Yup.mixed().required(\"Please select Date\"),\n    invoice_details: Yup.array().of(\n      Yup.object().shape({\n        invoice_group_id: Yup.string().required(\"Please select Group\"),\n        invoice_sub_group_id: Yup.string().required(\"Please select Sub Group\"),\n        invoice_item_id: Yup.string().required(\"Please select Item\"),\n        unit_price: Yup.string().required(\"Please enter Unit Price\"),\n        quantity: Yup.string().required(\"Please enter Quantity\"),\n        amount: Yup.string().required(\"Please enter Amount\"),\n      })\n    ),\n    subtotal: Yup.string(),\n    discount: Yup.string(),\n    vatamount: Yup.string(),\n    totalamount: Yup.string(),\n  });\n\n  useEffect(() => {\n    invoicePurchaseGroups();\n    getSuppliers();\n  }, []);\n\n  useEffect(() => {\n    if (groupsList.length) {\n      getData();\n    }\n  }, [groupsList]);\n\n  const getData = () => {\n    props.onShowLoader(true);\n    let params = { entry_id: props.entry.id };\n    callApi(\"get\", ApiConstants.purchase.getData, params, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          setPurchaseData(response.payload);\n          setinvoiceDate(new Date(response.payload?.header?.invoice_date));\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const entryAction = () => {\n    props.onShowLoader(true);\n    let params = {\n      entry_id: props.entry.id,\n      status_id: validatorAction,\n      comment: actionComment.current.value,\n    };\n\n    callApi(\"post\", ApiConstants.entry.setvalidatorstatus, params, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          props.onSuccess();\n          showNotification(\"Success\", response.message, \"success\");\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const invoicePurchaseGroups = () => {\n    props.onShowLoader(true);\n    callApi(\"get\", ApiConstants.lookups.invoicepurchasegroups, null, true)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          let data = response.payload.map((i) => {\n            return { ...i, value: i.id, label: i.name };\n          });\n          setGroupsList(data);\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const getSuppliers = () => {\n    props.onShowLoader(true);\n    callApi(\"get\", ApiConstants.lookups.getSuppliers, null)\n      .then((response) => {\n        props.onShowLoader(false);\n        if (response && response.status_code === 200) {\n          let suppliers = response.payload.map((i) => {\n            return { ...i, value: i.id, label: i.name };\n          });\n          setSuppliersList(suppliers);\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        props.onShowLoader(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const getSubGroups = (groupId) => {\n    let selectedGroup = groupsList.find((i) => i.id === groupId);\n    let subGroups = selectedGroup\n      ? selectedGroup.invoice_sub_groups.map((i) => {\n          return { ...i, value: i.id, label: i.name };\n        })\n      : [];\n    return subGroups;\n  };\n\n  const getSelectedSubGroup = (groupId, selectedId) => {\n    let selectedGroup = groupsList.find((i) => i.id === groupId);\n    let subGroups = selectedGroup\n      ? selectedGroup.invoice_sub_groups.map((i) => {\n          return { ...i, value: i.id, label: i.name };\n        })\n      : [];\n\n    let selectedSubGroup = null;\n    if (subGroups && selectedId) {\n      selectedSubGroup = subGroups.find((i) => i.id === selectedId);\n    }\n    return selectedSubGroup;\n  };\n\n  const getSubItems = (groupId, subgroupId) => {\n    let selectedGroup = groupsList.find((i) => i.id === groupId);\n    let subGroups = selectedGroup ? selectedGroup.invoice_sub_groups : [];\n    let selectedSubGroup = subGroups.find((i) => i.id === subgroupId);\n    let subItems = selectedSubGroup\n      ? selectedSubGroup.invoice_items.map((i) => {\n          return { ...i, value: i.id, label: i.name };\n        })\n      : [];\n    return subItems;\n  };\n\n  const getSelectedSubItem = (groupId, subgroupId, selectedId) => {\n    let selectedGroup = groupsList.find((i) => i.id === groupId);\n    let subGroups = selectedGroup ? selectedGroup.invoice_sub_groups : [];\n    let selectedSubGroup = subGroups.find((i) => i.id === subgroupId);\n    let subItems = selectedSubGroup\n      ? selectedSubGroup.invoice_items.map((i) => {\n          return { ...i, value: i.id, label: i.name };\n        })\n      : [];\n\n    let selectedSubItem = null;\n    if (subItems && selectedId) {\n      selectedSubItem = subItems.find((i) => i.id === selectedId);\n    }\n    return selectedSubItem;\n  };\n\n  const calculateTotal = (\n    values,\n    setFieldValue,\n    index,\n    fieldValue,\n    fieldType\n  ) => {\n    let amount = 0;\n    if (fieldType === \"unit_price\")\n      amount = values.invoice_details[index].quantity * fieldValue;\n    if (fieldType === \"quantity\")\n      amount = values.invoice_details[index].unit_price * fieldValue;\n\n    setFieldValue(`invoice_details.${index}.amount`, amount);\n    values.invoice_details[index].amount = amount;\n\n    let subtotal = values.invoice_details.reduce((sum, item) => {\n      return sum + item.amount;\n    }, 0);\n    setFieldValue(\"subtotal\", subtotal);\n    values.subtotal = subtotal;\n\n    let discountAmt = values.discount ? values.discount : 0;\n    let vatamount =\n      ((values.subtotal - discountAmt) * props.entry.vat_percentage) / 100;\n    setFieldValue(\"vatamount\", vatamount);\n\n    let totalamount = values.subtotal - discountAmt + vatamount;\n    setFieldValue(\"totalamount\", totalamount);\n  };\n\n  return (\n    <React.Fragment>\n      <div>\n        <Formik\n          enableReinitialize={true}\n          initialValues={{\n            supplier_id: purchaseData?.header?.supplier_id\n              ? purchaseData.header.supplier_id\n              : \"\",\n            trn: purchaseData?.header?.supplier_trn\n              ? purchaseData.header.supplier_trn\n              : \"\",\n            invoice_number: purchaseData?.header?.invoice_number\n              ? purchaseData.header.invoice_number\n              : \"\",\n            invoice_date: \"\",\n            invoice_details: purchaseData?.details\n              ? purchaseData.details.map((i) => {\n                  return {\n                    invoice_group_id: i.invoice_group_id,\n                    invoice_sub_group_id: i.invoice_sub_group_id,\n                    invoice_item_id: i.invoice_item_id,\n                    unit_price: i.price,\n                    quantity: i.qty,\n                    amount: i.amount,\n                  };\n                })\n              : [],\n            subtotal: purchaseData?.header?.sub_total\n              ? purchaseData.header.sub_total\n              : \"\",\n            discount: purchaseData?.header?.discount\n              ? purchaseData.header.discount\n              : \"0\",\n            vatamount: purchaseData?.header?.vat_amount\n              ? purchaseData.header.vat_amount\n              : \"\",\n            totalamount: purchaseData?.header?.total_amount\n              ? purchaseData.header.total_amount\n              : \"\",\n          }}\n          validationSchema={PurchaseFormSchema}>\n          {({ errors, handleChange, setFieldValue, values }) => (\n            <Form>\n              <Row>\n                <Col lg={6} xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Select\n                      className={`w-100 form-control-select ${\n                        errors.supplier_id && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      classNamePrefix=\"select\"\n                      options={suppliersList}\n                      placeholder=\"Supplier\"\n                      isSearchable={false}\n                      isDisabled\n                      value={suppliersList.find(\n                        (i) => i.value === values?.supplier_id\n                      )}\n                    />\n                    <ErrorMessage name=\"supplier_id\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n                <Col lg={6} xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      disabled\n                      className={`form-control ${\n                        errors.trn && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholder=\"TRN\"\n                      name=\"trn\"\n                    />\n                    <ErrorMessage name=\"trn\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n                <Col lg={6} xs={12}>\n                  <div className=\"input-group mb-3\">\n                    <Field\n                      type=\"text\"\n                      disabled\n                      className={`form-control ${\n                        errors.invoice_number && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholder=\"Invoice Number\"\n                      name=\"invoice_number\"\n                    />\n                    <ErrorMessage name=\"invoice_number\">\n                      {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n                <Col lg={6} xs={12}>\n                  <div className=\"date-picker-container mb-3\">\n                    <DatePicker\n                      className={`form-control ${\n                        errors.invoice_date && isSubmitted ? \"is-invalid\" : \"\"\n                      }`}\n                      placeholderText=\"Date\"\n                      disabled\n                      dateFormat=\"dd/MM/yyyy\"\n                      selected={invoiceDate}\n                      onChange={(value) => {\n                        setinvoiceDate(value);\n                        let event = {\n                          target: {\n                            name: \"invoice_date\",\n                            value: value,\n                          },\n                        };\n                        handleChange(event);\n                      }}\n                    />\n                    <i className=\"feather icon-calendar\"></i>\n                    <ErrorMessage name=\"invoice_date\">\n                      {(msg) => (\n                        <div className=\"invalid-feedback d-block\">{msg}</div>\n                      )}\n                    </ErrorMessage>\n                  </div>\n                </Col>\n\n                <Col lg={12} className=\"overflow-auto\">\n                  <Table className=\"purchase-grid\">\n                    <thead>\n                      <tr>\n                        <th>#</th>\n                        <th width=\"120\">Group</th>\n                        <th width=\"120\">Sub Group</th>\n                        <th width=\"120\">Item Name</th>\n                        <th>Unit Price</th>\n                        <th>Quantity</th>\n                        <th>Amount</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <FieldArray\n                        name=\"invoice_details\"\n                        render={(arrayHelpers) => (\n                          <React.Fragment>\n                            {values.invoice_details.map((item, index) => (\n                              <tr key={index}>\n                                <td scope=\"row\">{index + 1}</td>\n                                <td>\n                                  <Select\n                                    className=\"w-100 form-control-select\"\n                                    classNamePrefix=\"select\"\n                                    options={groupsList}\n                                    value={groupsList.find(\n                                      (i) =>\n                                        i.value ===\n                                        values?.invoice_details[index]\n                                          .invoice_group_id\n                                    )}\n                                    placeholder=\"Select\"\n                                    isSearchable={false}\n                                    isDisabled\n                                  />\n                                </td>\n                                <td>\n                                  <Select\n                                    className=\"w-100 form-control-select\"\n                                    classNamePrefix=\"select\"\n                                    options={getSubGroups(\n                                      values.invoice_details[index]\n                                        .invoice_group_id\n                                    )}\n                                    value={getSelectedSubGroup(\n                                      values.invoice_details[index]\n                                        .invoice_group_id,\n                                      values.invoice_details[index]\n                                        .invoice_sub_group_id\n                                    )}\n                                    placeholder=\"Select\"\n                                    isSearchable={false}\n                                    isDisabled\n                                  />\n                                </td>\n                                <td>\n                                  <Select\n                                    className=\"w-100 form-control-select\"\n                                    classNamePrefix=\"select\"\n                                    options={getSubItems(\n                                      values.invoice_details[index]\n                                        .invoice_group_id,\n                                      values.invoice_details[index]\n                                        .invoice_sub_group_id\n                                    )}\n                                    value={getSelectedSubItem(\n                                      values.invoice_details[index]\n                                        .invoice_group_id,\n                                      values.invoice_details[index]\n                                        .invoice_sub_group_id,\n                                      values.invoice_details[index]\n                                        .invoice_item_id\n                                    )}\n                                    placeholder=\"Select\"\n                                    isSearchable={false}\n                                    isDisabled\n                                  />\n                                </td>\n                                <td>\n                                  <Field\n                                    type=\"text\"\n                                    className=\"grid-input\"\n                                    name={`invoice_details.${index}.unit_price`}\n                                    value={\n                                      values.invoice_details[index].unit_price\n                                    }\n                                    disabled\n                                  />\n                                </td>\n                                <td>\n                                  <Field\n                                    type=\"text\"\n                                    className=\"grid-input\"\n                                    name={`invoice_details.${index}.quantity`}\n                                    value={\n                                      values.invoice_details[index].quantity\n                                    }\n                                    disabled\n                                  />\n                                </td>\n                                <td>\n                                  <Field\n                                    type=\"text\"\n                                    className=\"grid-input\"\n                                    disabled\n                                    name={`invoice_details.${index}.amount`}\n                                  />\n                                </td>\n                              </tr>\n                            ))}\n                          </React.Fragment>\n                        )}\n                      />\n                      <tr>\n                        <td colSpan=\"6\">\n                          <div className=\"text-right\">\n                            <label className=\"mr-3\">Sub Total</label>\n                          </div>\n                        </td>\n                        <td>\n                          <Field\n                            type=\"text\"\n                            className=\"grid-input\"\n                            name=\"subtotal\"\n                            disabled\n                          />\n                        </td>\n                      </tr>\n                      <tr>\n                        <td colSpan=\"6\">\n                          <div className=\"text-right\">\n                            <label className=\"mr-3\">Discount Rounded</label>\n                          </div>\n                        </td>\n                        <td>\n                          <Field\n                            type=\"text\"\n                            className=\"grid-input\"\n                            name=\"discount\"\n                            disabled\n                            value={values.discount}\n                            onChange={(e) => {\n                              handleChange(e);\n                              let discountAmt = e.target.value\n                                ? e.target.value\n                                : 0;\n                              let vatamount =\n                                ((values.subtotal - discountAmt) *\n                                  props.entry.vat_percentage) /\n                                100;\n                              setFieldValue(\"vatamount\", vatamount);\n\n                              let totalamount =\n                                values.subtotal - discountAmt + vatamount;\n                              setFieldValue(\"totalamount\", totalamount);\n                            }}\n                          />\n                        </td>\n                      </tr>\n                      <tr>\n                        <td colSpan=\"6\">\n                          <div className=\"text-right\">\n                            <label className=\"mr-3\">VAT Amount</label>\n                          </div>\n                        </td>\n                        <td>\n                          <Field\n                            type=\"text\"\n                            disabled\n                            className=\"grid-input\"\n                            name=\"vatamount\"\n                          />\n                        </td>\n                      </tr>\n                      <tr>\n                        <td colSpan=\"6\">\n                          <div className=\"text-right\">\n                            <label className=\"mr-3\">Total</label>\n                          </div>\n                        </td>\n                        <td>\n                          <Field\n                            type=\"text\"\n                            disabled\n                            className=\"grid-input\"\n                            name=\"totalamount\"\n                          />\n                        </td>\n                      </tr>\n                    </tbody>\n                  </Table>\n                </Col>\n              </Row>\n              <div className=\"mt-4\">\n                <div className=\"checkbox d-flex p-0\">\n                  <input\n                    type=\"checkbox\"\n                    name=\"checkbox-fill-1\"\n                    id=\"checkbox-fill-a1\"\n                    onChange={() => setenableRecheck(!enableRecheck)}\n                  />\n                  <label htmlFor=\"checkbox-fill-a1\" className=\"cr\">\n                    Enable Reject Entry\n                  </label>\n                </div>\n              </div>\n              <div className=\"mt-2 text-center\">\n                <button\n                  type=\"button\"\n                  disabled={!enableRecheck}\n                  style={{ width: 100, fontWeight: \"bold\" }}\n                  className=\"btn btn-danger shadow-2 mt-3 mr-3\"\n                  onClick={() => {\n                    setStatusConfirm(true);\n                    setvalidatorAction(entryStatus.REJECTED);\n                  }}>\n                  Reject\n                </button>\n                <button\n                  type=\"button\"\n                  style={{ width: 100, fontWeight: \"bold\" }}\n                  className=\"btn btn-warning shadow-2 mt-3 mr-3\"\n                  onClick={() => {\n                    setStatusConfirm(true);\n                    setvalidatorAction(entryStatus.RECHECK);\n                  }}>\n                  Recheck\n                </button>\n                <button\n                  type=\"button\"\n                  style={{ width: 100, fontWeight: \"bold\" }}\n                  className=\"btn btn-primary shadow-2 mt-3\"\n                  onClick={() => {\n                    setStatusConfirm(true);\n                    setvalidatorAction(entryStatus.APPROVED);\n                  }}>\n                  Approve\n                </button>\n              </div>\n            </Form>\n          )}\n        </Formik>\n      </div>\n      <Modal\n        size=\"md\"\n        show={showStatusConfirm}\n        backdrop=\"static\"\n        keyboard={true}\n        backdropClassName=\"nested-modal\">\n        <Modal.Header>\n          <h5 className=\"card-title\">\n            {validatorAction === entryStatus.APPROVED\n              ? \"Approve\"\n              : validatorAction === entryStatus.RECHECK\n              ? \"Recheck\"\n              : \"Reject\"}{\" \"}\n            Entry\n          </h5>\n        </Modal.Header>\n        <Modal.Body>\n          <div>\n            <span>\n              Are you sure that to{\" \"}\n              {validatorAction === entryStatus.APPROVED\n                ? \"Approve\"\n                : validatorAction === entryStatus.RECHECK\n                ? \"Recheck\"\n                : \"Reject\"}\n              ?\n            </span>\n          </div>\n          <div className=\"mt-4\">\n            <textarea\n              ref={actionComment}\n              className=\"form-control\"\n              placeholder=\"Comment\"></textarea>\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <div>\n            <button\n              className=\"btn btn-outline-primary\"\n              onClick={() => setStatusConfirm(false)}>\n              Cancel\n            </button>\n            <button\n              className={`btn ${\n                validatorAction === entryStatus.APPROVED\n                  ? \"btn-primary\"\n                  : validatorAction === entryStatus.RECHECK\n                  ? \"btn-warning\"\n                  : \"btn-danger\"\n              }`}\n              onClick={() => {\n                setStatusConfirm(false);\n                entryAction();\n              }}>\n              {validatorAction === entryStatus.APPROVED\n                ? \"Approve\"\n                : validatorAction === entryStatus.RECHECK\n                ? \"Recheck\"\n                : \"Reject\"}\n            </button>\n          </div>\n        </Modal.Footer>\n      </Modal>\n    </React.Fragment>\n  );\n};\n\nexport default PurchaseForm;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/layouts/AdminLayout/Breadcrumb/index.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/layouts/AdminLayout/Navigation/index.js",["1123"],"import React, { useContext } from \"react\";\n\nimport { ConfigContext } from \"../../../contexts/ConfigContext\";\nimport useWindowSize from \"../../../hooks/useWindowSize\";\n\nimport NavLogo from \"./NavLogo\";\nimport NavContent from \"./NavContent\";\nimport navigation from \"../../../menu-items\";\n\nconst Navigation = () => {\n  const configContext = useContext(ConfigContext);\n  const {\n    layout,\n    layoutType,\n    navFixedLayout,\n    collapseMenu,\n    rtlLayout,\n    boxLayout,\n    subLayout,\n    navBackColor,\n    navDropdownIcon,\n    navBrandColor,\n    navListIcon,\n    navActiveListColor,\n    navListTitleColor,\n    navBackImage,\n    navIconColor,\n    navListTitleHide,\n    layout6Background,\n    layout6BackSize,\n  } = configContext.state;\n  const windowSize = useWindowSize();\n\n  let navClass = [\n    \"pcoded-navbar\",\n    //layoutType\n  ];\n\n  if (\n    subLayout !== null &&\n    subLayout !== \"\" &&\n    subLayout !== \"layout-6\" &&\n    subLayout !== \"layout-8\" &&\n    subLayout !== \"horizontal-2\"\n  ) {\n    navClass = [...navClass, subLayout];\n  } else {\n    navClass = [\n      ...navClass,\n      layoutType,\n      navBackColor,\n      navBrandColor,\n      \"drp-icon-\" + navDropdownIcon,\n      \"menu-item-icon-\" + navListIcon,\n      navActiveListColor,\n      navListTitleColor,\n    ];\n\n    if (navBackImage) {\n      navClass = [...navClass, navBackImage];\n    }\n\n    if (navIconColor) {\n      navClass = [...navClass, \"icon-colored\"];\n    }\n\n    if (!navFixedLayout && layout !== \"horizontal\") {\n      navClass = [...navClass, \"menupos-static\"];\n    }\n\n    if (navListTitleHide) {\n      navClass = [...navClass, \"caption-hide\"];\n    }\n  }\n\n  if (layout === \"horizontal\") {\n    navClass = [...navClass, \"theme-horizontal\"];\n  }\n\n  if (windowSize.width < 992 && collapseMenu) {\n    navClass = [...navClass, \"mob-open\"];\n  } else if (collapseMenu) {\n    navClass = [...navClass, \"navbar-collapsed\"];\n  }\n\n  if (subLayout === \"layout-6\") {\n    document.body.classList.add(\"layout-6\");\n    document.body.style.backgroundImage = layout6Background;\n    document.body.style.backgroundSize = layout6BackSize;\n  }\n\n  if (subLayout === \"layout-8\") {\n    document.body.classList.add(\"layout-8\");\n  }\n\n  if (layoutType === \"dark\") {\n    document.body.classList.add(\"datta-dark\");\n  } else {\n    document.body.classList.remove(\"datta-dark\");\n  }\n  if (rtlLayout) {\n    document.body.classList.add(\"datta-rtl\");\n  } else {\n    document.body.classList.remove(\"datta-rtl\");\n  }\n\n  if (boxLayout) {\n    document.body.classList.add(\"container\");\n    document.body.classList.add(\"box-layout\");\n  } else {\n    document.body.classList.remove(\"container\");\n    document.body.classList.remove(\"box-layout\");\n  }\n\n  let backImage, navStyle;\n\n  let navBarClass = [\"navbar-wrapper\"];\n  if (layout === \"horizontal\" && subLayout === \"horizontal-2\") {\n    navBarClass = [...navBarClass, \"container\"];\n  }\n\n  let navContent = (\n    <div className={navBarClass.join(\" \")}>\n      <NavLogo />\n      <NavContent navigation={navigation.items} />\n    </div>\n  );\n  if (windowSize.width < 992) {\n    navContent = (\n      <div className=\"navbar-wrapper\">\n        <NavLogo />\n        <NavContent navigation={navigation.items} />\n      </div>\n    );\n  }\n  return (\n    <React.Fragment>\n      <nav className={navClass.join(\" \")} style={navStyle}>\n        {navContent}\n      </nav>\n    </React.Fragment>\n  );\n};\n\nexport default Navigation;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/layouts/AdminLayout/NavBar/index.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/menu-items.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/layouts/AdminLayout/Navigation/NavLogo/index.js",["1124"],"import React, { useContext, useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ConfigContext } from \"../../../../contexts/ConfigContext\";\nimport * as actionType from \"../../../../store/actions\";\n\nimport logo from \"../../../../assets/images/logo-title.png\";\nimport vatzlogo from \"../../../../assets/images/vatzapp-logo.png\";\nimport { userRoles } from \"../../../../enums/UserRoles\";\n\nconst NavLogo = () => {\n  const configContext = useContext(ConfigContext);\n  const { collapseMenu } = configContext.state;\n  const { dispatch } = configContext;\n  const [userRole, setuserRole] = useState(0);\n\n  useEffect(() => {\n    let userObj = JSON.parse(localStorage.getItem(\"user\"));\n    setuserRole(userObj.user_role_id);\n  }, []);\n\n  let toggleClass = [\"mobile-menu\"];\n  if (collapseMenu) {\n    toggleClass = [...toggleClass, \"on\"];\n  }\n\n  const getDefaultRoute = () => {\n    let route = \"\";\n    switch (userRole) {\n      case userRoles.Client:\n        route = \"/dashboard\";\n        break;\n      case userRoles.Checker:\n        route = \"checker/dashboard\";\n        break;\n      case userRoles.Validator:\n        route = \"validator/dashboard\";\n        break;\n      case userRoles.Administrator:\n        route = \"admin/dashboard\";\n        break;\n      case userRoles.SuperAdmin:\n        route = \"admin/dashboard\";\n        break;\n    }\n    return route;\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"navbar-brand header-logo\">\n        <Link to={getDefaultRoute()} className=\"b-brand\">\n          <div\n            className=\"b-bg\"\n            style={{\n              background: `url(${vatzlogo})`,\n              backgroundSize: \"cover\",\n              backgroundRepeat: \"no-repeat\",\n            }}></div>\n          <span className=\"b-title\">\n            <img src={logo} alt=\"Logo\" style={{ height: 22, marginTop: 14 }} />\n          </span>\n        </Link>\n        <Link\n          to=\"#\"\n          className={toggleClass.join(\" \")}\n          id=\"mobile-collapse\"\n          onClick={() => dispatch({ type: actionType.COLLAPSE_MENU })}>\n          <span />\n        </Link>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default NavLogo;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/layouts/AdminLayout/Navigation/NavContent/index.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/layouts/AdminLayout/NavBar/NavRight/index.js",["1125","1126","1127","1128","1129","1130"],"import React, { useContext, useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ListGroup, Dropdown, Media, OverlayTrigger, Popover, Button, Badge } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n// import PerfectScrollbar from \"react-perfect-scrollbar\";\nimport axios from \"axios\";\nimport ChatList from \"./ChatList\";\nimport moment from \"moment\";\nimport { ConfigContext } from \"../../../../contexts/ConfigContext\";\nimport { userRolesList } from \"../../../../enums/UserRoles\";\nimport { callApi } from \"../../../../services/apiService\";\n\nimport { showNotification } from \"../../../../services/toasterService\";\n// import avatar1 from \"../../../../assets/images/user/avatar-1.jpg\";\nimport avatar2 from \"../../../../assets/images/user/avatar-2.jpg\";\n// import avatar3 from \"../../../../assets/images/user/avatar-3.jpg\";\n// import avatar4 from \"../../../../assets/images/user/avatar-4.jpg\";\n\nimport { CONFIG } from \"../../../../config/constant\";\nimport { ApiConstants } from \"../../../../config/apiConstants\";\n\nconst NavRight = () => {\n\tconst configContext = useContext(ConfigContext);\n\tconst { rtlLayout } = configContext.state;\n\n\tconst [listOpen, setListOpen] = useState(false);\n\tconst [userName, setuserName] = useState(\"\");\n\tconst [userSubscriptionExpiry, setuserSubscriptionExpiry] = useState({});\n\tconst [userRole, setuserRole] = useState(\"\");\n\tconst [userImg, setuserImg] = useState(\"\");\n\tconst userObj = React.useRef(JSON.parse(localStorage.getItem(\"user\")));\n\tlet history = useHistory();\n\n\tconst getData = React.useCallback(() => {\n\t\tlet isApiMounted = true;\n\t\tsetuserName(userObj.current?.user_name);\n\t\tsetuserImg(userObj.current?.profile_image?.file_path);\n\t\tsetuserRole(userRolesList.find((i) => i.id === userObj.current.user_role_id).value);\n\n\t\tif (userObj?.current?.token && userObj?.current?.user_role_id === 5) {\n\t\t\tcallApi(\"get\", ApiConstants.client.getclient, null, true)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tif (isApiMounted && response && response.status_code === 200) {\n\t\t\t\t\t\t// console.log(new Date(new Date(response.payload?.to).getTime()).setHours(12, 50, 0, 0));\n\t\t\t\t\t\t// console.log(new Date(new Date().getTime()).setHours(12, 50, 0, 0));\n\t\t\t\t\t\tsetuserSubscriptionExpiry({ status: \"Subscription Expired\", color: \"danger\" });\n\t\t\t\t\t\tif (new Date(new Date(response.payload?.to).getTime()).setHours(12, 50, 0, 0) === new Date(new Date().setHours(12, 50, 0, 0)).getTime()) {\n\t\t\t\t\t\t\tsetuserSubscriptionExpiry({ status: \"Subscription Expiring Today\", color: \"warning\" });\n\t\t\t\t\t\t} else if (new Date(new Date(response.payload?.to).getTime()).setHours(12, 50, 0, 0) > new Date(new Date().setHours(12, 50, 0, 0)).getTime()) {\n\t\t\t\t\t\t\tsetuserSubscriptionExpiry({\n\t\t\t\t\t\t\t\tstatus: `Subscription Expiring on ${moment(response.payload?.to).format(\"DD-MMM-YYYY\")}`,\n\t\t\t\t\t\t\t\tcolor: \"success\",\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tshowNotification(\"Error\", response.message, \"error\");\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tshowNotification(\"Error\", \"Something went wrong\", \"error\");\n\t\t\t\t});\n\t\t}\n\t\treturn () => {\n\t\t\tisApiMounted = false;\n\t\t};\n\t}, []);\n\n\tuseEffect(() => {\n\t\tgetData();\n\t}, []);\n\n\tconst logout = () => {\n\t\tsessionStorage.removeItem(\"auth\");\n\t\tsessionStorage.removeItem(\"user\");\n\t};\n\n\tconst handleLogout = async () => {\n\t\ttry {\n\t\t\t//handleClose();\n\t\t\tlogout();\n\t\t\thistory.push(\"/home\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t}\n\t};\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<ListGroup as=\"ul\" bsPrefix=\" \" className=\"navbar-nav ml-auto\" id=\"navbar-right\">\n\t\t\t\t{userRole === \"Client\" && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<ListGroup.Item as=\"li\" bsPrefix=\" \">\n\t\t\t\t\t\t\t<Badge variant={userSubscriptionExpiry.color}>{userSubscriptionExpiry.status}</Badge>\n\t\t\t\t\t\t\t{/* <OverlayTrigger trigger=\"click\" placement=\"bottom\" overlay={popover}>\n\t\t\t\t\t\t\t\t<i className=\"icon feather icon-bell\" />\n\t\t\t\t\t\t\t</OverlayTrigger> */}\n\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t\t<ListGroup.Item as=\"li\" bsPrefix=\" \">\n\t\t\t\t\t<Dropdown>\n\t\t\t\t\t\t<Dropdown.Toggle as={Link} variant=\"link\" to=\"#\" className=\"displayChatbox\" onClick={() => setListOpen(true)}>\n\t\t\t\t\t\t\t<i className=\"icon feather icon-mail\" />\n\t\t\t\t\t\t</Dropdown.Toggle>\n\t\t\t\t\t</Dropdown>\n\t\t\t\t</ListGroup.Item>\n\t\t\t\t<ListGroup.Item as=\"li\" bsPrefix=\" \">\n\t\t\t\t\t<Dropdown alignRight={!rtlLayout} className=\"drp-user\">\n\t\t\t\t\t\t<Dropdown.Toggle as={Link} variant=\"link\" to=\"#\" id=\"dropdown-basic\">\n\t\t\t\t\t\t\t<div className=\"pro-head header-avtr\">\n\t\t\t\t\t\t\t\t<div style={{ lineHeight: \"normal\", marginRight: 10 }}>\n\t\t\t\t\t\t\t\t\t<div>{userName}</div>\n\t\t\t\t\t\t\t\t\t<div className=\"avtr-user-role\">{userRole}</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"profile-avatr\" style={{ width: 40, height: 40 }}>\n\t\t\t\t\t\t\t\t\t{userImg ? <img src={CONFIG.API_BASE_URL + ApiConstants.file.view + \"?file_name=\" + userImg} className=\"display_pic\" alt=\"User Profile\" style={{ width: 40, height: 40 }} /> : <img src={avatar2} className=\"display_pic\" alt=\"User Profile\" />}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Dropdown.Toggle>\n\t\t\t\t\t\t<Dropdown.Menu alignRight className=\"profile-notification\">\n\t\t\t\t\t\t\t<ListGroup as=\"ul\" bsPrefix=\" \" variant=\"flush\" className=\"pro-body\">\n\t\t\t\t\t\t\t\t<ListGroup.Item as=\"li\" bsPrefix=\" \">\n\t\t\t\t\t\t\t\t\t<Link to=\"/profile\" className=\"dropdown-item\">\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-user\" /> Profile\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t<ListGroup.Item as=\"li\" bsPrefix=\" \">\n\t\t\t\t\t\t\t\t\t<Link to=\"/change-password\" className=\"dropdown-item\">\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-settings\" /> Change Password\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t<ListGroup.Item as=\"li\" bsPrefix=\" \">\n\t\t\t\t\t\t\t\t\t<Link to=\"#\" className=\"dropdown-item\" onClick={handleLogout}>\n\t\t\t\t\t\t\t\t\t\t<i className=\"feather icon-log-out\" /> Logout\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t</ListGroup>\n\t\t\t\t\t\t</Dropdown.Menu>\n\t\t\t\t\t</Dropdown>\n\t\t\t\t</ListGroup.Item>\n\t\t\t</ListGroup>\n\t\t\t<ChatList listOpen={listOpen} closed={() => setListOpen(false)} />\n\t\t</React.Fragment>\n\t);\n};\n\nexport default NavRight;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/layouts/AdminLayout/Navigation/NavContent/NavGroup/index.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/layouts/AdminLayout/NavBar/NavRight/ChatList/index.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/layouts/AdminLayout/Navigation/NavContent/NavCollapse/index.js",["1131"],"import React, { useContext, useEffect } from \"react\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\nimport NavItem from \"../NavItem\";\nimport LoopNavCollapse from \"./index\";\nimport NavIcon from \"../NavIcon\";\nimport NavBadge from \"../NavBadge\";\n\nimport { ConfigContext } from \"../../../../../contexts/ConfigContext\";\nimport * as actionType from \"../../../../../store/actions\";\n\nconst NavCollapse = ({ collapse, type }) => {\n  const configContext = useContext(ConfigContext);\n  const { dispatch } = configContext;\n\n  const { layout, isOpen, isTrigger } = configContext.state;\n\n  useEffect(() => {\n    const currentIndex = document.location.pathname\n      .toString()\n      .split(\"/\")\n      .findIndex((id) => id === collapse.id);\n    if (\n      currentIndex > -1 &&\n      isOpen.findIndex((id) => id === collapse.id) === -1\n    ) {\n      dispatch({\n        type: actionType.COLLAPSE_TOGGLE,\n        menu: { id: collapse.id, type: type },\n      });\n    }\n  }, [collapse, dispatch, type]);\n\n  let navItems = \"\";\n  if (collapse.children) {\n    const collapses = collapse.children;\n    navItems = Object.keys(collapses).map((item) => {\n      item = collapses[item];\n      switch (item.type) {\n        case \"collapse\":\n          return <LoopNavCollapse key={item.id} collapse={item} type=\"sub\" />;\n        case \"item\":\n          return <NavItem layout={layout} key={item.id} item={item} />;\n        default:\n          return false;\n      }\n    });\n  }\n\n  let itemTitle = collapse.title;\n  if (collapse.icon) {\n    itemTitle = <span className=\"pcoded-mtext\">{collapse.title}</span>;\n  }\n\n  let navLinkClass = [\"nav-link\"];\n\n  let navItemClass = [\"nav-item\", \"pcoded-hasmenu\"];\n  const openIndex = isOpen.findIndex((id) => id === collapse.id);\n  if (openIndex > -1) {\n    navItemClass = [...navItemClass, \"active\"];\n    if (layout !== \"horizontal\") {\n      navLinkClass = [...navLinkClass, \"active\"];\n    }\n  }\n\n  const triggerIndex = isTrigger.findIndex((id) => id === collapse.id);\n  if (triggerIndex > -1) {\n    navItemClass = [...navItemClass, \"pcoded-trigger\"];\n  }\n\n  const currentIndex = document.location.pathname\n    .toString()\n    .split(\"/\")\n    .findIndex((id) => id === collapse.id);\n  if (currentIndex > -1) {\n    navItemClass = [...navItemClass, \"active\"];\n    if (layout !== \"horizontal\") {\n      navLinkClass = [...navLinkClass, \"active\"];\n    }\n  }\n\n  const subContent = (\n    <React.Fragment>\n      <Link\n        to=\"#\"\n        className={navLinkClass.join(\" \")}\n        onClick={() =>\n          dispatch({\n            type: actionType.COLLAPSE_TOGGLE,\n            menu: { id: collapse.id, type: type },\n          })\n        }>\n        <NavIcon items={collapse} />\n        {itemTitle}\n        <NavBadge items={collapse} />\n      </Link>\n      <ListGroup\n        variant=\"flush\"\n        bsPrefix=\" \"\n        as=\"ul\"\n        className=\"pcoded-submenu\">\n        {navItems}\n      </ListGroup>\n    </React.Fragment>\n  );\n\n  let mainContent = \"\";\n  if (layout === \"horizontal\") {\n    mainContent = (\n      <ListGroup.Item\n        as=\"li\"\n        bsPrefix=\" \"\n        className={navItemClass.join(\" \")}\n        onMouseLeave={() =>\n          dispatch({\n            type: actionType.NAV_COLLAPSE_LEAVE,\n            menu: { id: collapse.id, type: type },\n          })\n        }\n        onMouseEnter={() =>\n          dispatch({\n            type: actionType.COLLAPSE_TOGGLE,\n            menu: { id: collapse.id, type: type },\n          })\n        }>\n        {subContent}\n      </ListGroup.Item>\n    );\n  } else {\n    mainContent = (\n      <ListGroup.Item as=\"li\" bsPrefix=\" \" className={navItemClass.join(\" \")}>\n        {subContent}\n      </ListGroup.Item>\n    );\n  }\n\n  return <React.Fragment>{mainContent}</React.Fragment>;\n};\n\nexport default NavCollapse;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/layouts/AdminLayout/Navigation/NavContent/NavItem/index.js",["1132"],"import React, { useContext } from \"react\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { NavLink } from \"react-router-dom\";\n\nimport NavIcon from \"../NavIcon\";\nimport NavBadge from \"../NavBadge\";\n\nimport { ConfigContext } from \"../../../../../contexts/ConfigContext\";\nimport * as actionType from \"../../../../../store/actions\";\nimport useWindowSize from \"../../../../../hooks/useWindowSize\";\n\nconst NavItem = ({ layout, item }) => {\n  const windowSize = useWindowSize();\n  const configContext = useContext(ConfigContext);\n  const { dispatch } = configContext;\n\n  let itemTitle = item.title;\n  if (item.icon) {\n    itemTitle = <span className=\"pcoded-mtext\">{item.title}</span>;\n  }\n\n  let itemTarget = \"\";\n  if (item.target) {\n    itemTarget = \"_blank\";\n  }\n\n  let subContent;\n  if (item.external) {\n    subContent = (\n      <a href={item.url} target=\"_blank\" rel=\"noreferrer\" rel=\"noopener noreferrer\">\n        <NavIcon items={item} />\n        {itemTitle}\n        <NavBadge items={item} />\n      </a>\n    );\n  } else {\n    subContent = (\n      <NavLink\n        to={item.url}\n        className=\"nav-link\"\n        exact={true}\n        target={itemTarget}>\n        <NavIcon items={item} />\n        {itemTitle}\n        <NavBadge items={item} />\n      </NavLink>\n    );\n  }\n  let mainContent = \"\";\n  if (layout === \"horizontal\") {\n    mainContent = (\n      <ListGroup.Item\n        as=\"li\"\n        bsPrefix=\" \"\n        onClick={() => dispatch({ type: actionType.NAV_CONTENT_LEAVE })}>\n        {subContent}\n      </ListGroup.Item>\n    );\n  } else {\n    if (windowSize.width < 992) {\n      mainContent = (\n        <ListGroup.Item\n          as=\"li\"\n          bsPrefix=\" \"\n          className={item.classes}\n          onClick={() => dispatch({ type: actionType.COLLAPSE_MENU })}>\n          {subContent}\n        </ListGroup.Item>\n      );\n    } else {\n      mainContent = (\n        <ListGroup.Item as=\"li\" bsPrefix=\" \" className={item.classes}>\n          {subContent}\n        </ListGroup.Item>\n      );\n    }\n  }\n\n  return <React.Fragment>{mainContent}</React.Fragment>;\n};\n\nexport default NavItem;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/layouts/AdminLayout/NavBar/NavRight/ChatList/Friends/index.js",["1133","1134","1135","1136"],"import React, {\n  useState,\n  useEffect,\n  useRef,\n  forwardRef,\n  useImperativeHandle,\n} from \"react\";\nimport moment from \"moment\";\n\n// import friend from './friends';\nimport Friend from \"./Friend\";\nimport Chat from \"./Chat\";\nimport { callApi } from \"../../../../../../services/apiService\";\nimport { ApiConstants } from \"../../../../../../config/apiConstants\";\nimport { showNotification } from \"../../../../../../services/toasterService\";\n\nconst Friends = forwardRef(({ listOpen, searchKey }, ref) => {\n  const [chatOpen, setChatOpen] = useState(listOpen);\n  const [friend, setfriendList] = useState([]);\n  const [friendFullList, setfriendFullList] = useState([]);\n  const [user, setUser] = useState([]);\n\n  useEffect(() => {\n    getContacts();\n  }, []);\n\n  useEffect(() => {\n    setChatOpen(false);\n  }, [listOpen]);\n\n  useEffect(() => {\n    if (searchKey) {\n      let filteredList = friendFullList.filter((i) =>\n        i.name.toUpperCase().includes(searchKey.toUpperCase())\n      );\n      setfriendList(filteredList);\n    } else {\n      setfriendList(friendFullList);\n    }\n  }, [searchKey]);\n\n  useImperativeHandle(ref, () => ({\n    refreshList() {\n      getContacts();\n    },\n  }));\n\n  const getContacts = () => {\n    callApi(\"post\", ApiConstants.message.contacts, null, true)\n      .then((response) => {\n        if (response && response.status_code === 200) {\n          let formatedList = formatList(response.payload);\n          setfriendList(formatedList);\n          setfriendFullList(formatedList);\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const formatList = (users) => {\n    let formattedUsers = users.map((user) => {\n      return {\n        ...user,\n        photo: user.file_path,\n        new: user.unread_msg_count,\n        // time: moment().startOf(\"day\").fromNow(),\n        time: user.email,\n      };\n    });\n    return formattedUsers;\n  };\n\n  const friendList = friend.map((f) => {\n    return (\n      <Friend\n        key={f.id}\n        data={f}\n        activeId={user.id}\n        clicked={() => {\n          setChatOpen(true);\n          setUser(f);\n        }}\n      />\n    );\n  });\n\n  return (\n    <React.Fragment>\n      {friendList}\n      {!friend.length && <div className=\"text-center\">No Contacts Found</div>}\n      <Chat\n        user={user}\n        chatOpen={chatOpen}\n        listOpen={listOpen}\n        closed={() => {\n          setChatOpen(false);\n          setUser([]);\n          getContacts();\n        }}\n      />\n    </React.Fragment>\n  );\n});\n\nexport default Friends;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/layouts/AdminLayout/NavBar/NavRight/ChatList/Friends/Friend/index.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/layouts/AdminLayout/Navigation/NavContent/NavIcon/index.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/layouts/AdminLayout/Navigation/NavContent/NavBadge/index.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/layouts/AdminLayout/NavBar/NavRight/ChatList/Friends/Chat/index.js",["1137","1138"],"import React, {\n  useState,\n  useEffect,\n  useRef,\n  forwardRef,\n  useImperativeHandle,\n} from \"react\";\nimport { Media, FormControl, Button, InputGroup } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\nimport moment from \"moment\";\n\nimport { callApi } from \"../../../../../../../services/apiService\";\nimport { ApiConstants } from \"../../../../../../../config/apiConstants\";\nimport { showNotification } from \"../../../../../../../services/toasterService\";\nimport { CONFIG } from \"../../../../../../../config/constant\";\nimport avatar2 from \"../../../../../../../assets/images/user/avatar-2.jpg\";\nimport Messages from \"./Messages\";\n// import chatMsg from \"./chat\";\n\nconst Chat = ({ user, chatOpen, listOpen, closed }) => {\n  const [chatMsg, setchatMsg] = useState([]);\n  const [showLoader, setshowLoader] = useState(false);\n  const [showProgress, setshowProgress] = useState(false);\n  const chatTextBox = useRef();\n  const messagesEndRef = useRef();\n  let chatClass = [\"header-chat\"];\n  if (chatOpen && listOpen) {\n    chatClass = [...chatClass, \"open\"];\n  }\n\n  useEffect(() => {\n    if (user && user.id) {\n      getMessage();\n    }\n  }, [user]);\n\n  const getMessage = () => {\n    setshowLoader(true);\n    setshowProgress(true);\n    callApi(\n      \"post\",\n      ApiConstants.message.getmessages,\n      { from_user_id: user.id },\n      true\n    )\n      .then((response) => {\n        setshowLoader(false);\n        setshowProgress(false);\n        if (response && response.status_code === 200) {\n          setchatMsg(formatList(response.payload));\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        setshowLoader(false);\n        setshowProgress(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n  };\n\n  const formatList = (msgs) => {\n    if (!msgs.length) return [];\n    let formattedMsgs = {\n      friend_id: user.id,\n      friend_photo: user.photo\n        ? CONFIG.API_BASE_URL +\n          ApiConstants.file.view +\n          \"?file_name=\" +\n          user.photo\n        : avatar2,\n      messages: msgs.map((msg) => {\n        return {\n          ...msg,\n          type: msg.sender_id === user.id ? 1 : 0,\n          msg: msg.message,\n          time: moment(msg.created_at).format(\"h:mm a\"),\n        };\n      }),\n    };\n    return [formattedMsgs];\n  };\n\n  const sendMessage = () => {\n    setshowProgress(true);\n    if (!chatTextBox.current.value) return;\n    messagesEndRef.current.refreshScroll();\n    let params = {\n      to_user_id: user.id,\n      message: chatTextBox.current.value,\n    };\n    callApi(\"post\", ApiConstants.message.sendmessage, params, true)\n      .then((response) => {\n        setshowProgress(false);\n        if (response && response.status_code === 200) {\n          getMessage();\n        } else {\n          showNotification(\"Error\", response.message, \"error\");\n        }\n      })\n      .catch((error) => {\n        setshowProgress(false);\n        showNotification(\"Error\", \"Something went wrong\", \"error\");\n      });\n    chatTextBox.current.value = \"\";\n  };\n\n  const onEnterPress = (target) => {\n    if (target.charCode == 13) {\n      sendMessage();\n    }\n  };\n\n  let message = (\n    <Media className=\"chat-messages text-center\">\n      {!showLoader && (\n        <Media.Body className=\"chat-menu-content\">\n          <div className=\"\">\n            <p className=\"chat-cont\">START CONVERSATION</p>\n          </div>\n        </Media.Body>\n      )}\n      {showLoader && (\n        <Media.Body className=\"chat-menu-content\">\n          <div className=\"\">\n            <p className=\"chat-cont\">LOADING...</p>\n          </div>\n        </Media.Body>\n      )}\n    </Media>\n  );\n\n  chatMsg.filter((chats) => {\n    if (chats.friend_id === user.id) {\n      message = chats.messages.map((msg, index) => {\n        return (\n          <Messages\n            key={index}\n            message={msg}\n            name={user.name}\n            photo={chats.friend_photo}\n          />\n        );\n      });\n    }\n    return false;\n  });\n\n  return (\n    <React.Fragment>\n      <div className={chatClass.join(\" \")}>\n        <div className=\"h-list-header d-flex justify-content-between\">\n          <Link to=\"#\" className=\"h-back-user-list\" onClick={closed}>\n            <i className=\"feather icon-chevron-left\" />\n          </Link>\n          <h6>{user.name}</h6>\n          <Link to=\"#\" className=\"\" onClick={getMessage}>\n            <i className=\"feather icon-refresh-cw text-primary\" />\n          </Link>\n        </div>\n        <div className=\"h-list-body\">\n          <div className=\"main-chat-cont\">\n            <PerfectScrollbar>\n              <div className=\"main-friend-chat\">\n                {message}\n                <AlwaysScrollToBottom ref={messagesEndRef} />\n              </div>\n            </PerfectScrollbar>\n          </div>\n        </div>\n\n        <div className=\"h-list-footer\">\n          {showProgress && (\n            <div className=\"mb-4 progress\" style={{ height: 8 }}>\n              <div\n                role=\"progressbar\"\n                className=\"progress-bar progress-bar-animated progress-bar-striped\"\n                style={{ width: \"100%\" }}></div>\n            </div>\n          )}\n\n          <InputGroup>\n            <FormControl\n              type=\"text\"\n              name=\"h-chat-text\"\n              className=\"h-send-chat\"\n              placeholder=\"Type hear ... \"\n              ref={chatTextBox}\n              autoComplete=\"off\"\n              onKeyPress={onEnterPress}\n            />\n            <Button\n              type=\"button\"\n              className=\"input-group-append btn-send\"\n              onClick={sendMessage}>\n              <i className=\"feather icon-message-circle\" />\n            </Button>\n          </InputGroup>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nconst AlwaysScrollToBottom = forwardRef((props, ref) => {\n  const elementRef = useRef();\n  useEffect(() => scrollToBottom());\n  const scrollToBottom = () => {\n    elementRef.current.scrollIntoView();\n  };\n  useImperativeHandle(ref, () => ({\n    refreshScroll() {\n      scrollToBottom();\n    },\n  }));\n  return <div ref={elementRef} />;\n});\n\nexport default Chat;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/layouts/AdminLayout/NavBar/NavRight/ChatList/Friends/Chat/Messages/index.js",["1139"],"import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Media } from \"react-bootstrap\";\n\nconst images = require.context(\n  \"../../../../../../../../assets/images/user\",\n  true\n);\n\nconst Messages = ({ message, photo, name }) => {\n  let image = \"\";\n  if (message.type) {\n    image = (\n      <Link to=\"#\" className=\"media-left photo-table\">\n        <img\n          className=\"media-object img-radius img-radius m-t-5\"\n          src={photo}\n          alt={name}\n        />\n      </Link>\n    );\n  }\n\n  let msgClass = [];\n  if (message.type) {\n    msgClass = [...msgClass, \"chat-menu-content\"];\n  } else {\n    msgClass = [...msgClass, \"chat-menu-reply text-muted\"];\n  }\n\n  return (\n    <React.Fragment>\n      <Media className=\"media chat-messages\">\n        {image}\n        <Media.Body className={msgClass.join(\" \")}>\n          <div className=\"\">\n            <p className=\"chat-cont\">{message.msg}</p>\n          </div>\n          <p className=\"chat-time\">{message.time}</p>\n        </Media.Body>\n      </Media>\n    </React.Fragment>\n  );\n};\n\nexport default Messages;\n","/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/client/top-suppliers/widget.js",[],"/Users/amalrjayakumar/Workspace/Arvension-Technologies-LLP/Projects/amis-inovations/vatz-app-amis-innovations/Client/src/views/usermanagement/payments/index.js",[],{"ruleId":"1140","replacedBy":"1141"},{"ruleId":"1142","replacedBy":"1143"},{"ruleId":"1144","severity":1,"message":"1145","line":37,"column":6,"nodeType":"1146","endLine":37,"endColumn":22,"suggestions":"1147"},{"ruleId":"1148","severity":1,"message":"1149","line":2,"column":10,"nodeType":"1150","messageId":"1151","endLine":2,"endColumn":16},{"ruleId":"1148","severity":1,"message":"1152","line":2,"column":34,"nodeType":"1150","messageId":"1151","endLine":2,"endColumn":38},{"ruleId":"1148","severity":1,"message":"1153","line":3,"column":10,"nodeType":"1150","messageId":"1151","endLine":3,"endColumn":14},{"ruleId":"1148","severity":1,"message":"1154","line":23,"column":9,"nodeType":"1150","messageId":"1151","endLine":23,"endColumn":17},{"ruleId":"1144","severity":1,"message":"1145","line":35,"column":5,"nodeType":"1146","endLine":35,"endColumn":21,"suggestions":"1155"},{"ruleId":"1148","severity":1,"message":"1149","line":2,"column":10,"nodeType":"1150","messageId":"1151","endLine":2,"endColumn":16},{"ruleId":"1148","severity":1,"message":"1152","line":2,"column":34,"nodeType":"1150","messageId":"1151","endLine":2,"endColumn":38},{"ruleId":"1148","severity":1,"message":"1153","line":3,"column":10,"nodeType":"1150","messageId":"1151","endLine":3,"endColumn":14},{"ruleId":"1144","severity":1,"message":"1145","line":35,"column":5,"nodeType":"1146","endLine":35,"endColumn":21,"suggestions":"1156"},{"ruleId":"1144","severity":1,"message":"1157","line":72,"column":5,"nodeType":"1146","endLine":72,"endColumn":7,"suggestions":"1158"},{"ruleId":"1148","severity":1,"message":"1159","line":147,"column":8,"nodeType":"1150","messageId":"1151","endLine":147,"endColumn":36},{"ruleId":"1160","severity":1,"message":"1161","line":413,"column":15,"nodeType":"1162","endLine":413,"endColumn":231},{"ruleId":"1160","severity":1,"message":"1161","line":429,"column":15,"nodeType":"1162","endLine":429,"endColumn":234},{"ruleId":"1160","severity":1,"message":"1163","line":719,"column":2,"nodeType":"1162","endLine":725,"endColumn":6},{"ruleId":"1164","severity":1,"message":"1165","line":33,"column":11,"nodeType":"1166","messageId":"1167","endLine":46,"endColumn":12},{"ruleId":"1148","severity":1,"message":"1168","line":2,"column":9,"nodeType":"1150","messageId":"1151","endLine":2,"endColumn":16},{"ruleId":"1148","severity":1,"message":"1169","line":32,"column":18,"nodeType":"1150","messageId":"1151","endLine":32,"endColumn":35},{"ruleId":"1144","severity":1,"message":"1170","line":50,"column":6,"nodeType":"1146","endLine":50,"endColumn":8,"suggestions":"1171"},{"ruleId":"1144","severity":1,"message":"1172","line":54,"column":6,"nodeType":"1146","endLine":54,"endColumn":29,"suggestions":"1173"},{"ruleId":"1144","severity":1,"message":"1172","line":45,"column":6,"nodeType":"1146","endLine":45,"endColumn":29,"suggestions":"1174"},{"ruleId":"1175","severity":1,"message":"1176","line":133,"column":17,"nodeType":"1177","messageId":"1178","endLine":133,"endColumn":41},{"ruleId":"1148","severity":1,"message":"1179","line":1,"column":38,"nodeType":"1150","messageId":"1151","endLine":1,"endColumn":44},{"ruleId":"1148","severity":1,"message":"1180","line":2,"column":88,"nodeType":"1150","messageId":"1151","endLine":2,"endColumn":98},{"ruleId":"1148","severity":1,"message":"1181","line":2,"column":100,"nodeType":"1150","messageId":"1151","endLine":2,"endColumn":111},{"ruleId":"1144","severity":1,"message":"1170","line":52,"column":5,"nodeType":"1146","endLine":52,"endColumn":7,"suggestions":"1182"},{"ruleId":"1144","severity":1,"message":"1172","line":56,"column":5,"nodeType":"1146","endLine":56,"endColumn":29,"suggestions":"1183"},{"ruleId":"1148","severity":1,"message":"1184","line":57,"column":8,"nodeType":"1150","messageId":"1151","endLine":57,"endColumn":16},{"ruleId":"1148","severity":1,"message":"1153","line":2,"column":9,"nodeType":"1150","messageId":"1151","endLine":2,"endColumn":13},{"ruleId":"1148","severity":1,"message":"1185","line":7,"column":8,"nodeType":"1150","messageId":"1151","endLine":7,"endColumn":18},{"ruleId":"1148","severity":1,"message":"1186","line":19,"column":7,"nodeType":"1150","messageId":"1151","endLine":19,"endColumn":23},{"ruleId":"1144","severity":1,"message":"1187","line":42,"column":5,"nodeType":"1146","endLine":42,"endColumn":7,"suggestions":"1188"},{"ruleId":"1148","severity":1,"message":"1189","line":56,"column":8,"nodeType":"1150","messageId":"1151","endLine":56,"endColumn":20},{"ruleId":"1148","severity":1,"message":"1190","line":62,"column":8,"nodeType":"1150","messageId":"1151","endLine":62,"endColumn":22},{"ruleId":"1148","severity":1,"message":"1191","line":7,"column":8,"nodeType":"1150","messageId":"1151","endLine":7,"endColumn":14},{"ruleId":"1148","severity":1,"message":"1192","line":14,"column":9,"nodeType":"1150","messageId":"1151","endLine":14,"endColumn":22},{"ruleId":"1148","severity":1,"message":"1193","line":17,"column":8,"nodeType":"1150","messageId":"1151","endLine":17,"endColumn":16},{"ruleId":"1148","severity":1,"message":"1194","line":19,"column":8,"nodeType":"1150","messageId":"1151","endLine":19,"endColumn":17},{"ruleId":"1148","severity":1,"message":"1195","line":20,"column":8,"nodeType":"1150","messageId":"1151","endLine":20,"endColumn":23},{"ruleId":"1148","severity":1,"message":"1196","line":21,"column":8,"nodeType":"1150","messageId":"1151","endLine":21,"endColumn":20},{"ruleId":"1148","severity":1,"message":"1197","line":32,"column":9,"nodeType":"1150","messageId":"1151","endLine":32,"endColumn":24},{"ruleId":"1148","severity":1,"message":"1184","line":73,"column":8,"nodeType":"1150","messageId":"1151","endLine":73,"endColumn":16},{"ruleId":"1148","severity":1,"message":"1198","line":186,"column":8,"nodeType":"1150","messageId":"1151","endLine":186,"endColumn":21},{"ruleId":"1148","severity":1,"message":"1199","line":2,"column":32,"nodeType":"1150","messageId":"1151","endLine":2,"endColumn":46},{"ruleId":"1148","severity":1,"message":"1200","line":2,"column":48,"nodeType":"1150","messageId":"1151","endLine":2,"endColumn":55},{"ruleId":"1148","severity":1,"message":"1185","line":6,"column":8,"nodeType":"1150","messageId":"1151","endLine":6,"endColumn":18},{"ruleId":"1148","severity":1,"message":"1201","line":9,"column":9,"nodeType":"1150","messageId":"1151","endLine":9,"endColumn":24},{"ruleId":"1148","severity":1,"message":"1193","line":17,"column":8,"nodeType":"1150","messageId":"1151","endLine":17,"endColumn":16},{"ruleId":"1148","severity":1,"message":"1184","line":76,"column":8,"nodeType":"1150","messageId":"1151","endLine":76,"endColumn":16},{"ruleId":"1148","severity":1,"message":"1190","line":100,"column":8,"nodeType":"1150","messageId":"1151","endLine":100,"endColumn":22},{"ruleId":"1148","severity":1,"message":"1189","line":128,"column":8,"nodeType":"1150","messageId":"1151","endLine":128,"endColumn":20},{"ruleId":"1202","severity":1,"message":"1203","line":163,"column":104,"nodeType":"1204","messageId":"1205","endLine":163,"endColumn":106},{"ruleId":"1202","severity":1,"message":"1203","line":163,"column":126,"nodeType":"1204","messageId":"1205","endLine":163,"endColumn":128},{"ruleId":"1148","severity":1,"message":"1206","line":176,"column":8,"nodeType":"1150","messageId":"1151","endLine":176,"endColumn":17},{"ruleId":"1148","severity":1,"message":"1199","line":2,"column":32,"nodeType":"1150","messageId":"1151","endLine":2,"endColumn":46},{"ruleId":"1148","severity":1,"message":"1200","line":2,"column":48,"nodeType":"1150","messageId":"1151","endLine":2,"endColumn":55},{"ruleId":"1148","severity":1,"message":"1193","line":17,"column":8,"nodeType":"1150","messageId":"1151","endLine":17,"endColumn":16},{"ruleId":"1148","severity":1,"message":"1207","line":49,"column":8,"nodeType":"1150","messageId":"1151","endLine":49,"endColumn":21},{"ruleId":"1144","severity":1,"message":"1170","line":63,"column":5,"nodeType":"1146","endLine":63,"endColumn":7,"suggestions":"1208"},{"ruleId":"1144","severity":1,"message":"1172","line":67,"column":5,"nodeType":"1146","endLine":67,"endColumn":29,"suggestions":"1209"},{"ruleId":"1148","severity":1,"message":"1184","line":76,"column":8,"nodeType":"1150","messageId":"1151","endLine":76,"endColumn":16},{"ruleId":"1148","severity":1,"message":"1199","line":2,"column":32,"nodeType":"1150","messageId":"1151","endLine":2,"endColumn":46},{"ruleId":"1148","severity":1,"message":"1200","line":2,"column":48,"nodeType":"1150","messageId":"1151","endLine":2,"endColumn":55},{"ruleId":"1148","severity":1,"message":"1207","line":47,"column":8,"nodeType":"1150","messageId":"1151","endLine":47,"endColumn":21},{"ruleId":"1144","severity":1,"message":"1170","line":61,"column":5,"nodeType":"1146","endLine":61,"endColumn":7,"suggestions":"1210"},{"ruleId":"1144","severity":1,"message":"1172","line":65,"column":5,"nodeType":"1146","endLine":65,"endColumn":29,"suggestions":"1211"},{"ruleId":"1148","severity":1,"message":"1184","line":74,"column":8,"nodeType":"1150","messageId":"1151","endLine":74,"endColumn":16},{"ruleId":"1148","severity":1,"message":"1153","line":2,"column":10,"nodeType":"1150","messageId":"1151","endLine":2,"endColumn":14},{"ruleId":"1148","severity":1,"message":"1185","line":7,"column":8,"nodeType":"1150","messageId":"1151","endLine":7,"endColumn":18},{"ruleId":"1148","severity":1,"message":"1186","line":19,"column":7,"nodeType":"1150","messageId":"1151","endLine":19,"endColumn":23},{"ruleId":"1148","severity":1,"message":"1189","line":56,"column":9,"nodeType":"1150","messageId":"1151","endLine":56,"endColumn":21},{"ruleId":"1148","severity":1,"message":"1190","line":62,"column":9,"nodeType":"1150","messageId":"1151","endLine":62,"endColumn":23},{"ruleId":"1148","severity":1,"message":"1193","line":17,"column":8,"nodeType":"1150","messageId":"1151","endLine":17,"endColumn":16},{"ruleId":"1144","severity":1,"message":"1170","line":50,"column":5,"nodeType":"1146","endLine":50,"endColumn":7,"suggestions":"1212"},{"ruleId":"1144","severity":1,"message":"1172","line":54,"column":5,"nodeType":"1146","endLine":54,"endColumn":29,"suggestions":"1213"},{"ruleId":"1148","severity":1,"message":"1184","line":77,"column":8,"nodeType":"1150","messageId":"1151","endLine":77,"endColumn":16},{"ruleId":"1148","severity":1,"message":"1214","line":19,"column":9,"nodeType":"1150","messageId":"1151","endLine":19,"endColumn":16},{"ruleId":"1148","severity":1,"message":"1215","line":2,"column":25,"nodeType":"1150","messageId":"1151","endLine":2,"endColumn":30},{"ruleId":"1148","severity":1,"message":"1216","line":2,"column":32,"nodeType":"1150","messageId":"1151","endLine":2,"endColumn":41},{"ruleId":"1148","severity":1,"message":"1217","line":2,"column":51,"nodeType":"1150","messageId":"1151","endLine":2,"endColumn":60},{"ruleId":"1148","severity":1,"message":"1180","line":2,"column":62,"nodeType":"1150","messageId":"1151","endLine":2,"endColumn":72},{"ruleId":"1148","severity":1,"message":"1181","line":2,"column":74,"nodeType":"1150","messageId":"1151","endLine":2,"endColumn":85},{"ruleId":"1148","severity":1,"message":"1191","line":7,"column":8,"nodeType":"1150","messageId":"1151","endLine":7,"endColumn":14},{"ruleId":"1148","severity":1,"message":"1218","line":8,"column":9,"nodeType":"1150","messageId":"1151","endLine":8,"endColumn":20},{"ruleId":"1148","severity":1,"message":"1219","line":14,"column":8,"nodeType":"1150","messageId":"1151","endLine":14,"endColumn":15},{"ruleId":"1148","severity":1,"message":"1192","line":15,"column":9,"nodeType":"1150","messageId":"1151","endLine":15,"endColumn":22},{"ruleId":"1148","severity":1,"message":"1220","line":16,"column":9,"nodeType":"1150","messageId":"1151","endLine":16,"endColumn":19},{"ruleId":"1148","severity":1,"message":"1221","line":17,"column":8,"nodeType":"1150","messageId":"1151","endLine":17,"endColumn":21},{"ruleId":"1148","severity":1,"message":"1222","line":29,"column":9,"nodeType":"1150","messageId":"1151","endLine":29,"endColumn":22},{"ruleId":"1148","severity":1,"message":"1207","line":44,"column":8,"nodeType":"1150","messageId":"1151","endLine":44,"endColumn":21},{"ruleId":"1144","severity":1,"message":"1170","line":58,"column":5,"nodeType":"1146","endLine":58,"endColumn":7,"suggestions":"1223"},{"ruleId":"1144","severity":1,"message":"1172","line":62,"column":5,"nodeType":"1146","endLine":62,"endColumn":29,"suggestions":"1224"},{"ruleId":"1148","severity":1,"message":"1191","line":7,"column":8,"nodeType":"1150","messageId":"1151","endLine":7,"endColumn":14},{"ruleId":"1148","severity":1,"message":"1192","line":14,"column":9,"nodeType":"1150","messageId":"1151","endLine":14,"endColumn":22},{"ruleId":"1148","severity":1,"message":"1194","line":19,"column":8,"nodeType":"1150","messageId":"1151","endLine":19,"endColumn":17},{"ruleId":"1148","severity":1,"message":"1195","line":20,"column":8,"nodeType":"1150","messageId":"1151","endLine":20,"endColumn":23},{"ruleId":"1148","severity":1,"message":"1196","line":21,"column":8,"nodeType":"1150","messageId":"1151","endLine":21,"endColumn":20},{"ruleId":"1148","severity":1,"message":"1197","line":31,"column":9,"nodeType":"1150","messageId":"1151","endLine":31,"endColumn":24},{"ruleId":"1148","severity":1,"message":"1198","line":191,"column":8,"nodeType":"1150","messageId":"1151","endLine":191,"endColumn":21},{"ruleId":"1148","severity":1,"message":"1214","line":19,"column":8,"nodeType":"1150","messageId":"1151","endLine":19,"endColumn":15},{"ruleId":"1148","severity":1,"message":"1214","line":22,"column":8,"nodeType":"1150","messageId":"1151","endLine":22,"endColumn":15},{"ruleId":"1148","severity":1,"message":"1207","line":23,"column":9,"nodeType":"1150","messageId":"1151","endLine":23,"endColumn":22},{"ruleId":"1144","severity":1,"message":"1225","line":33,"column":6,"nodeType":"1146","endLine":33,"endColumn":8,"suggestions":"1226"},{"ruleId":"1144","severity":1,"message":"1172","line":37,"column":6,"nodeType":"1146","endLine":37,"endColumn":30,"suggestions":"1227"},{"ruleId":"1160","severity":1,"message":"1163","line":183,"column":23,"nodeType":"1162","endLine":186,"endColumn":77},{"ruleId":"1148","severity":1,"message":"1228","line":11,"column":8,"nodeType":"1150","messageId":"1151","endLine":11,"endColumn":15},{"ruleId":"1148","severity":1,"message":"1229","line":19,"column":9,"nodeType":"1150","messageId":"1151","endLine":19,"endColumn":19},{"ruleId":"1148","severity":1,"message":"1230","line":20,"column":9,"nodeType":"1150","messageId":"1151","endLine":20,"endColumn":17},{"ruleId":"1144","severity":1,"message":"1231","line":82,"column":5,"nodeType":"1146","endLine":82,"endColumn":7,"suggestions":"1232"},{"ruleId":"1144","severity":1,"message":"1233","line":88,"column":5,"nodeType":"1146","endLine":88,"endColumn":20,"suggestions":"1234"},{"ruleId":"1148","severity":1,"message":"1235","line":194,"column":8,"nodeType":"1150","messageId":"1151","endLine":194,"endColumn":20},{"ruleId":"1144","severity":1,"message":"1231","line":38,"column":6,"nodeType":"1146","endLine":38,"endColumn":8,"suggestions":"1236"},{"ruleId":"1144","severity":1,"message":"1237","line":44,"column":6,"nodeType":"1146","endLine":44,"endColumn":21,"suggestions":"1238"},{"ruleId":"1148","severity":1,"message":"1239","line":4,"column":8,"nodeType":"1150","messageId":"1151","endLine":4,"endColumn":14},{"ruleId":"1202","severity":1,"message":"1203","line":35,"column":109,"nodeType":"1204","messageId":"1205","endLine":35,"endColumn":111},{"ruleId":"1202","severity":1,"message":"1203","line":35,"column":131,"nodeType":"1204","messageId":"1205","endLine":35,"endColumn":133},{"ruleId":"1144","severity":1,"message":"1240","line":45,"column":5,"nodeType":"1146","endLine":45,"endColumn":22,"suggestions":"1241"},{"ruleId":"1148","severity":1,"message":"1239","line":6,"column":13,"nodeType":"1150","messageId":"1151","endLine":6,"endColumn":19},{"ruleId":"1144","severity":1,"message":"1242","line":39,"column":6,"nodeType":"1146","endLine":39,"endColumn":8,"suggestions":"1243"},{"ruleId":"1144","severity":1,"message":"1244","line":47,"column":6,"nodeType":"1146","endLine":47,"endColumn":18,"suggestions":"1245"},{"ruleId":"1144","severity":1,"message":"1244","line":34,"column":6,"nodeType":"1146","endLine":34,"endColumn":8,"suggestions":"1246"},{"ruleId":"1148","severity":1,"message":"1247","line":5,"column":3,"nodeType":"1150","messageId":"1151","endLine":5,"endColumn":19},{"ruleId":"1144","severity":1,"message":"1248","line":53,"column":6,"nodeType":"1146","endLine":53,"endColumn":8,"suggestions":"1249"},{"ruleId":"1144","severity":1,"message":"1244","line":61,"column":6,"nodeType":"1146","endLine":61,"endColumn":18,"suggestions":"1250"},{"ruleId":"1251","severity":1,"message":"1252","line":495,"column":37,"nodeType":"1177","endLine":495,"endColumn":48},{"ruleId":"1148","severity":1,"message":"1253","line":52,"column":17,"nodeType":"1150","messageId":"1151","endLine":52,"endColumn":26},{"ruleId":"1148","severity":1,"message":"1254","line":53,"column":23,"nodeType":"1150","messageId":"1151","endLine":53,"endColumn":38},{"ruleId":"1144","severity":1,"message":"1248","line":79,"column":5,"nodeType":"1146","endLine":79,"endColumn":7,"suggestions":"1255"},{"ruleId":"1144","severity":1,"message":"1242","line":39,"column":6,"nodeType":"1146","endLine":39,"endColumn":8,"suggestions":"1256"},{"ruleId":"1144","severity":1,"message":"1244","line":47,"column":6,"nodeType":"1146","endLine":47,"endColumn":18,"suggestions":"1257"},{"ruleId":"1144","severity":1,"message":"1248","line":46,"column":6,"nodeType":"1146","endLine":46,"endColumn":8,"suggestions":"1258"},{"ruleId":"1144","severity":1,"message":"1244","line":54,"column":6,"nodeType":"1146","endLine":54,"endColumn":18,"suggestions":"1259"},{"ruleId":"1251","severity":1,"message":"1252","line":488,"column":37,"nodeType":"1177","endLine":488,"endColumn":48},{"ruleId":"1144","severity":1,"message":"1244","line":34,"column":6,"nodeType":"1146","endLine":34,"endColumn":8,"suggestions":"1260"},{"ruleId":"1144","severity":1,"message":"1261","line":20,"column":5,"nodeType":"1146","endLine":20,"endColumn":7,"suggestions":"1262"},{"ruleId":"1144","severity":1,"message":"1231","line":37,"column":5,"nodeType":"1146","endLine":37,"endColumn":7,"suggestions":"1263"},{"ruleId":"1144","severity":1,"message":"1237","line":43,"column":5,"nodeType":"1146","endLine":43,"endColumn":20,"suggestions":"1264"},{"ruleId":"1144","severity":1,"message":"1244","line":38,"column":5,"nodeType":"1146","endLine":38,"endColumn":7,"suggestions":"1265"},{"ruleId":"1144","severity":1,"message":"1242","line":71,"column":5,"nodeType":"1146","endLine":71,"endColumn":7,"suggestions":"1266"},{"ruleId":"1144","severity":1,"message":"1244","line":79,"column":5,"nodeType":"1146","endLine":79,"endColumn":17,"suggestions":"1267"},{"ruleId":"1148","severity":1,"message":"1268","line":10,"column":10,"nodeType":"1150","messageId":"1151","endLine":10,"endColumn":21},{"ruleId":"1148","severity":1,"message":"1269","line":14,"column":23,"nodeType":"1150","messageId":"1151","endLine":14,"endColumn":37},{"ruleId":"1144","severity":1,"message":"1248","line":44,"column":6,"nodeType":"1146","endLine":44,"endColumn":8,"suggestions":"1270"},{"ruleId":"1144","severity":1,"message":"1271","line":50,"column":6,"nodeType":"1146","endLine":50,"endColumn":18,"suggestions":"1272"},{"ruleId":"1148","severity":1,"message":"1273","line":165,"column":9,"nodeType":"1150","messageId":"1151","endLine":165,"endColumn":23},{"ruleId":"1251","severity":1,"message":"1252","line":343,"column":37,"nodeType":"1177","endLine":343,"endColumn":48},{"ruleId":"1148","severity":1,"message":"1269","line":13,"column":23,"nodeType":"1150","messageId":"1151","endLine":13,"endColumn":37},{"ruleId":"1144","severity":1,"message":"1242","line":34,"column":6,"nodeType":"1146","endLine":34,"endColumn":8,"suggestions":"1274"},{"ruleId":"1144","severity":1,"message":"1271","line":38,"column":6,"nodeType":"1146","endLine":38,"endColumn":18,"suggestions":"1275"},{"ruleId":"1148","severity":1,"message":"1269","line":12,"column":23,"nodeType":"1150","messageId":"1151","endLine":12,"endColumn":37},{"ruleId":"1144","severity":1,"message":"1271","line":29,"column":6,"nodeType":"1146","endLine":29,"endColumn":8,"suggestions":"1276"},{"ruleId":"1148","severity":1,"message":"1228","line":11,"column":8,"nodeType":"1150","messageId":"1151","endLine":11,"endColumn":15},{"ruleId":"1148","severity":1,"message":"1229","line":19,"column":10,"nodeType":"1150","messageId":"1151","endLine":19,"endColumn":20},{"ruleId":"1148","severity":1,"message":"1230","line":20,"column":10,"nodeType":"1150","messageId":"1151","endLine":20,"endColumn":18},{"ruleId":"1144","severity":1,"message":"1231","line":101,"column":6,"nodeType":"1146","endLine":101,"endColumn":8,"suggestions":"1277"},{"ruleId":"1144","severity":1,"message":"1237","line":107,"column":6,"nodeType":"1146","endLine":107,"endColumn":21,"suggestions":"1278"},{"ruleId":"1148","severity":1,"message":"1235","line":213,"column":9,"nodeType":"1150","messageId":"1151","endLine":213,"endColumn":21},{"ruleId":"1148","severity":1,"message":"1269","line":13,"column":22,"nodeType":"1150","messageId":"1151","endLine":13,"endColumn":36},{"ruleId":"1144","severity":1,"message":"1242","line":34,"column":5,"nodeType":"1146","endLine":34,"endColumn":7,"suggestions":"1279"},{"ruleId":"1144","severity":1,"message":"1271","line":38,"column":5,"nodeType":"1146","endLine":38,"endColumn":17,"suggestions":"1280"},{"ruleId":"1144","severity":1,"message":"1244","line":34,"column":6,"nodeType":"1146","endLine":34,"endColumn":8,"suggestions":"1281"},{"ruleId":"1144","severity":1,"message":"1242","line":39,"column":6,"nodeType":"1146","endLine":39,"endColumn":8,"suggestions":"1282"},{"ruleId":"1144","severity":1,"message":"1244","line":47,"column":6,"nodeType":"1146","endLine":47,"endColumn":18,"suggestions":"1283"},{"ruleId":"1148","severity":1,"message":"1269","line":12,"column":22,"nodeType":"1150","messageId":"1151","endLine":12,"endColumn":36},{"ruleId":"1144","severity":1,"message":"1271","line":29,"column":5,"nodeType":"1146","endLine":29,"endColumn":7,"suggestions":"1284"},{"ruleId":"1148","severity":1,"message":"1247","line":3,"column":17,"nodeType":"1150","messageId":"1151","endLine":3,"endColumn":33},{"ruleId":"1144","severity":1,"message":"1248","line":46,"column":5,"nodeType":"1146","endLine":46,"endColumn":7,"suggestions":"1285"},{"ruleId":"1144","severity":1,"message":"1244","line":54,"column":5,"nodeType":"1146","endLine":54,"endColumn":17,"suggestions":"1286"},{"ruleId":"1148","severity":1,"message":"1268","line":10,"column":9,"nodeType":"1150","messageId":"1151","endLine":10,"endColumn":20},{"ruleId":"1148","severity":1,"message":"1269","line":14,"column":22,"nodeType":"1150","messageId":"1151","endLine":14,"endColumn":36},{"ruleId":"1144","severity":1,"message":"1248","line":44,"column":5,"nodeType":"1146","endLine":44,"endColumn":7,"suggestions":"1287"},{"ruleId":"1144","severity":1,"message":"1271","line":50,"column":5,"nodeType":"1146","endLine":50,"endColumn":17,"suggestions":"1288"},{"ruleId":"1148","severity":1,"message":"1273","line":165,"column":8,"nodeType":"1150","messageId":"1151","endLine":165,"endColumn":22},{"ruleId":"1251","severity":1,"message":"1252","line":280,"column":21,"nodeType":"1177","endLine":280,"endColumn":32},{"ruleId":"1148","severity":1,"message":"1269","line":13,"column":23,"nodeType":"1150","messageId":"1151","endLine":13,"endColumn":37},{"ruleId":"1144","severity":1,"message":"1271","line":34,"column":6,"nodeType":"1146","endLine":34,"endColumn":8,"suggestions":"1289"},{"ruleId":"1148","severity":1,"message":"1269","line":14,"column":23,"nodeType":"1150","messageId":"1151","endLine":14,"endColumn":37},{"ruleId":"1144","severity":1,"message":"1242","line":39,"column":6,"nodeType":"1146","endLine":39,"endColumn":8,"suggestions":"1290"},{"ruleId":"1144","severity":1,"message":"1271","line":43,"column":6,"nodeType":"1146","endLine":43,"endColumn":18,"suggestions":"1291"},{"ruleId":"1148","severity":1,"message":"1268","line":10,"column":9,"nodeType":"1150","messageId":"1151","endLine":10,"endColumn":20},{"ruleId":"1148","severity":1,"message":"1269","line":14,"column":22,"nodeType":"1150","messageId":"1151","endLine":14,"endColumn":36},{"ruleId":"1144","severity":1,"message":"1248","line":44,"column":5,"nodeType":"1146","endLine":44,"endColumn":7,"suggestions":"1292"},{"ruleId":"1144","severity":1,"message":"1271","line":50,"column":5,"nodeType":"1146","endLine":50,"endColumn":17,"suggestions":"1293"},{"ruleId":"1148","severity":1,"message":"1273","line":165,"column":8,"nodeType":"1150","messageId":"1151","endLine":165,"endColumn":22},{"ruleId":"1251","severity":1,"message":"1252","line":280,"column":21,"nodeType":"1177","endLine":280,"endColumn":32},{"ruleId":"1148","severity":1,"message":"1269","line":12,"column":22,"nodeType":"1150","messageId":"1151","endLine":12,"endColumn":36},{"ruleId":"1144","severity":1,"message":"1271","line":29,"column":5,"nodeType":"1146","endLine":29,"endColumn":7,"suggestions":"1294"},{"ruleId":"1148","severity":1,"message":"1269","line":13,"column":22,"nodeType":"1150","messageId":"1151","endLine":13,"endColumn":36},{"ruleId":"1144","severity":1,"message":"1242","line":34,"column":5,"nodeType":"1146","endLine":34,"endColumn":7,"suggestions":"1295"},{"ruleId":"1144","severity":1,"message":"1271","line":38,"column":5,"nodeType":"1146","endLine":38,"endColumn":17,"suggestions":"1296"},{"ruleId":"1148","severity":1,"message":"1269","line":14,"column":23,"nodeType":"1150","messageId":"1151","endLine":14,"endColumn":37},{"ruleId":"1144","severity":1,"message":"1248","line":48,"column":6,"nodeType":"1146","endLine":48,"endColumn":8,"suggestions":"1297"},{"ruleId":"1144","severity":1,"message":"1271","line":54,"column":6,"nodeType":"1146","endLine":54,"endColumn":18,"suggestions":"1298"},{"ruleId":"1148","severity":1,"message":"1273","line":193,"column":9,"nodeType":"1150","messageId":"1151","endLine":193,"endColumn":23},{"ruleId":"1251","severity":1,"message":"1252","line":371,"column":37,"nodeType":"1177","endLine":371,"endColumn":48},{"ruleId":"1148","severity":1,"message":"1268","line":10,"column":10,"nodeType":"1150","messageId":"1151","endLine":10,"endColumn":21},{"ruleId":"1148","severity":1,"message":"1269","line":14,"column":23,"nodeType":"1150","messageId":"1151","endLine":14,"endColumn":37},{"ruleId":"1144","severity":1,"message":"1248","line":44,"column":6,"nodeType":"1146","endLine":44,"endColumn":8,"suggestions":"1299"},{"ruleId":"1144","severity":1,"message":"1271","line":50,"column":6,"nodeType":"1146","endLine":50,"endColumn":18,"suggestions":"1300"},{"ruleId":"1148","severity":1,"message":"1273","line":165,"column":9,"nodeType":"1150","messageId":"1151","endLine":165,"endColumn":23},{"ruleId":"1251","severity":1,"message":"1252","line":343,"column":37,"nodeType":"1177","endLine":343,"endColumn":48},{"ruleId":"1148","severity":1,"message":"1269","line":12,"column":23,"nodeType":"1150","messageId":"1151","endLine":12,"endColumn":37},{"ruleId":"1144","severity":1,"message":"1271","line":29,"column":6,"nodeType":"1146","endLine":29,"endColumn":8,"suggestions":"1301"},{"ruleId":"1148","severity":1,"message":"1269","line":13,"column":23,"nodeType":"1150","messageId":"1151","endLine":13,"endColumn":37},{"ruleId":"1144","severity":1,"message":"1242","line":34,"column":6,"nodeType":"1146","endLine":34,"endColumn":8,"suggestions":"1302"},{"ruleId":"1144","severity":1,"message":"1271","line":38,"column":6,"nodeType":"1146","endLine":38,"endColumn":18,"suggestions":"1303"},{"ruleId":"1148","severity":1,"message":"1269","line":14,"column":23,"nodeType":"1150","messageId":"1151","endLine":14,"endColumn":37},{"ruleId":"1144","severity":1,"message":"1242","line":39,"column":6,"nodeType":"1146","endLine":39,"endColumn":8,"suggestions":"1304"},{"ruleId":"1144","severity":1,"message":"1271","line":43,"column":6,"nodeType":"1146","endLine":43,"endColumn":18,"suggestions":"1305"},{"ruleId":"1148","severity":1,"message":"1269","line":14,"column":23,"nodeType":"1150","messageId":"1151","endLine":14,"endColumn":37},{"ruleId":"1144","severity":1,"message":"1248","line":48,"column":6,"nodeType":"1146","endLine":48,"endColumn":8,"suggestions":"1306"},{"ruleId":"1144","severity":1,"message":"1271","line":54,"column":6,"nodeType":"1146","endLine":54,"endColumn":18,"suggestions":"1307"},{"ruleId":"1148","severity":1,"message":"1273","line":194,"column":9,"nodeType":"1150","messageId":"1151","endLine":194,"endColumn":23},{"ruleId":"1148","severity":1,"message":"1269","line":13,"column":22,"nodeType":"1150","messageId":"1151","endLine":13,"endColumn":36},{"ruleId":"1144","severity":1,"message":"1271","line":34,"column":5,"nodeType":"1146","endLine":34,"endColumn":7,"suggestions":"1308"},{"ruleId":"1144","severity":1,"message":"1248","line":46,"column":6,"nodeType":"1146","endLine":46,"endColumn":8,"suggestions":"1309"},{"ruleId":"1144","severity":1,"message":"1244","line":54,"column":6,"nodeType":"1146","endLine":54,"endColumn":18,"suggestions":"1310"},{"ruleId":"1251","severity":1,"message":"1252","line":488,"column":37,"nodeType":"1177","endLine":488,"endColumn":48},{"ruleId":"1144","severity":1,"message":"1242","line":39,"column":6,"nodeType":"1146","endLine":39,"endColumn":8,"suggestions":"1311"},{"ruleId":"1144","severity":1,"message":"1244","line":47,"column":6,"nodeType":"1146","endLine":47,"endColumn":18,"suggestions":"1312"},{"ruleId":"1144","severity":1,"message":"1244","line":34,"column":6,"nodeType":"1146","endLine":34,"endColumn":8,"suggestions":"1313"},{"ruleId":"1148","severity":1,"message":"1268","line":10,"column":10,"nodeType":"1150","messageId":"1151","endLine":10,"endColumn":21},{"ruleId":"1148","severity":1,"message":"1269","line":14,"column":23,"nodeType":"1150","messageId":"1151","endLine":14,"endColumn":37},{"ruleId":"1144","severity":1,"message":"1248","line":44,"column":6,"nodeType":"1146","endLine":44,"endColumn":8,"suggestions":"1314"},{"ruleId":"1144","severity":1,"message":"1271","line":50,"column":6,"nodeType":"1146","endLine":50,"endColumn":18,"suggestions":"1315"},{"ruleId":"1148","severity":1,"message":"1273","line":165,"column":9,"nodeType":"1150","messageId":"1151","endLine":165,"endColumn":23},{"ruleId":"1251","severity":1,"message":"1252","line":343,"column":37,"nodeType":"1177","endLine":343,"endColumn":48},{"ruleId":"1148","severity":1,"message":"1268","line":10,"column":10,"nodeType":"1150","messageId":"1151","endLine":10,"endColumn":21},{"ruleId":"1148","severity":1,"message":"1269","line":14,"column":23,"nodeType":"1150","messageId":"1151","endLine":14,"endColumn":37},{"ruleId":"1144","severity":1,"message":"1242","line":35,"column":6,"nodeType":"1146","endLine":35,"endColumn":8,"suggestions":"1316"},{"ruleId":"1144","severity":1,"message":"1271","line":39,"column":6,"nodeType":"1146","endLine":39,"endColumn":18,"suggestions":"1317"},{"ruleId":"1148","severity":1,"message":"1269","line":12,"column":23,"nodeType":"1150","messageId":"1151","endLine":12,"endColumn":37},{"ruleId":"1144","severity":1,"message":"1271","line":29,"column":6,"nodeType":"1146","endLine":29,"endColumn":8,"suggestions":"1318"},{"ruleId":"1148","severity":1,"message":"1185","line":6,"column":8,"nodeType":"1150","messageId":"1151","endLine":6,"endColumn":18},{"ruleId":"1148","severity":1,"message":"1193","line":16,"column":8,"nodeType":"1150","messageId":"1151","endLine":16,"endColumn":16},{"ruleId":"1148","severity":1,"message":"1319","line":32,"column":20,"nodeType":"1150","messageId":"1151","endLine":32,"endColumn":32},{"ruleId":"1144","severity":1,"message":"1271","line":48,"column":5,"nodeType":"1146","endLine":48,"endColumn":7,"suggestions":"1320"},{"ruleId":"1144","severity":1,"message":"1172","line":53,"column":5,"nodeType":"1146","endLine":53,"endColumn":29,"suggestions":"1321"},{"ruleId":"1148","severity":1,"message":"1322","line":1,"column":27,"nodeType":"1150","messageId":"1151","endLine":1,"endColumn":36},{"ruleId":"1148","severity":1,"message":"1193","line":14,"column":8,"nodeType":"1150","messageId":"1151","endLine":14,"endColumn":16},{"ruleId":"1144","severity":1,"message":"1323","line":32,"column":6,"nodeType":"1146","endLine":32,"endColumn":8,"suggestions":"1324"},{"ruleId":"1148","severity":1,"message":"1228","line":11,"column":8,"nodeType":"1150","messageId":"1151","endLine":11,"endColumn":15},{"ruleId":"1148","severity":1,"message":"1229","line":19,"column":10,"nodeType":"1150","messageId":"1151","endLine":19,"endColumn":20},{"ruleId":"1148","severity":1,"message":"1230","line":20,"column":10,"nodeType":"1150","messageId":"1151","endLine":20,"endColumn":18},{"ruleId":"1144","severity":1,"message":"1231","line":101,"column":6,"nodeType":"1146","endLine":101,"endColumn":8,"suggestions":"1325"},{"ruleId":"1144","severity":1,"message":"1237","line":107,"column":6,"nodeType":"1146","endLine":107,"endColumn":21,"suggestions":"1326"},{"ruleId":"1148","severity":1,"message":"1235","line":213,"column":9,"nodeType":"1150","messageId":"1151","endLine":213,"endColumn":21},{"ruleId":"1148","severity":1,"message":"1239","line":6,"column":13,"nodeType":"1150","messageId":"1151","endLine":6,"endColumn":19},{"ruleId":"1148","severity":1,"message":"1239","line":6,"column":13,"nodeType":"1150","messageId":"1151","endLine":6,"endColumn":19},{"ruleId":"1148","severity":1,"message":"1322","line":1,"column":26,"nodeType":"1150","messageId":"1151","endLine":1,"endColumn":35},{"ruleId":"1144","severity":1,"message":"1323","line":19,"column":5,"nodeType":"1146","endLine":19,"endColumn":7,"suggestions":"1327"},{"ruleId":"1144","severity":1,"message":"1328","line":46,"column":5,"nodeType":"1146","endLine":46,"endColumn":7,"suggestions":"1329"},{"ruleId":"1148","severity":1,"message":"1322","line":1,"column":26,"nodeType":"1150","messageId":"1151","endLine":1,"endColumn":35},{"ruleId":"1144","severity":1,"message":"1328","line":37,"column":5,"nodeType":"1146","endLine":37,"endColumn":7,"suggestions":"1330"},{"ruleId":"1148","severity":1,"message":"1322","line":1,"column":26,"nodeType":"1150","messageId":"1151","endLine":1,"endColumn":35},{"ruleId":"1144","severity":1,"message":"1328","line":41,"column":5,"nodeType":"1146","endLine":41,"endColumn":7,"suggestions":"1331"},{"ruleId":"1140","replacedBy":"1332"},{"ruleId":"1142","replacedBy":"1333"},{"ruleId":"1148","severity":1,"message":"1185","line":6,"column":8,"nodeType":"1150","messageId":"1151","endLine":6,"endColumn":18},{"ruleId":"1148","severity":1,"message":"1193","line":16,"column":8,"nodeType":"1150","messageId":"1151","endLine":16,"endColumn":16},{"ruleId":"1148","severity":1,"message":"1334","line":24,"column":10,"nodeType":"1150","messageId":"1151","endLine":24,"endColumn":19},{"ruleId":"1148","severity":1,"message":"1335","line":24,"column":21,"nodeType":"1150","messageId":"1151","endLine":24,"endColumn":33},{"ruleId":"1148","severity":1,"message":"1336","line":25,"column":10,"nodeType":"1150","messageId":"1151","endLine":25,"endColumn":17},{"ruleId":"1148","severity":1,"message":"1337","line":25,"column":19,"nodeType":"1150","messageId":"1151","endLine":25,"endColumn":29},{"ruleId":"1148","severity":1,"message":"1207","line":37,"column":9,"nodeType":"1150","messageId":"1151","endLine":37,"endColumn":22},{"ruleId":"1144","severity":1,"message":"1172","line":54,"column":6,"nodeType":"1146","endLine":54,"endColumn":30,"suggestions":"1338"},{"ruleId":"1148","severity":1,"message":"1339","line":61,"column":9,"nodeType":"1150","messageId":"1151","endLine":61,"endColumn":19},{"ruleId":"1148","severity":1,"message":"1193","line":14,"column":8,"nodeType":"1150","messageId":"1151","endLine":14,"endColumn":16},{"ruleId":"1144","severity":1,"message":"1340","line":47,"column":6,"nodeType":"1146","endLine":47,"endColumn":8,"suggestions":"1341"},{"ruleId":"1144","severity":1,"message":"1340","line":47,"column":6,"nodeType":"1146","endLine":47,"endColumn":8,"suggestions":"1342"},{"ruleId":"1144","severity":1,"message":"1340","line":50,"column":6,"nodeType":"1146","endLine":50,"endColumn":8,"suggestions":"1343"},{"ruleId":"1144","severity":1,"message":"1225","line":34,"column":6,"nodeType":"1146","endLine":34,"endColumn":8,"suggestions":"1344"},{"ruleId":"1144","severity":1,"message":"1172","line":38,"column":6,"nodeType":"1146","endLine":38,"endColumn":30,"suggestions":"1345"},{"ruleId":"1175","severity":1,"message":"1176","line":97,"column":17,"nodeType":"1177","messageId":"1178","endLine":97,"endColumn":41},{"ruleId":"1160","severity":1,"message":"1163","line":185,"column":23,"nodeType":"1162","endLine":188,"endColumn":77},{"ruleId":"1144","severity":1,"message":"1346","line":47,"column":6,"nodeType":"1146","endLine":47,"endColumn":8,"suggestions":"1347"},{"ruleId":"1144","severity":1,"message":"1348","line":47,"column":6,"nodeType":"1146","endLine":47,"endColumn":8,"suggestions":"1349"},{"ruleId":"1144","severity":1,"message":"1231","line":102,"column":6,"nodeType":"1146","endLine":102,"endColumn":8,"suggestions":"1350"},{"ruleId":"1144","severity":1,"message":"1351","line":48,"column":6,"nodeType":"1146","endLine":48,"endColumn":8,"suggestions":"1352"},{"ruleId":"1353","severity":1,"message":"1354","line":87,"column":53,"nodeType":"1355","messageId":"1356","endLine":87,"endColumn":54,"suggestions":"1357"},{"ruleId":"1353","severity":1,"message":"1358","line":87,"column":56,"nodeType":"1355","messageId":"1356","endLine":87,"endColumn":57,"suggestions":"1359"},{"ruleId":"1353","severity":1,"message":"1360","line":87,"column":59,"nodeType":"1355","messageId":"1356","endLine":87,"endColumn":60,"suggestions":"1361"},{"ruleId":"1144","severity":1,"message":"1231","line":120,"column":6,"nodeType":"1146","endLine":120,"endColumn":8,"suggestions":"1362"},{"ruleId":"1148","severity":1,"message":"1269","line":13,"column":23,"nodeType":"1150","messageId":"1151","endLine":13,"endColumn":37},{"ruleId":"1144","severity":1,"message":"1271","line":34,"column":6,"nodeType":"1146","endLine":34,"endColumn":8,"suggestions":"1363"},{"ruleId":"1148","severity":1,"message":"1269","line":14,"column":23,"nodeType":"1150","messageId":"1151","endLine":14,"endColumn":37},{"ruleId":"1144","severity":1,"message":"1242","line":39,"column":6,"nodeType":"1146","endLine":39,"endColumn":8,"suggestions":"1364"},{"ruleId":"1144","severity":1,"message":"1271","line":43,"column":6,"nodeType":"1146","endLine":43,"endColumn":18,"suggestions":"1365"},{"ruleId":"1148","severity":1,"message":"1269","line":14,"column":23,"nodeType":"1150","messageId":"1151","endLine":14,"endColumn":37},{"ruleId":"1144","severity":1,"message":"1248","line":48,"column":6,"nodeType":"1146","endLine":48,"endColumn":8,"suggestions":"1366"},{"ruleId":"1144","severity":1,"message":"1271","line":54,"column":6,"nodeType":"1146","endLine":54,"endColumn":18,"suggestions":"1367"},{"ruleId":"1148","severity":1,"message":"1273","line":193,"column":9,"nodeType":"1150","messageId":"1151","endLine":193,"endColumn":23},{"ruleId":"1251","severity":1,"message":"1252","line":371,"column":37,"nodeType":"1177","endLine":371,"endColumn":48},{"ruleId":"1148","severity":1,"message":"1368","line":115,"column":7,"nodeType":"1150","messageId":"1151","endLine":115,"endColumn":16},{"ruleId":"1164","severity":1,"message":"1165","line":29,"column":5,"nodeType":"1166","messageId":"1167","endLine":45,"endColumn":6},{"ruleId":"1148","severity":1,"message":"1369","line":3,"column":31,"nodeType":"1150","messageId":"1151","endLine":3,"endColumn":36},{"ruleId":"1148","severity":1,"message":"1199","line":3,"column":38,"nodeType":"1150","messageId":"1151","endLine":3,"endColumn":52},{"ruleId":"1148","severity":1,"message":"1200","line":3,"column":54,"nodeType":"1150","messageId":"1151","endLine":3,"endColumn":61},{"ruleId":"1148","severity":1,"message":"1149","line":3,"column":63,"nodeType":"1150","messageId":"1151","endLine":3,"endColumn":69},{"ruleId":"1148","severity":1,"message":"1370","line":6,"column":8,"nodeType":"1150","messageId":"1151","endLine":6,"endColumn":13},{"ruleId":"1144","severity":1,"message":"1271","line":70,"column":5,"nodeType":"1146","endLine":70,"endColumn":7,"suggestions":"1371"},{"ruleId":"1144","severity":1,"message":"1372","line":33,"column":6,"nodeType":"1146","endLine":33,"endColumn":32,"suggestions":"1373"},{"ruleId":"1175","severity":1,"message":"1176","line":30,"column":59,"nodeType":"1177","messageId":"1178","endLine":30,"endColumn":84},{"ruleId":"1148","severity":1,"message":"1179","line":4,"column":3,"nodeType":"1150","messageId":"1151","endLine":4,"endColumn":9},{"ruleId":"1148","severity":1,"message":"1239","line":8,"column":8,"nodeType":"1150","messageId":"1151","endLine":8,"endColumn":14},{"ruleId":"1144","severity":1,"message":"1374","line":25,"column":6,"nodeType":"1146","endLine":25,"endColumn":8,"suggestions":"1375"},{"ruleId":"1144","severity":1,"message":"1376","line":40,"column":6,"nodeType":"1146","endLine":40,"endColumn":17,"suggestions":"1377"},{"ruleId":"1144","severity":1,"message":"1378","line":36,"column":6,"nodeType":"1146","endLine":36,"endColumn":12,"suggestions":"1379"},{"ruleId":"1202","severity":1,"message":"1203","line":110,"column":25,"nodeType":"1204","messageId":"1205","endLine":110,"endColumn":27},{"ruleId":"1148","severity":1,"message":"1380","line":5,"column":7,"nodeType":"1150","messageId":"1151","endLine":5,"endColumn":13},"no-native-reassign",["1381"],"no-negated-in-lhs",["1382"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'onSearchFilter'. Either include it or remove the dependency array.","ArrayExpression",["1383"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'Form' is defined but never used.","'Link' is defined but never used.","'clientId' is assigned a value but never used.",["1384"],["1385"],"React Hook useEffect has a missing dependency: 'getClientData'. Either include it or remove the dependency array.",["1386"],"'updateTradeLicenseExpiryUser' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'NavLink' is defined but never used.","'handleImageUpload' is defined but never used.","React Hook useEffect has a missing dependency: 'handleResize'. Either include it or remove the dependency array.",["1387"],"React Hook useEffect has a missing dependency: 'loadGridData'. Either include it or remove the dependency array.",["1388"],["1389"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'useRef' is defined but never used.","'InputGroup' is defined but never used.","'FormControl' is defined but never used.",["1390"],["1391"],"'setWidth' is assigned a value but never used.","'DatePicker' is defined but never used.","'StatusFilterCell' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getClients'. Either include it or remove the dependency array.",["1392"],"'resetFilters' is assigned a value but never used.","'onSearchFilter' is assigned a value but never used.","'Select' is defined but never used.","'entryTypeList' is defined but never used.","'FileIcon' is defined but never used.","'SalesForm' is defined but never used.","'ExpenditureForm' is defined but never used.","'PurchaseForm' is defined but never used.","'clientVatPeriod' is assigned a value but never used.","'onEntrySubmit' is assigned a value but never used.","'OverlayTrigger' is defined but never used.","'Popover' is defined but never used.","'AiOutlineReload' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'viewEntry' is assigned a value but never used.","'pagerSettings' is assigned a value but never used.",["1393"],["1394"],["1395"],["1396"],["1397"],["1398"],"'userObj' is assigned a value but never used.","'Modal' is defined but never used.","'Accordion' is defined but never used.","'ListGroup' is defined but never used.","'FaAngleDown' is defined but never used.","'Preview' is defined but never used.","'entryTypes' is defined but never used.","'useWindowSize' is defined but never used.","'accordionList' is assigned a value but never used.",["1399"],["1400"],"React Hook useEffect has a missing dependency: 'getPlanHistory'. Either include it or remove the dependency array.",["1401"],["1402"],"'avatar1' is defined but never used.","'previewImg' is assigned a value but never used.","'dpErrors' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getContries'. Either include it or remove the dependency array.",["1403"],"React Hook useEffect has missing dependencies: 'getUserData', 'props?.dataItem?.user_id', and 'props.isEdit'. Either include them or remove the dependency array.",["1404"],"'onFileChange' is assigned a value but never used.",["1405"],"React Hook useEffect has missing dependencies: 'getUserData', 'props?.dataItem?.id', and 'props.isEdit'. Either include them or remove the dependency array.",["1406"],"'moment' is defined but never used.","React Hook React.useCallback has an unnecessary dependency: 'props.row_count'. Either exclude it or remove the dependency array.",["1407"],"React Hook useEffect has a missing dependency: 'invoiceExpGroups'. Either include it or remove the dependency array.",["1408"],"React Hook useEffect has missing dependencies: 'getData' and 'props.entry?.entry_status_id'. Either include them or remove the dependency array.",["1409"],["1410"],"'useFormikContext' is defined but never used.","React Hook useEffect has missing dependencies: 'getSuppliers' and 'invoicePurchaseGroups'. Either include them or remove the dependency array.",["1411"],["1412"],"jsx-a11y/scope","The scope prop can only be used on <th> elements.","'setIsEdit' is assigned a value but never used.","'setSelectedItem' is assigned a value but never used.",["1413"],["1414"],["1415"],["1416"],["1417"],["1418"],"React Hook useEffect has a missing dependency: 'getFilePath'. Either include it or remove the dependency array.",["1419"],["1420"],["1421"],["1422"],["1423"],["1424"],"'entryStatus' is defined but never used.","'setIsSubmitted' is assigned a value but never used.",["1425"],"React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["1426"],"'calculateTotal' is assigned a value but never used.",["1427"],["1428"],["1429"],["1430"],["1431"],["1432"],["1433"],["1434"],["1435"],["1436"],["1437"],["1438"],["1439"],["1440"],["1441"],["1442"],["1443"],["1444"],["1445"],["1446"],["1447"],["1448"],["1449"],["1450"],["1451"],["1452"],["1453"],["1454"],["1455"],["1456"],["1457"],["1458"],["1459"],["1460"],["1461"],["1462"],["1463"],["1464"],["1465"],["1466"],["1467"],["1468"],["1469"],["1470"],["1471"],"'setgridState' is assigned a value but never used.",["1472"],["1473"],"'useEffect' is defined but never used.","React Hook React.useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["1474"],["1475"],["1476"],["1477"],"React Hook React.useCallback has a missing dependency: 'props.row_count'. Either include it or remove the dependency array.",["1478"],["1479"],["1480"],["1381"],["1382"],"'startDate' is assigned a value but never used.","'setStartDate' is assigned a value but never used.","'endDate' is assigned a value but never used.","'setEndDate' is assigned a value but never used.",["1481"],"'pageChange' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getContries', 'getUserData', 'props?.dataItem?.id', and 'props.isEdit'. Either include them or remove the dependency array.",["1482"],["1483"],["1484"],["1485"],["1486"],"React Hook useEffect has missing dependencies: 'getContries' and 'userInfo?.checker_user?.country'. Either include them or remove the dependency array.",["1487"],"React Hook useEffect has missing dependencies: 'getContries' and 'userInfo?.validator_user?.country'. Either include them or remove the dependency array.",["1488"],["1489"],"React Hook useEffect has missing dependencies: 'getContries' and 'userInfo?.admin_user?.country'. Either include them or remove the dependency array.",["1490"],"no-useless-escape","Unnecessary escape character: \\$.","Literal","unnecessaryEscape",["1491","1492"],"Unnecessary escape character: \\^.",["1493","1494"],"Unnecessary escape character: \\*.",["1495","1496"],["1497"],["1498"],["1499"],["1500"],["1501"],["1502"],"'backImage' is defined but never used.","'Media' is defined but never used.","'axios' is defined but never used.",["1503"],"React Hook useEffect has a missing dependency: 'isOpen'. Either include it or remove the dependency array.",["1504"],"React Hook useEffect has a missing dependency: 'getContacts'. Either include it or remove the dependency array.",["1505"],"React Hook useEffect has a missing dependency: 'friendFullList'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setfriendList' needs the current value of 'friendFullList'.",["1506"],"React Hook useEffect has a missing dependency: 'getMessage'. Either include it or remove the dependency array.",["1507"],"'images' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"1508","fix":"1509"},{"desc":"1508","fix":"1510"},{"desc":"1508","fix":"1511"},{"desc":"1512","fix":"1513"},{"desc":"1514","fix":"1515"},{"desc":"1516","fix":"1517"},{"desc":"1516","fix":"1518"},{"desc":"1514","fix":"1519"},{"desc":"1520","fix":"1521"},{"desc":"1522","fix":"1523"},{"desc":"1514","fix":"1524"},{"desc":"1520","fix":"1525"},{"desc":"1514","fix":"1526"},{"desc":"1520","fix":"1527"},{"desc":"1514","fix":"1528"},{"desc":"1520","fix":"1529"},{"desc":"1514","fix":"1530"},{"desc":"1520","fix":"1531"},{"desc":"1532","fix":"1533"},{"desc":"1534","fix":"1535"},{"desc":"1536","fix":"1537"},{"desc":"1538","fix":"1539"},{"desc":"1536","fix":"1540"},{"desc":"1541","fix":"1542"},{"desc":"1543","fix":"1544"},{"desc":"1545","fix":"1546"},{"desc":"1547","fix":"1548"},{"desc":"1549","fix":"1550"},{"desc":"1551","fix":"1552"},{"desc":"1547","fix":"1553"},{"desc":"1551","fix":"1554"},{"desc":"1545","fix":"1555"},{"desc":"1547","fix":"1556"},{"desc":"1551","fix":"1557"},{"desc":"1547","fix":"1558"},{"desc":"1549","fix":"1559"},{"desc":"1560","fix":"1561"},{"desc":"1536","fix":"1562"},{"desc":"1541","fix":"1563"},{"desc":"1549","fix":"1564"},{"desc":"1545","fix":"1565"},{"desc":"1547","fix":"1566"},{"desc":"1551","fix":"1567"},{"desc":"1568","fix":"1569"},{"desc":"1545","fix":"1570"},{"desc":"1568","fix":"1571"},{"desc":"1572","fix":"1573"},{"desc":"1536","fix":"1574"},{"desc":"1541","fix":"1575"},{"desc":"1545","fix":"1576"},{"desc":"1568","fix":"1577"},{"desc":"1549","fix":"1578"},{"desc":"1545","fix":"1579"},{"desc":"1547","fix":"1580"},{"desc":"1572","fix":"1581"},{"desc":"1551","fix":"1582"},{"desc":"1547","fix":"1583"},{"desc":"1551","fix":"1584"},{"desc":"1568","fix":"1585"},{"desc":"1572","fix":"1586"},{"desc":"1545","fix":"1587"},{"desc":"1568","fix":"1588"},{"desc":"1551","fix":"1589"},{"desc":"1568","fix":"1590"},{"desc":"1572","fix":"1591"},{"desc":"1545","fix":"1592"},{"desc":"1568","fix":"1593"},{"desc":"1551","fix":"1594"},{"desc":"1568","fix":"1595"},{"desc":"1551","fix":"1596"},{"desc":"1568","fix":"1597"},{"desc":"1572","fix":"1598"},{"desc":"1545","fix":"1599"},{"desc":"1568","fix":"1600"},{"desc":"1545","fix":"1601"},{"desc":"1568","fix":"1602"},{"desc":"1551","fix":"1603"},{"desc":"1568","fix":"1604"},{"desc":"1572","fix":"1605"},{"desc":"1551","fix":"1606"},{"desc":"1547","fix":"1607"},{"desc":"1545","fix":"1608"},{"desc":"1547","fix":"1609"},{"desc":"1549","fix":"1610"},{"desc":"1551","fix":"1611"},{"desc":"1568","fix":"1612"},{"desc":"1545","fix":"1613"},{"desc":"1568","fix":"1614"},{"desc":"1572","fix":"1615"},{"desc":"1572","fix":"1616"},{"desc":"1520","fix":"1617"},{"desc":"1572","fix":"1618"},{"desc":"1536","fix":"1619"},{"desc":"1541","fix":"1620"},{"desc":"1572","fix":"1621"},{"desc":"1622","fix":"1623"},{"desc":"1622","fix":"1624"},{"desc":"1622","fix":"1625"},{"desc":"1520","fix":"1626"},{"desc":"1627","fix":"1628"},{"desc":"1627","fix":"1629"},{"desc":"1627","fix":"1630"},{"desc":"1532","fix":"1631"},{"desc":"1534","fix":"1632"},{"desc":"1633","fix":"1634"},{"desc":"1635","fix":"1636"},{"desc":"1536","fix":"1637"},{"desc":"1638","fix":"1639"},{"messageId":"1640","fix":"1641","desc":"1642"},{"messageId":"1643","fix":"1644","desc":"1645"},{"messageId":"1640","fix":"1646","desc":"1642"},{"messageId":"1643","fix":"1647","desc":"1645"},{"messageId":"1640","fix":"1648","desc":"1642"},{"messageId":"1643","fix":"1649","desc":"1645"},{"desc":"1536","fix":"1650"},{"desc":"1572","fix":"1651"},{"desc":"1545","fix":"1652"},{"desc":"1568","fix":"1653"},{"desc":"1551","fix":"1654"},{"desc":"1568","fix":"1655"},{"desc":"1572","fix":"1656"},{"desc":"1657","fix":"1658"},{"desc":"1659","fix":"1660"},{"desc":"1661","fix":"1662"},{"desc":"1663","fix":"1664"},"Update the dependencies array to be: [onSearchFilter, selectedPeriod]",{"range":"1665","text":"1666"},{"range":"1667","text":"1666"},{"range":"1668","text":"1666"},"Update the dependencies array to be: [getClientData]",{"range":"1669","text":"1670"},"Update the dependencies array to be: [handleResize]",{"range":"1671","text":"1672"},"Update the dependencies array to be: [loadGridData, usersList, usersState]",{"range":"1673","text":"1674"},{"range":"1675","text":"1674"},{"range":"1676","text":"1672"},"Update the dependencies array to be: [entriesList, gridState, loadGridData]",{"range":"1677","text":"1678"},"Update the dependencies array to be: [getClients]",{"range":"1679","text":"1680"},{"range":"1681","text":"1672"},{"range":"1682","text":"1678"},{"range":"1683","text":"1672"},{"range":"1684","text":"1678"},{"range":"1685","text":"1672"},{"range":"1686","text":"1678"},{"range":"1687","text":"1672"},{"range":"1688","text":"1678"},"Update the dependencies array to be: [getPlanHistory]",{"range":"1689","text":"1690"},"Update the dependencies array to be: [historyData, gridState, loadGridData]",{"range":"1691","text":"1692"},"Update the dependencies array to be: [getContries]",{"range":"1693","text":"1694"},"Update the dependencies array to be: [countriesList, getUserData, props?.dataItem?.user_id, props.isEdit]",{"range":"1695","text":"1696"},{"range":"1697","text":"1694"},"Update the dependencies array to be: [countriesList, getUserData, props?.dataItem?.id, props.isEdit]",{"range":"1698","text":"1699"},"Update the dependencies array to be: []",{"range":"1700","text":"1701"},"Update the dependencies array to be: [invoiceExpGroups]",{"range":"1702","text":"1703"},"Update the dependencies array to be: [getData, groupsList, props.entry?.entry_status_id]",{"range":"1704","text":"1705"},"Update the dependencies array to be: [getData, props.entry?.entry_status_id]",{"range":"1706","text":"1707"},"Update the dependencies array to be: [getSuppliers, invoicePurchaseGroups]",{"range":"1708","text":"1709"},{"range":"1710","text":"1705"},{"range":"1711","text":"1709"},{"range":"1712","text":"1703"},{"range":"1713","text":"1705"},{"range":"1714","text":"1709"},{"range":"1715","text":"1705"},{"range":"1716","text":"1707"},"Update the dependencies array to be: [getFilePath]",{"range":"1717","text":"1718"},{"range":"1719","text":"1694"},{"range":"1720","text":"1699"},{"range":"1721","text":"1707"},{"range":"1722","text":"1703"},{"range":"1723","text":"1705"},{"range":"1724","text":"1709"},"Update the dependencies array to be: [getData, groupsList]",{"range":"1725","text":"1726"},{"range":"1727","text":"1703"},{"range":"1728","text":"1726"},"Update the dependencies array to be: [getData]",{"range":"1729","text":"1730"},{"range":"1731","text":"1694"},{"range":"1732","text":"1699"},{"range":"1733","text":"1703"},{"range":"1734","text":"1726"},{"range":"1735","text":"1707"},{"range":"1736","text":"1703"},{"range":"1737","text":"1705"},{"range":"1738","text":"1730"},{"range":"1739","text":"1709"},{"range":"1740","text":"1705"},{"range":"1741","text":"1709"},{"range":"1742","text":"1726"},{"range":"1743","text":"1730"},{"range":"1744","text":"1703"},{"range":"1745","text":"1726"},{"range":"1746","text":"1709"},{"range":"1747","text":"1726"},{"range":"1748","text":"1730"},{"range":"1749","text":"1703"},{"range":"1750","text":"1726"},{"range":"1751","text":"1709"},{"range":"1752","text":"1726"},{"range":"1753","text":"1709"},{"range":"1754","text":"1726"},{"range":"1755","text":"1730"},{"range":"1756","text":"1703"},{"range":"1757","text":"1726"},{"range":"1758","text":"1703"},{"range":"1759","text":"1726"},{"range":"1760","text":"1709"},{"range":"1761","text":"1726"},{"range":"1762","text":"1730"},{"range":"1763","text":"1709"},{"range":"1764","text":"1705"},{"range":"1765","text":"1703"},{"range":"1766","text":"1705"},{"range":"1767","text":"1707"},{"range":"1768","text":"1709"},{"range":"1769","text":"1726"},{"range":"1770","text":"1703"},{"range":"1771","text":"1726"},{"range":"1772","text":"1730"},{"range":"1773","text":"1730"},{"range":"1774","text":"1678"},{"range":"1775","text":"1730"},{"range":"1776","text":"1694"},{"range":"1777","text":"1699"},{"range":"1778","text":"1730"},"Update the dependencies array to be: [props.row_count]",{"range":"1779","text":"1780"},{"range":"1781","text":"1780"},{"range":"1782","text":"1780"},{"range":"1783","text":"1678"},"Update the dependencies array to be: [getContries, getUserData, props?.dataItem?.id, props.isEdit]",{"range":"1784","text":"1785"},{"range":"1786","text":"1785"},{"range":"1787","text":"1785"},{"range":"1788","text":"1690"},{"range":"1789","text":"1692"},"Update the dependencies array to be: [getContries, userInfo?.checker_user?.country]",{"range":"1790","text":"1791"},"Update the dependencies array to be: [getContries, userInfo?.validator_user?.country]",{"range":"1792","text":"1793"},{"range":"1794","text":"1694"},"Update the dependencies array to be: [getContries, userInfo?.admin_user?.country]",{"range":"1795","text":"1796"},"removeEscape",{"range":"1797","text":"1798"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"1799","text":"1800"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"1801","text":"1798"},{"range":"1802","text":"1800"},{"range":"1803","text":"1798"},{"range":"1804","text":"1800"},{"range":"1805","text":"1694"},{"range":"1806","text":"1730"},{"range":"1807","text":"1703"},{"range":"1808","text":"1726"},{"range":"1809","text":"1709"},{"range":"1810","text":"1726"},{"range":"1811","text":"1730"},"Update the dependencies array to be: [collapse, dispatch, isOpen, type]",{"range":"1812","text":"1813"},"Update the dependencies array to be: [getContacts]",{"range":"1814","text":"1815"},"Update the dependencies array to be: [friendFullList, searchKey]",{"range":"1816","text":"1817"},"Update the dependencies array to be: [getMessage, user]",{"range":"1818","text":"1819"},[1414,1430],"[onSearchFilter, selectedPeriod]",[1331,1347],[1331,1347],[2712,2714],"[getClientData]",[1799,1801],"[handleResize]",[1854,1877],"[loadGridData, usersList, usersState]",[1475,1498],[1989,1991],[2036,2060],"[entriesList, gridState, loadGridData]",[1887,1889],"[getClients]",[2371,2373],[2418,2442],[2248,2250],[2295,2319],[2005,2007],[2052,2076],[2175,2177],[2226,2250],[1084,1086],"[getPlanHistory]",[1135,1159],"[historyData, gridState, loadGridData]",[3313,3315],"[getContries]",[3434,3449],"[countriesList, getUserData, props?.dataItem?.user_id, props.isEdit]",[1592,1594],[1717,1732],"[countriesList, getUserData, props?.dataItem?.id, props.isEdit]",[1891,1908],"[]",[1770,1772],"[invoiceExpGroups]",[1929,1941],"[getData, groupsList, props.entry?.entry_status_id]",[1345,1347],"[getData, props.entry?.entry_status_id]",[1964,1966],"[getSuppliers, invoicePurchaseGroups]",[2123,2135],[3107,3109],[1770,1772],[1929,1941],[1933,1935],[2092,2104],[1345,1347],[506,508],"[getFilePath]",[1371,1373],[1487,1502],[1619,1621],[2833,2835],[2984,2996],[1826,1828],[1909,1921],"[getData, groupsList]",[1471,1473],[1540,1552],[1103,1105],"[getData]",[3604,3606],[3729,3744],[1427,1429],[1492,1504],[1364,1366],[1787,1789],[1946,1958],[1064,1066],[1873,1875],[2016,2028],[1749,1751],[1823,1835],[1417,1419],[1785,1787],[1854,1866],[1749,1751],[1823,1835],[1064,1066],[1428,1430],[1493,1505],[2079,2081],[2162,2174],[1826,1828],[1909,1921],[1103,1105],[1471,1473],[1540,1552],[1785,1787],[1854,1866],[2079,2081],[2162,2174],[1372,1374],[1933,1935],[2092,2104],[1770,1772],[1929,1941],[1345,1347],[1826,1828],[1909,1921],[1533,1535],[1602,1614],[1103,1105],[1835,1837],[1925,1949],[1461,1463],[3604,3606],[3729,3744],[813,815],[1834,1836],"[props.row_count]",[1601,1603],[2031,2033],[1962,1986],[1779,1781],"[getContries, getUserData, props?.dataItem?.id, props.isEdit]",[1780,1782],[1927,1929],[1073,1075],[1124,1148],[1829,1831],"[getContries, userInfo?.checker_user?.country]",[1833,1835],"[getContries, userInfo?.validator_user?.country]",[3585,3587],[1826,1828],"[getContries, userInfo?.admin_user?.country]",[2960,2961],"",[2960,2960],"\\",[2963,2964],[2963,2963],[2966,2967],[2966,2966],[4150,4152],[1417,1419],[1785,1787],[1854,1866],[2079,2081],[2162,2174],[3146,3148],[998,1024],"[collapse, dispatch, isOpen, type]",[751,753],"[getContacts]",[1083,1094],"[friendFullList, searchKey]",[1207,1213],"[getMessage, user]"]